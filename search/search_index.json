{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":".md-content__button { display: none; } .md-content .logo { width: 150px; display: block; margin: 0px auto 20px auto; } .md-content .md-typeset h1, .md-content .md-typeset h2 { text-align: center; margin: 0; } .md-content .md-typeset h1 { text-align: center; margin-bottom: 0.12em; } .md-content .md-typeset .headerlink { display: none; } .md-content .md-typeset .quickstart { display: flex; flex-direction: row; justify-content: center; } Tourmaline Crystal Telegram Bot Framework Quickstart Tourmaline uses Crystal to communicate with the Telegram Bot API. Therefore to use Tourmaline you should be familiar with how Crystal works. Once inside of a Crystal project, add Tourmaline to your shard.yml file and run shards install to install it. For more information, see the getting started page. require \"tourmaline\" client = Tourmaline :: Client . new ( ENV [ \"BOT_TOKEN\" ] ) echo_handler = Tourmaline :: CommandHandler . new ( \"echo\" ) do | ctx | text = ctx . text . to_s ctx . reply ( text ) unless text . empty? end client . register ( echo_handler ) client . poll","title":"Home"},{"location":"SUMMARY/","text":"Home Usage Getting Started Resources FAQ Asking Questions API Reference Changelog Tourmaline","title":"SUMMARY"},{"location":"changelog/","text":"Tourmaline Changelog # I will do my best to keep this updated with changes as they happen. 0.30.0 # Added: # Full support for Bot API 6.9 See the official Bot API changelog for a complete list of changes. 0.29.0 # The core functionality of Tourmaline is now auto generated from the official Bot API documentation. This means that Tourmaline will always be up to date with the latest version of the Bot API. Added: # New method set_my_name to change the bot's name. Returns True on success. New method get_my_name to get the current bot name for the user's language. Returns BotName on success. New Tourmaline::BotName class to represent the bot's name. New Tourmaline::InlineQueryResultsButton class to represent a button shown above inline query results. New Tourmaline::SwitchInlineQueryChosenChat class to represent an inline button for switching the user to inline mode in a chosen chat. Changed: # Updated Tourmaline::WriteAccessAllowed class to include an optional web_app_name property for the Web App launched from a link. Modified Tourmaline::InlineKeyboardButton class to include an optional switch_inline_query_chosen_chat property. Updated Tourmaline::CallbackQuery class to include an optional via_chat_folder_invite_link property. Modified answerInlineQuery method to accept a Tourmaline::InlineQueryResultsButton instead of switch_pm_text and switch_pm_parameter parameters. Fixed: # No bug fixes reported in this diff. 0.28.0 # This release contains major breaking changes. If you currently rely on Tourmaline as a framework you may not want to update. Added full support for Bot API versions 6.4, 6.5, and 6.6 (breaking change) Removed all annotation based handlers. (breaking change) Removed the Handlers namespace. All handlers now fall directly under Tourmaline . (breaking change) Stripped Tourmaline of all magic . Models no longer have a client instance passed to them, instead we will now rely on the Tourmaline::Context which is passed to all handler callbacks. Examples have been updated. 0.27.0 # Added full support for Bot API 6.3 (breaking change) All is_ prefixed properties in models have been replaced with ? getters. For instance, is_anonymous is now anonymous? . (breaking change) Client#default_parse_mode and Client#default_command_prefixes have been made class properties instead of instance properties. Fixed issues with missing priority and group properties on event handlers. (breaking change) extra/paginated_keyboard no longer extends InlineKeyboardMarkup . Added methods Client#send_paginated_keyboard , Chat#send_paginated_keyboard , Message#reply_with_paginated_keyboard , and Message#respond_with_paginated_keyboard . Requires import of extra/paginated_keyboard . Fixed broken parts of extra/routed_menu . Fixed broken parts of extra/stage . Handlers no longer require an instance of Tourmaline::Client . Added several new UpdateAction s including ThreadMessage , ForumTopicCreated , ForumTopicClosed , ForumTopicReopened , VideoChatScheduled , VideoChatStarted , VideoChatEnded , VideoChatParticipantsInvited , and WebAppData . Bot examples have all been fixed More, see the official Bot API changelog for a complete list of changes. 0.25.1 # Added sender_type method and SenderType enum to Message , allowing the user to easily figure out what type of user or channel sent the given message. Updated docs 0.25.0 # Removed Container class which was being used to maintain a global instance of Client . Added finish_init method to all models, allowing them to contain an instance of the Client that created them. 0.24.0 # Added full support for Bot API 5.4 and 5.5 More, see the official Bot API changelog for a complete list of changes. 0.23.0 # Added full support for Bot API 5.1 - 5.3 Fixed some dependencies. Added additional classes ChatInviteLink , VoiceChatStarted , VoiceChatEnded , VoiceChatParticipantInvited , VoiceChatScheduled , MessageAutoDeleteTimerChanged , InputInvoiceMessageContent , and BotCommandScope . Added scope and language_code options to set_my_commands and get_my_commands . Added method delete_my_commands . More, see the official Bot API changelog for a complete list of changes. 0.22.0 # Added support for TDLight. Added user_token argument to Client.new to support the TDLight user API. (breaking change) All arguments to Client.new are now keyword arguments. (breaking change) Removed async argument from event handlers. All events are now async by default. Async events can be disabled with the -Dno_async flag. UpdateHandler now accepts an array of UpdateAction , or a single one. Fixed an issue where poll always deletes a set webhook. Now it will only delete the webhook if delete_webhook is true. 0.20.0 # (breaking change) Removed the filters, replaced with new handlers (breaking change) Removed Granite specific DB includes from models (also commented out db_persistence.cr ; next update should make persistence better) (breaking change) Renamed PagedInlineKeyboard to PagedKeyboard Added RoutedMenu class for easy menu building 0.19.1 # Replace broken Int in unions with Int::Primitive Make Helpers.random_string actually return a random string, not just a number Change the first run logic in Stage 0.19.0 # Added support for Passport Added animated? to Sticker Added several new filters including InlineQueryFilter and CallbackQueryFilter Added connection pooling to fix concurrency errors Events are now async by default Added a new helper class PagedInlineKeyboard (breaking change) Moved KemalAdapter to tourmaline/extra Added proxy support based on mamantoha/http_proxy Added support for multiple prefixes with commands Allow changing the log level using the LOG environment variable Added an InstaBot example (breaking change) Disabled (commented out) DBPersistence for now Updated for bot API 4.9 Added support for the \ud83c\udfc0 emoji, including methods Client#send_basket , Message#reply_with_basket , and Message#respond_with_basket Added via_bot field to Message Added Stage (importable from tourmaline/extra ) for conversation handling 0.18.1 # Added ameba checks Replaced Halite with HTTP::Client , resulting in a major speed boost Rename persistent_init and persistent_cleanup to init and cleanup respectively Remove handle_error in favor of Error.from_code 0.18.0 # Updated polls for Quiz 2.0 Added new send_dart method 0.17.0 # KeyboardMarkup (breaking change) Replace Markup class with KeyboardBuilder abstract class and extend it with ReplyKeyboardMarkup::Builder and InlineKeyboardMarkup::Builder . Add .build methods to ReplyKeyboardMarkup and InlineKeyboardMarkup . (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Update examples with new Builder classes being used. InlineQueryResult (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Add .build method to InlineQueryResult . Update examples with new Builder classes being used. Persistence (breaking change) Made Persistence a class rather than a module and updated HashPersistence and JsonPersistence to use it. Add persistence instance variable to Client Add NilPersistence and make it the default persistence for new Client s Add DBPersistence 0.16.0 # Add CHANGELOG Add support for Filters. Add users methods to Update and Message to return all users included in the same. Replaced usage of the strange logger with the new Crystal Log class. Log all updates with Debug severity if VERBOSE environment variable is set to true . (breaking change) Renamed File to TFile to avoid conflicting with the builtin File class. (breaking change) removed the Handler class and all subclasses. Update handling is now done exclusively with the EventHandler class and Filter s. 0.15.1 # Fix bug with event handler that was causing On handlers to run on every update. Add CNAME file for tourmaline.dev Update the logo. Add DiceBot example. 0.15.0 # Updated to bot API 4.7 Add send_dice method to client. Add BotCommand model along with get_my_commands and set_my_commands methods. Add new sticker/sticker set methods. Add Dice update action.","title":"Changelog"},{"location":"changelog/#tourmaline-changelog","text":"I will do my best to keep this updated with changes as they happen.","title":"Tourmaline Changelog"},{"location":"changelog/#0300","text":"","title":"0.30.0"},{"location":"changelog/#added","text":"Full support for Bot API 6.9 See the official Bot API changelog for a complete list of changes.","title":"Added:"},{"location":"changelog/#0290","text":"The core functionality of Tourmaline is now auto generated from the official Bot API documentation. This means that Tourmaline will always be up to date with the latest version of the Bot API.","title":"0.29.0"},{"location":"changelog/#added_1","text":"New method set_my_name to change the bot's name. Returns True on success. New method get_my_name to get the current bot name for the user's language. Returns BotName on success. New Tourmaline::BotName class to represent the bot's name. New Tourmaline::InlineQueryResultsButton class to represent a button shown above inline query results. New Tourmaline::SwitchInlineQueryChosenChat class to represent an inline button for switching the user to inline mode in a chosen chat.","title":"Added:"},{"location":"changelog/#changed","text":"Updated Tourmaline::WriteAccessAllowed class to include an optional web_app_name property for the Web App launched from a link. Modified Tourmaline::InlineKeyboardButton class to include an optional switch_inline_query_chosen_chat property. Updated Tourmaline::CallbackQuery class to include an optional via_chat_folder_invite_link property. Modified answerInlineQuery method to accept a Tourmaline::InlineQueryResultsButton instead of switch_pm_text and switch_pm_parameter parameters.","title":"Changed:"},{"location":"changelog/#fixed","text":"No bug fixes reported in this diff.","title":"Fixed:"},{"location":"changelog/#0280","text":"This release contains major breaking changes. If you currently rely on Tourmaline as a framework you may not want to update. Added full support for Bot API versions 6.4, 6.5, and 6.6 (breaking change) Removed all annotation based handlers. (breaking change) Removed the Handlers namespace. All handlers now fall directly under Tourmaline . (breaking change) Stripped Tourmaline of all magic . Models no longer have a client instance passed to them, instead we will now rely on the Tourmaline::Context which is passed to all handler callbacks. Examples have been updated.","title":"0.28.0"},{"location":"changelog/#0270","text":"Added full support for Bot API 6.3 (breaking change) All is_ prefixed properties in models have been replaced with ? getters. For instance, is_anonymous is now anonymous? . (breaking change) Client#default_parse_mode and Client#default_command_prefixes have been made class properties instead of instance properties. Fixed issues with missing priority and group properties on event handlers. (breaking change) extra/paginated_keyboard no longer extends InlineKeyboardMarkup . Added methods Client#send_paginated_keyboard , Chat#send_paginated_keyboard , Message#reply_with_paginated_keyboard , and Message#respond_with_paginated_keyboard . Requires import of extra/paginated_keyboard . Fixed broken parts of extra/routed_menu . Fixed broken parts of extra/stage . Handlers no longer require an instance of Tourmaline::Client . Added several new UpdateAction s including ThreadMessage , ForumTopicCreated , ForumTopicClosed , ForumTopicReopened , VideoChatScheduled , VideoChatStarted , VideoChatEnded , VideoChatParticipantsInvited , and WebAppData . Bot examples have all been fixed More, see the official Bot API changelog for a complete list of changes.","title":"0.27.0"},{"location":"changelog/#0251","text":"Added sender_type method and SenderType enum to Message , allowing the user to easily figure out what type of user or channel sent the given message. Updated docs","title":"0.25.1"},{"location":"changelog/#0250","text":"Removed Container class which was being used to maintain a global instance of Client . Added finish_init method to all models, allowing them to contain an instance of the Client that created them.","title":"0.25.0"},{"location":"changelog/#0240","text":"Added full support for Bot API 5.4 and 5.5 More, see the official Bot API changelog for a complete list of changes.","title":"0.24.0"},{"location":"changelog/#0230","text":"Added full support for Bot API 5.1 - 5.3 Fixed some dependencies. Added additional classes ChatInviteLink , VoiceChatStarted , VoiceChatEnded , VoiceChatParticipantInvited , VoiceChatScheduled , MessageAutoDeleteTimerChanged , InputInvoiceMessageContent , and BotCommandScope . Added scope and language_code options to set_my_commands and get_my_commands . Added method delete_my_commands . More, see the official Bot API changelog for a complete list of changes.","title":"0.23.0"},{"location":"changelog/#0220","text":"Added support for TDLight. Added user_token argument to Client.new to support the TDLight user API. (breaking change) All arguments to Client.new are now keyword arguments. (breaking change) Removed async argument from event handlers. All events are now async by default. Async events can be disabled with the -Dno_async flag. UpdateHandler now accepts an array of UpdateAction , or a single one. Fixed an issue where poll always deletes a set webhook. Now it will only delete the webhook if delete_webhook is true.","title":"0.22.0"},{"location":"changelog/#0200","text":"(breaking change) Removed the filters, replaced with new handlers (breaking change) Removed Granite specific DB includes from models (also commented out db_persistence.cr ; next update should make persistence better) (breaking change) Renamed PagedInlineKeyboard to PagedKeyboard Added RoutedMenu class for easy menu building","title":"0.20.0"},{"location":"changelog/#0191","text":"Replace broken Int in unions with Int::Primitive Make Helpers.random_string actually return a random string, not just a number Change the first run logic in Stage","title":"0.19.1"},{"location":"changelog/#0190","text":"Added support for Passport Added animated? to Sticker Added several new filters including InlineQueryFilter and CallbackQueryFilter Added connection pooling to fix concurrency errors Events are now async by default Added a new helper class PagedInlineKeyboard (breaking change) Moved KemalAdapter to tourmaline/extra Added proxy support based on mamantoha/http_proxy Added support for multiple prefixes with commands Allow changing the log level using the LOG environment variable Added an InstaBot example (breaking change) Disabled (commented out) DBPersistence for now Updated for bot API 4.9 Added support for the \ud83c\udfc0 emoji, including methods Client#send_basket , Message#reply_with_basket , and Message#respond_with_basket Added via_bot field to Message Added Stage (importable from tourmaline/extra ) for conversation handling","title":"0.19.0"},{"location":"changelog/#0181","text":"Added ameba checks Replaced Halite with HTTP::Client , resulting in a major speed boost Rename persistent_init and persistent_cleanup to init and cleanup respectively Remove handle_error in favor of Error.from_code","title":"0.18.1"},{"location":"changelog/#0180","text":"Updated polls for Quiz 2.0 Added new send_dart method","title":"0.18.0"},{"location":"changelog/#0170","text":"KeyboardMarkup (breaking change) Replace Markup class with KeyboardBuilder abstract class and extend it with ReplyKeyboardMarkup::Builder and InlineKeyboardMarkup::Builder . Add .build methods to ReplyKeyboardMarkup and InlineKeyboardMarkup . (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Update examples with new Builder classes being used. InlineQueryResult (breaking change) Replace QueryResultBuilder with InlineQueryResult::Builder . Add .build method to InlineQueryResult . Update examples with new Builder classes being used. Persistence (breaking change) Made Persistence a class rather than a module and updated HashPersistence and JsonPersistence to use it. Add persistence instance variable to Client Add NilPersistence and make it the default persistence for new Client s Add DBPersistence","title":"0.17.0"},{"location":"changelog/#0160","text":"Add CHANGELOG Add support for Filters. Add users methods to Update and Message to return all users included in the same. Replaced usage of the strange logger with the new Crystal Log class. Log all updates with Debug severity if VERBOSE environment variable is set to true . (breaking change) Renamed File to TFile to avoid conflicting with the builtin File class. (breaking change) removed the Handler class and all subclasses. Update handling is now done exclusively with the EventHandler class and Filter s.","title":"0.16.0"},{"location":"changelog/#0151","text":"Fix bug with event handler that was causing On handlers to run on every update. Add CNAME file for tourmaline.dev Update the logo. Add DiceBot example.","title":"0.15.1"},{"location":"changelog/#0150","text":"Updated to bot API 4.7 Add send_dice method to client. Add BotCommand model along with get_my_commands and set_my_commands methods. Add new sticker/sticker set methods. Add Dice update action.","title":"0.15.0"},{"location":"api_reference/Slice/","text":"struct Slice(T) inherits Struct # A Slice is a Pointer with an associated size. While a pointer is unsafe because no bound checks are performed when reading from and writing to it, reading from and writing to a slice involve bound checks. In this way, a slice is a safe alternative to Pointer . A Slice can be created as read-only: trying to write to it will raise. For example the slice of bytes returned by String#to_slice is read-only. Included modules Comparable Indexable","title":"::: Slice"},{"location":"api_reference/Slice/#Slice","text":"A Slice is a Pointer with an associated size. While a pointer is unsafe because no bound checks are performed when reading from and writing to it, reading from and writing to a slice involve bound checks. In this way, a slice is a safe alternative to Pointer . A Slice can be created as read-only: trying to write to it will raise. For example the slice of bytes returned by String#to_slice is read-only.","title":"Slice"},{"location":"api_reference/Tourmaline/","text":"module Tourmaline # Tourmaline is a Telegram Bot API library for Telegram . It provides an easy to use interface for creating telegram bots, and using the various bot APIs that Telegram provides. For usage examples, see the examples directory. For guides on using Tourmaline, see the official Tourmaline cookbook . Constants # VERSION = \"0.30.0\" #","title":"Tourmaline"},{"location":"api_reference/Tourmaline/#Tourmaline","text":"Tourmaline is a Telegram Bot API library for Telegram . It provides an easy to use interface for creating telegram bots, and using the various bot APIs that Telegram provides. For usage examples, see the examples directory. For guides on using Tourmaline, see the official Tourmaline cookbook .","title":"Tourmaline"},{"location":"api_reference/Tourmaline/#Tourmaline-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/#Tourmaline::VERSION","text":"","title":"VERSION"},{"location":"api_reference/Tourmaline/Animation/","text":"class Tourmaline::Animation inherits Reference # This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound). Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , width , height , duration , thumbnail : Tourmaline::PhotoSize? = nil , file_name : String? = nil , mime_type : String? = nil , file_size : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 | Int64 # Duration of the video in seconds as defined by sender View source #duration= ( duration : Int32 | Int64 ) # Duration of the video in seconds as defined by sender View source #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_name : String? # Optional. Original animation filename as defined by sender View source #file_name= ( file_name : String? ) # Optional. Original animation filename as defined by sender View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #height : Int32 | Int64 # Video height as defined by sender View source #height= ( height : Int32 | Int64 ) # Video height as defined by sender View source #mime_type : String? # Optional. MIME type of the file as defined by sender View source #mime_type= ( mime_type : String? ) # Optional. MIME type of the file as defined by sender View source #thumbnail : Tourmaline::PhotoSize? # Optional. Animation thumbnail as defined by sender View source #thumbnail= ( thumbnail : Tourmaline::PhotoSize? ) # Optional. Animation thumbnail as defined by sender View source #width : Int32 | Int64 # Video width as defined by sender View source #width= ( width : Int32 | Int64 ) # Video width as defined by sender View source","title":"Animation"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation","text":"This object represents an animation file (GIF or H.264/MPEG-4 AVC video without sound).","title":"Animation"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation.new(file_id,file_unique_id,width,height,duration,thumbnail,file_name,mime_type,file_size)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#duration","text":"Duration of the video in seconds as defined by sender View source","title":"#duration"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#duration=(duration)","text":"Duration of the video in seconds as defined by sender View source","title":"#duration="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_name","text":"Optional. Original animation filename as defined by sender View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_name=(file_name)","text":"Optional. Original animation filename as defined by sender View source","title":"#file_name="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_size","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_size=(file_size)","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#height","text":"Video height as defined by sender View source","title":"#height"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#height=(height)","text":"Video height as defined by sender View source","title":"#height="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#mime_type","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#mime_type=(mime_type)","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#thumbnail","text":"Optional. Animation thumbnail as defined by sender View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#thumbnail=(thumbnail)","text":"Optional. Animation thumbnail as defined by sender View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#width","text":"Video width as defined by sender View source","title":"#width"},{"location":"api_reference/Tourmaline/Animation/#Tourmaline::Animation#width=(width)","text":"Video width as defined by sender View source","title":"#width="},{"location":"api_reference/Tourmaline/Audio/","text":"class Tourmaline::Audio inherits Reference # This object represents an audio file to be treated as music by the Telegram clients. Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , duration , performer : String? = nil , title : String? = nil , file_name : String? = nil , mime_type : String? = nil , file_size : Int32 | Int64 | Nil = nil , thumbnail : Tourmaline::PhotoSize? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 | Int64 # Duration of the audio in seconds as defined by sender View source #duration= ( duration : Int32 | Int64 ) # Duration of the audio in seconds as defined by sender View source #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_name : String? # Optional. Original filename as defined by sender View source #file_name= ( file_name : String? ) # Optional. Original filename as defined by sender View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #mime_type : String? # Optional. MIME type of the file as defined by sender View source #mime_type= ( mime_type : String? ) # Optional. MIME type of the file as defined by sender View source #performer : String? # Optional. Performer of the audio as defined by sender or by audio tags View source #performer= ( performer : String? ) # Optional. Performer of the audio as defined by sender or by audio tags View source #thumbnail : Tourmaline::PhotoSize? # Optional. Thumbnail of the album cover to which the music file belongs View source #thumbnail= ( thumbnail : Tourmaline::PhotoSize? ) # Optional. Thumbnail of the album cover to which the music file belongs View source #title : String? # Optional. Title of the audio as defined by sender or by audio tags View source #title= ( title : String? ) # Optional. Title of the audio as defined by sender or by audio tags View source","title":"Audio"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio","text":"This object represents an audio file to be treated as music by the Telegram clients.","title":"Audio"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio.new(file_id,file_unique_id,duration,performer,title,file_name,mime_type,file_size,thumbnail)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#duration","text":"Duration of the audio in seconds as defined by sender View source","title":"#duration"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#duration=(duration)","text":"Duration of the audio in seconds as defined by sender View source","title":"#duration="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_name","text":"Optional. Original filename as defined by sender View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_name=(file_name)","text":"Optional. Original filename as defined by sender View source","title":"#file_name="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_size","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_size=(file_size)","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#mime_type","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#mime_type=(mime_type)","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#performer","text":"Optional. Performer of the audio as defined by sender or by audio tags View source","title":"#performer"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#performer=(performer)","text":"Optional. Performer of the audio as defined by sender or by audio tags View source","title":"#performer="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#thumbnail","text":"Optional. Thumbnail of the album cover to which the music file belongs View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#thumbnail=(thumbnail)","text":"Optional. Thumbnail of the album cover to which the music file belongs View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#title","text":"Optional. Title of the audio as defined by sender or by audio tags View source","title":"#title"},{"location":"api_reference/Tourmaline/Audio/#Tourmaline::Audio#title=(title)","text":"Optional. Title of the audio as defined by sender or by audio tags View source","title":"#title="},{"location":"api_reference/Tourmaline/BackgroundFill/","text":"alias Tourmaline::BackgroundFill # This object describes the way a background is filled based on the selected colors. Currently, it can be one of - BackgroundFillSolid - BackgroundFillGradient - BackgroundFillFreeformGradient Alias definition Tourmaline::BackgroundFillFreeformGradient | Tourmaline::BackgroundFillGradient | Tourmaline::BackgroundFillSolid","title":"BackgroundFill"},{"location":"api_reference/Tourmaline/BackgroundFill/#Tourmaline::BackgroundFill","text":"This object describes the way a background is filled based on the selected colors. Currently, it can be one of - BackgroundFillSolid - BackgroundFillGradient - BackgroundFillFreeformGradient","title":"BackgroundFill"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/","text":"class Tourmaline::BackgroundFillFreeformGradient inherits Reference # The background is a freeform gradient that rotates after every message in the chat. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type , colors : Array ( Int32 | Int64 ) = [] of Int32 | Int64 ) # View source Methods # #colors : Array ( Int32 | Int64 ) # A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format View source #colors= ( colors : Array ( Int32 | Int64 )) # A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format View source #type : String # Type of the background fill, always \"freeform_gradient\" View source #type= ( type : String ) # Type of the background fill, always \"freeform_gradient\" View source","title":"BackgroundFillFreeformGradient"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient","text":"The background is a freeform gradient that rotates after every message in the chat.","title":"BackgroundFillFreeformGradient"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient#colors","text":"A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format View source","title":"#colors"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient#colors=(colors)","text":"A list of the 3 or 4 base colors that are used to generate the freeform gradient in the RGB24 format View source","title":"#colors="},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient#type","text":"Type of the background fill, always \"freeform_gradient\" View source","title":"#type"},{"location":"api_reference/Tourmaline/BackgroundFillFreeformGradient/#Tourmaline::BackgroundFillFreeformGradient#type=(type)","text":"Type of the background fill, always \"freeform_gradient\" View source","title":"#type="},{"location":"api_reference/Tourmaline/BackgroundFillGradient/","text":"class Tourmaline::BackgroundFillGradient inherits Reference # The background is a gradient fill. Included modules JSON::Serializable Constructors # .new ( type , top_color , bottom_color , rotation_angle ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #bottom_color : Int32 | Int64 # Bottom color of the gradient in the RGB24 format View source #bottom_color= ( bottom_color : Int32 | Int64 ) # Bottom color of the gradient in the RGB24 format View source #rotation_angle : Int32 | Int64 # Clockwise rotation angle of the background fill in degrees; 0-359 View source #rotation_angle= ( rotation_angle : Int32 | Int64 ) # Clockwise rotation angle of the background fill in degrees; 0-359 View source #top_color : Int32 | Int64 # Top color of the gradient in the RGB24 format View source #top_color= ( top_color : Int32 | Int64 ) # Top color of the gradient in the RGB24 format View source #type : String # Type of the background fill, always \"gradient\" View source #type= ( type : String ) # Type of the background fill, always \"gradient\" View source","title":"BackgroundFillGradient"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient","text":"The background is a gradient fill.","title":"BackgroundFillGradient"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient.new(type,top_color,bottom_color,rotation_angle)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#bottom_color","text":"Bottom color of the gradient in the RGB24 format View source","title":"#bottom_color"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#bottom_color=(bottom_color)","text":"Bottom color of the gradient in the RGB24 format View source","title":"#bottom_color="},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#rotation_angle","text":"Clockwise rotation angle of the background fill in degrees; 0-359 View source","title":"#rotation_angle"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#rotation_angle=(rotation_angle)","text":"Clockwise rotation angle of the background fill in degrees; 0-359 View source","title":"#rotation_angle="},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#top_color","text":"Top color of the gradient in the RGB24 format View source","title":"#top_color"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#top_color=(top_color)","text":"Top color of the gradient in the RGB24 format View source","title":"#top_color="},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#type","text":"Type of the background fill, always \"gradient\" View source","title":"#type"},{"location":"api_reference/Tourmaline/BackgroundFillGradient/#Tourmaline::BackgroundFillGradient#type=(type)","text":"Type of the background fill, always \"gradient\" View source","title":"#type="},{"location":"api_reference/Tourmaline/BackgroundFillSolid/","text":"class Tourmaline::BackgroundFillSolid inherits Reference # The background is filled using the selected color. Included modules JSON::Serializable Constructors # .new ( type , color ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #color : Int32 | Int64 # The color of the background fill in the RGB24 format View source #color= ( color : Int32 | Int64 ) # The color of the background fill in the RGB24 format View source #type : String # Type of the background fill, always \"solid\" View source #type= ( type : String ) # Type of the background fill, always \"solid\" View source","title":"BackgroundFillSolid"},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid","text":"The background is filled using the selected color.","title":"BackgroundFillSolid"},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid.new(type,color)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid#color","text":"The color of the background fill in the RGB24 format View source","title":"#color"},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid#color=(color)","text":"The color of the background fill in the RGB24 format View source","title":"#color="},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid#type","text":"Type of the background fill, always \"solid\" View source","title":"#type"},{"location":"api_reference/Tourmaline/BackgroundFillSolid/#Tourmaline::BackgroundFillSolid#type=(type)","text":"Type of the background fill, always \"solid\" View source","title":"#type="},{"location":"api_reference/Tourmaline/BackgroundType/","text":"alias Tourmaline::BackgroundType # This object describes the type of a background. Currently, it can be one of - BackgroundTypeFill - BackgroundTypeWallpaper - BackgroundTypePattern - BackgroundTypeChatTheme Alias definition Tourmaline::BackgroundTypeChatTheme | Tourmaline::BackgroundTypeFill | Tourmaline::BackgroundTypePattern | Tourmaline::BackgroundTypeWallpaper","title":"BackgroundType"},{"location":"api_reference/Tourmaline/BackgroundType/#Tourmaline::BackgroundType","text":"This object describes the type of a background. Currently, it can be one of - BackgroundTypeFill - BackgroundTypeWallpaper - BackgroundTypePattern - BackgroundTypeChatTheme","title":"BackgroundType"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/","text":"class Tourmaline::BackgroundTypeChatTheme inherits Reference # The background is taken directly from a built-in chat theme. Included modules JSON::Serializable Constructors # .new ( type , theme_name ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #theme_name : String # Name of the chat theme, which is usually an emoji View source #theme_name= ( theme_name : String ) # Name of the chat theme, which is usually an emoji View source #type : String # Type of the background, always \"chat_theme\" View source #type= ( type : String ) # Type of the background, always \"chat_theme\" View source","title":"BackgroundTypeChatTheme"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme","text":"The background is taken directly from a built-in chat theme.","title":"BackgroundTypeChatTheme"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme.new(type,theme_name)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme#theme_name","text":"Name of the chat theme, which is usually an emoji View source","title":"#theme_name"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme#theme_name=(theme_name)","text":"Name of the chat theme, which is usually an emoji View source","title":"#theme_name="},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme#type","text":"Type of the background, always \"chat_theme\" View source","title":"#type"},{"location":"api_reference/Tourmaline/BackgroundTypeChatTheme/#Tourmaline::BackgroundTypeChatTheme#type=(type)","text":"Type of the background, always \"chat_theme\" View source","title":"#type="},{"location":"api_reference/Tourmaline/BackgroundTypeFill/","text":"class Tourmaline::BackgroundTypeFill inherits Reference # The background is automatically filled based on the selected colors. Included modules JSON::Serializable Constructors # .new ( type , fill , dark_theme_dimming ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #dark_theme_dimming : Int32 | Int64 # Dimming of the background in dark themes, as a percentage; 0-100 View source #dark_theme_dimming= ( dark_theme_dimming : Int32 | Int64 ) # Dimming of the background in dark themes, as a percentage; 0-100 View source #fill : Tourmaline::BackgroundFill # The background fill View source #fill= ( fill : Tourmaline::BackgroundFill ) # The background fill View source #type : String # Type of the background, always \"fill\" View source #type= ( type : String ) # Type of the background, always \"fill\" View source","title":"BackgroundTypeFill"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill","text":"The background is automatically filled based on the selected colors.","title":"BackgroundTypeFill"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill.new(type,fill,dark_theme_dimming)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill#dark_theme_dimming","text":"Dimming of the background in dark themes, as a percentage; 0-100 View source","title":"#dark_theme_dimming"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill#dark_theme_dimming=(dark_theme_dimming)","text":"Dimming of the background in dark themes, as a percentage; 0-100 View source","title":"#dark_theme_dimming="},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill#fill","text":"The background fill View source","title":"#fill"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill#fill=(fill)","text":"The background fill View source","title":"#fill="},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill#type","text":"Type of the background, always \"fill\" View source","title":"#type"},{"location":"api_reference/Tourmaline/BackgroundTypeFill/#Tourmaline::BackgroundTypeFill#type=(type)","text":"Type of the background, always \"fill\" View source","title":"#type="},{"location":"api_reference/Tourmaline/BackgroundTypePattern/","text":"class Tourmaline::BackgroundTypePattern inherits Reference # The background is a PNG or TGV (gzipped subset of SVG with MIME type \"application/x-tgwallpattern\") pattern to be combined with the background fill chosen by the user. Included modules JSON::Serializable Constructors # .new ( type , document , fill , intensity , is_inverted : Bool? = nil , is_moving : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #document : Tourmaline::Document # Document with the pattern View source #document= ( document : Tourmaline::Document ) # Document with the pattern View source #fill : Tourmaline::BackgroundFill # The background fill that is combined with the pattern View source #fill= ( fill : Tourmaline::BackgroundFill ) # The background fill that is combined with the pattern View source #intensity : Int32 | Int64 # Intensity of the pattern when it is shown above the filled background; 0-100 View source #intensity= ( intensity : Int32 | Int64 ) # Intensity of the pattern when it is shown above the filled background; 0-100 View source #is_inverted= ( is_inverted : Bool? ) # Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only View source #is_inverted? : Bool? # Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only View source #is_moving= ( is_moving : Bool? ) # Optional. True, if the background moves slightly when the device is tilted View source #is_moving? : Bool? # Optional. True, if the background moves slightly when the device is tilted View source #type : String # Type of the background, always \"pattern\" View source #type= ( type : String ) # Type of the background, always \"pattern\" View source","title":"BackgroundTypePattern"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern","text":"The background is a PNG or TGV (gzipped subset of SVG with MIME type \"application/x-tgwallpattern\") pattern to be combined with the background fill chosen by the user.","title":"BackgroundTypePattern"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern.new(type,document,fill,intensity,is_inverted,is_moving)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#document","text":"Document with the pattern View source","title":"#document"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#document=(document)","text":"Document with the pattern View source","title":"#document="},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#fill","text":"The background fill that is combined with the pattern View source","title":"#fill"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#fill=(fill)","text":"The background fill that is combined with the pattern View source","title":"#fill="},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#intensity","text":"Intensity of the pattern when it is shown above the filled background; 0-100 View source","title":"#intensity"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#intensity=(intensity)","text":"Intensity of the pattern when it is shown above the filled background; 0-100 View source","title":"#intensity="},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#is_inverted=(is_inverted)","text":"Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only View source","title":"#is_inverted="},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#is_inverted?","text":"Optional. True, if the background fill must be applied only to the pattern itself. All other pixels are black in this case. For dark themes only View source","title":"#is_inverted?"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#is_moving=(is_moving)","text":"Optional. True, if the background moves slightly when the device is tilted View source","title":"#is_moving="},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#is_moving?","text":"Optional. True, if the background moves slightly when the device is tilted View source","title":"#is_moving?"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#type","text":"Type of the background, always \"pattern\" View source","title":"#type"},{"location":"api_reference/Tourmaline/BackgroundTypePattern/#Tourmaline::BackgroundTypePattern#type=(type)","text":"Type of the background, always \"pattern\" View source","title":"#type="},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/","text":"class Tourmaline::BackgroundTypeWallpaper inherits Reference # The background is a wallpaper in the JPEG format. Included modules JSON::Serializable Constructors # .new ( type , document , dark_theme_dimming , is_blurred : Bool? = nil , is_moving : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #dark_theme_dimming : Int32 | Int64 # Dimming of the background in dark themes, as a percentage; 0-100 View source #dark_theme_dimming= ( dark_theme_dimming : Int32 | Int64 ) # Dimming of the background in dark themes, as a percentage; 0-100 View source #document : Tourmaline::Document # Document with the wallpaper View source #document= ( document : Tourmaline::Document ) # Document with the wallpaper View source #is_blurred= ( is_blurred : Bool? ) # Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12 View source #is_blurred? : Bool? # Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12 View source #is_moving= ( is_moving : Bool? ) # Optional. True, if the background moves slightly when the device is tilted View source #is_moving? : Bool? # Optional. True, if the background moves slightly when the device is tilted View source #type : String # Type of the background, always \"wallpaper\" View source #type= ( type : String ) # Type of the background, always \"wallpaper\" View source","title":"BackgroundTypeWallpaper"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper","text":"The background is a wallpaper in the JPEG format.","title":"BackgroundTypeWallpaper"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper.new(type,document,dark_theme_dimming,is_blurred,is_moving)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#dark_theme_dimming","text":"Dimming of the background in dark themes, as a percentage; 0-100 View source","title":"#dark_theme_dimming"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#dark_theme_dimming=(dark_theme_dimming)","text":"Dimming of the background in dark themes, as a percentage; 0-100 View source","title":"#dark_theme_dimming="},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#document","text":"Document with the wallpaper View source","title":"#document"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#document=(document)","text":"Document with the wallpaper View source","title":"#document="},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#is_blurred=(is_blurred)","text":"Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12 View source","title":"#is_blurred="},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#is_blurred?","text":"Optional. True, if the wallpaper is downscaled to fit in a 450x450 square and then box-blurred with radius 12 View source","title":"#is_blurred?"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#is_moving=(is_moving)","text":"Optional. True, if the background moves slightly when the device is tilted View source","title":"#is_moving="},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#is_moving?","text":"Optional. True, if the background moves slightly when the device is tilted View source","title":"#is_moving?"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#type","text":"Type of the background, always \"wallpaper\" View source","title":"#type"},{"location":"api_reference/Tourmaline/BackgroundTypeWallpaper/#Tourmaline::BackgroundTypeWallpaper#type=(type)","text":"Type of the background, always \"wallpaper\" View source","title":"#type="},{"location":"api_reference/Tourmaline/Birthdate/","text":"class Tourmaline::Birthdate inherits Reference # Describes the birthdate of a user. Included modules JSON::Serializable Constructors # .new ( day , month , year : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #day : Int32 | Int64 # Day of the user's birth; 1-31 View source #day= ( day : Int32 | Int64 ) # Day of the user's birth; 1-31 View source #month : Int32 | Int64 # Month of the user's birth; 1-12 View source #month= ( month : Int32 | Int64 ) # Month of the user's birth; 1-12 View source #year : Int32 | Int64 | Nil # Optional. Year of the user's birth View source #year= ( year : Int32 | Int64 | Nil ) # Optional. Year of the user's birth View source","title":"Birthdate"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate","text":"Describes the birthdate of a user.","title":"Birthdate"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate.new(day,month,year)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate#day","text":"Day of the user's birth; 1-31 View source","title":"#day"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate#day=(day)","text":"Day of the user's birth; 1-31 View source","title":"#day="},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate#month","text":"Month of the user's birth; 1-12 View source","title":"#month"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate#month=(month)","text":"Month of the user's birth; 1-12 View source","title":"#month="},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate#year","text":"Optional. Year of the user's birth View source","title":"#year"},{"location":"api_reference/Tourmaline/Birthdate/#Tourmaline::Birthdate#year=(year)","text":"Optional. Year of the user's birth View source","title":"#year="},{"location":"api_reference/Tourmaline/BotCommand/","text":"class Tourmaline::BotCommand inherits Reference # This object represents a bot command. Included modules JSON::Serializable Constructors # .new ( command , description ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #command : String # Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores. View source #command= ( command : String ) # Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores. View source #description : String # Description of the command; 1-256 characters. View source #description= ( description : String ) # Description of the command; 1-256 characters. View source","title":"BotCommand"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand","text":"This object represents a bot command.","title":"BotCommand"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand.new(command,description)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#command","text":"Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores. View source","title":"#command"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#command=(command)","text":"Text of the command; 1-32 characters. Can contain only lowercase English letters, digits and underscores. View source","title":"#command="},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#description","text":"Description of the command; 1-256 characters. View source","title":"#description"},{"location":"api_reference/Tourmaline/BotCommand/#Tourmaline::BotCommand#description=(description)","text":"Description of the command; 1-256 characters. View source","title":"#description="},{"location":"api_reference/Tourmaline/BotCommandScope/","text":"alias Tourmaline::BotCommandScope # This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported: - BotCommandScopeDefault - BotCommandScopeAllPrivateChats - BotCommandScopeAllGroupChats - BotCommandScopeAllChatAdministrators - BotCommandScopeChat - BotCommandScopeChatAdministrators - BotCommandScopeChatMember Alias definition Tourmaline::BotCommandScopeAllChatAdministrators | Tourmaline::BotCommandScopeAllGroupChats | Tourmaline::BotCommandScopeAllPrivateChats | Tourmaline::BotCommandScopeChat | Tourmaline::BotCommandScopeChatAdministrators | Tourmaline::BotCommandScopeChatMember | Tourmaline::BotCommandScopeDefault","title":"BotCommandScope"},{"location":"api_reference/Tourmaline/BotCommandScope/#Tourmaline::BotCommandScope","text":"This object represents the scope to which bot commands are applied. Currently, the following 7 scopes are supported: - BotCommandScopeDefault - BotCommandScopeAllPrivateChats - BotCommandScopeAllGroupChats - BotCommandScopeAllChatAdministrators - BotCommandScopeChat - BotCommandScopeChatAdministrators - BotCommandScopeChatMember","title":"BotCommandScope"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/","text":"class Tourmaline::BotCommandScopeAllChatAdministrators inherits Reference # Represents the scope of bot commands, covering all group and supergroup chat administrators. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : String # Scope type, must be all_chat_administrators View source #type= ( type : String ) # Scope type, must be all_chat_administrators View source","title":"BotCommandScopeAllChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators","text":"Represents the scope of bot commands, covering all group and supergroup chat administrators.","title":"BotCommandScopeAllChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators#type","text":"Scope type, must be all_chat_administrators View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeAllChatAdministrators/#Tourmaline::BotCommandScopeAllChatAdministrators#type=(type)","text":"Scope type, must be all_chat_administrators View source","title":"#type="},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/","text":"class Tourmaline::BotCommandScopeAllGroupChats inherits Reference # Represents the scope of bot commands, covering all group and supergroup chats. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : String # Scope type, must be all_group_chats View source #type= ( type : String ) # Scope type, must be all_group_chats View source","title":"BotCommandScopeAllGroupChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats","text":"Represents the scope of bot commands, covering all group and supergroup chats.","title":"BotCommandScopeAllGroupChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats#type","text":"Scope type, must be all_group_chats View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeAllGroupChats/#Tourmaline::BotCommandScopeAllGroupChats#type=(type)","text":"Scope type, must be all_group_chats View source","title":"#type="},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/","text":"class Tourmaline::BotCommandScopeAllPrivateChats inherits Reference # Represents the scope of bot commands, covering all private chats. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : String # Scope type, must be all_private_chats View source #type= ( type : String ) # Scope type, must be all_private_chats View source","title":"BotCommandScopeAllPrivateChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats","text":"Represents the scope of bot commands, covering all private chats.","title":"BotCommandScopeAllPrivateChats"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats#type","text":"Scope type, must be all_private_chats View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeAllPrivateChats/#Tourmaline::BotCommandScopeAllPrivateChats#type=(type)","text":"Scope type, must be all_private_chats View source","title":"#type="},{"location":"api_reference/Tourmaline/BotCommandScopeChat/","text":"class Tourmaline::BotCommandScopeChat inherits Reference # Represents the scope of bot commands, covering a specific chat. Included modules JSON::Serializable Constructors # .new ( type , chat_id ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_id : Int32 | Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source #chat_id= ( chat_id : Int32 | Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source #type : String # Scope type, must be chat View source #type= ( type : String ) # Scope type, must be chat View source","title":"BotCommandScopeChat"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat","text":"Represents the scope of bot commands, covering a specific chat.","title":"BotCommandScopeChat"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat.new(type,chat_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#type","text":"Scope type, must be chat View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChat/#Tourmaline::BotCommandScopeChat#type=(type)","text":"Scope type, must be chat View source","title":"#type="},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/","text":"class Tourmaline::BotCommandScopeChatAdministrators inherits Reference # Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat. Included modules JSON::Serializable Constructors # .new ( type , chat_id ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_id : Int32 | Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source #chat_id= ( chat_id : Int32 | Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source #type : String # Scope type, must be chat_administrators View source #type= ( type : String ) # Scope type, must be chat_administrators View source","title":"BotCommandScopeChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators","text":"Represents the scope of bot commands, covering all administrators of a specific group or supergroup chat.","title":"BotCommandScopeChatAdministrators"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators.new(type,chat_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#type","text":"Scope type, must be chat_administrators View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatAdministrators/#Tourmaline::BotCommandScopeChatAdministrators#type=(type)","text":"Scope type, must be chat_administrators View source","title":"#type="},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/","text":"class Tourmaline::BotCommandScopeChatMember inherits Reference # Represents the scope of bot commands, covering a specific member of a group or supergroup chat. Included modules JSON::Serializable Constructors # .new ( type , chat_id , user_id ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_id : Int32 | Int64 | String # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source #chat_id= ( chat_id : Int32 | Int64 | String ) # Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source #type : String # Scope type, must be chat_member View source #type= ( type : String ) # Scope type, must be chat_member View source #user_id : Int32 | Int64 # Unique identifier of the target user View source #user_id= ( user_id : Int32 | Int64 ) # Unique identifier of the target user View source","title":"BotCommandScopeChatMember"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember","text":"Represents the scope of bot commands, covering a specific member of a group or supergroup chat.","title":"BotCommandScopeChatMember"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember.new(type,chat_id,user_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#chat_id","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#chat_id=(chat_id)","text":"Unique identifier for the target chat or username of the target supergroup (in the format @supergroupusername) View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#type","text":"Scope type, must be chat_member View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#type=(type)","text":"Scope type, must be chat_member View source","title":"#type="},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#user_id","text":"Unique identifier of the target user View source","title":"#user_id"},{"location":"api_reference/Tourmaline/BotCommandScopeChatMember/#Tourmaline::BotCommandScopeChatMember#user_id=(user_id)","text":"Unique identifier of the target user View source","title":"#user_id="},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/","text":"class Tourmaline::BotCommandScopeDefault inherits Reference # Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : String # Scope type, must be default View source #type= ( type : String ) # Scope type, must be default View source","title":"BotCommandScopeDefault"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault","text":"Represents the default scope of bot commands. Default commands are used if no commands with a narrower scope are specified for the user.","title":"BotCommandScopeDefault"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault#type","text":"Scope type, must be default View source","title":"#type"},{"location":"api_reference/Tourmaline/BotCommandScopeDefault/#Tourmaline::BotCommandScopeDefault#type=(type)","text":"Scope type, must be default View source","title":"#type="},{"location":"api_reference/Tourmaline/BotDescription/","text":"class Tourmaline::BotDescription inherits Reference # This object represents the bot's description. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( description ) # View source Methods # #description : String # The bot's description View source #description= ( description : String ) # The bot's description View source","title":"BotDescription"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription","text":"This object represents the bot's description.","title":"BotDescription"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription#description","text":"The bot's description View source","title":"#description"},{"location":"api_reference/Tourmaline/BotDescription/#Tourmaline::BotDescription#description=(description)","text":"The bot's description View source","title":"#description="},{"location":"api_reference/Tourmaline/BotName/","text":"class Tourmaline::BotName inherits Reference # This object represents the bot's name. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( name ) # View source Methods # #name : String # The bot's name View source #name= ( name : String ) # The bot's name View source","title":"BotName"},{"location":"api_reference/Tourmaline/BotName/#Tourmaline::BotName","text":"This object represents the bot's name.","title":"BotName"},{"location":"api_reference/Tourmaline/BotName/#Tourmaline::BotName-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotName/#Tourmaline::BotName.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotName/#Tourmaline::BotName-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotName/#Tourmaline::BotName#name","text":"The bot's name View source","title":"#name"},{"location":"api_reference/Tourmaline/BotName/#Tourmaline::BotName#name=(name)","text":"The bot's name View source","title":"#name="},{"location":"api_reference/Tourmaline/BotShortDescription/","text":"class Tourmaline::BotShortDescription inherits Reference # This object represents the bot's short description. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( short_description ) # View source Methods # #short_description : String # The bot's short description View source #short_description= ( short_description : String ) # The bot's short description View source","title":"BotShortDescription"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription","text":"This object represents the bot's short description.","title":"BotShortDescription"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription#short_description","text":"The bot's short description View source","title":"#short_description"},{"location":"api_reference/Tourmaline/BotShortDescription/#Tourmaline::BotShortDescription#short_description=(short_description)","text":"The bot's short description View source","title":"#short_description="},{"location":"api_reference/Tourmaline/BusinessConnection/","text":"class Tourmaline::BusinessConnection inherits Reference # Describes the connection of the bot with a business account. Included modules JSON::Serializable Constructors # .new ( id , user , user_chat_id , date , can_reply , is_enabled ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #can_reply= ( can_reply : Bool ) # True, if the bot can act on behalf of the business account in chats that were active in the last 24 hours View source #can_reply? : Bool # True, if the bot can act on behalf of the business account in chats that were active in the last 24 hours View source #date : Time # View source #date= ( date : Time ) # View source #id : String # Unique identifier of the business connection View source #id= ( id : String ) # Unique identifier of the business connection View source #is_enabled= ( is_enabled : Bool ) # True, if the connection is active View source #is_enabled? : Bool # True, if the connection is active View source #user : Tourmaline::User # Business account user that created the business connection View source #user= ( user : Tourmaline::User ) # Business account user that created the business connection View source #user_chat_id : Int32 | Int64 # Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source #user_chat_id= ( user_chat_id : Int32 | Int64 ) # Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"BusinessConnection"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection","text":"Describes the connection of the bot with a business account.","title":"BusinessConnection"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection.new(id,user,user_chat_id,date,can_reply,is_enabled)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#can_reply=(can_reply)","text":"True, if the bot can act on behalf of the business account in chats that were active in the last 24 hours View source","title":"#can_reply="},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#can_reply?","text":"True, if the bot can act on behalf of the business account in chats that were active in the last 24 hours View source","title":"#can_reply?"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#id","text":"Unique identifier of the business connection View source","title":"#id"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#id=(id)","text":"Unique identifier of the business connection View source","title":"#id="},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#is_enabled=(is_enabled)","text":"True, if the connection is active View source","title":"#is_enabled="},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#is_enabled?","text":"True, if the connection is active View source","title":"#is_enabled?"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#user","text":"Business account user that created the business connection View source","title":"#user"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#user=(user)","text":"Business account user that created the business connection View source","title":"#user="},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#user_chat_id","text":"Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#user_chat_id"},{"location":"api_reference/Tourmaline/BusinessConnection/#Tourmaline::BusinessConnection#user_chat_id=(user_chat_id)","text":"Identifier of a private chat with the user who created the business connection. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#user_chat_id="},{"location":"api_reference/Tourmaline/BusinessIntro/","text":"class Tourmaline::BusinessIntro inherits Reference # Contains information about the start page settings of a Telegram Business account. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( title : String? = nil , message : String? = nil , sticker : Tourmaline::Sticker? = nil ) # View source Methods # #message : String? # Optional. Message text of the business intro View source #message= ( message : String? ) # Optional. Message text of the business intro View source #sticker : Tourmaline::Sticker? # Optional. Sticker of the business intro View source #sticker= ( sticker : Tourmaline::Sticker? ) # Optional. Sticker of the business intro View source #title : String? # Optional. Title text of the business intro View source #title= ( title : String? ) # Optional. Title text of the business intro View source","title":"BusinessIntro"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro","text":"Contains information about the start page settings of a Telegram Business account.","title":"BusinessIntro"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro#message","text":"Optional. Message text of the business intro View source","title":"#message"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro#message=(message)","text":"Optional. Message text of the business intro View source","title":"#message="},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro#sticker","text":"Optional. Sticker of the business intro View source","title":"#sticker"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro#sticker=(sticker)","text":"Optional. Sticker of the business intro View source","title":"#sticker="},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro#title","text":"Optional. Title text of the business intro View source","title":"#title"},{"location":"api_reference/Tourmaline/BusinessIntro/#Tourmaline::BusinessIntro#title=(title)","text":"Optional. Title text of the business intro View source","title":"#title="},{"location":"api_reference/Tourmaline/BusinessLocation/","text":"class Tourmaline::BusinessLocation inherits Reference # Contains information about the location of a Telegram Business account. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( address , location : Tourmaline::Location? = nil ) # View source Methods # #address : String # Address of the business View source #address= ( address : String ) # Address of the business View source #location : Tourmaline::Location? # Optional. Location of the business View source #location= ( location : Tourmaline::Location? ) # Optional. Location of the business View source","title":"BusinessLocation"},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation","text":"Contains information about the location of a Telegram Business account.","title":"BusinessLocation"},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation#address","text":"Address of the business View source","title":"#address"},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation#address=(address)","text":"Address of the business View source","title":"#address="},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation#location","text":"Optional. Location of the business View source","title":"#location"},{"location":"api_reference/Tourmaline/BusinessLocation/#Tourmaline::BusinessLocation#location=(location)","text":"Optional. Location of the business View source","title":"#location="},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/","text":"class Tourmaline::BusinessMessagesDeleted inherits Reference # This object is received when messages are deleted from a connected business account. Included modules JSON::Serializable Constructors # .new ( business_connection_id , chat , message_ids : Array ( Int32 | Int64 ) = [] of Int32 | Int64 ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #business_connection_id : String # Unique identifier of the business connection View source #business_connection_id= ( business_connection_id : String ) # Unique identifier of the business connection View source #chat : Tourmaline::Chat # Information about a chat in the business account. The bot may not have access to the chat or the corresponding user. View source #chat= ( chat : Tourmaline::Chat ) # Information about a chat in the business account. The bot may not have access to the chat or the corresponding user. View source #message_ids : Array ( Int32 | Int64 ) # The list of identifiers of deleted messages in the chat of the business account View source #message_ids= ( message_ids : Array ( Int32 | Int64 )) # The list of identifiers of deleted messages in the chat of the business account View source","title":"BusinessMessagesDeleted"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted","text":"This object is received when messages are deleted from a connected business account.","title":"BusinessMessagesDeleted"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted.new(business_connection_id,chat,message_ids)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted#business_connection_id","text":"Unique identifier of the business connection View source","title":"#business_connection_id"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted#business_connection_id=(business_connection_id)","text":"Unique identifier of the business connection View source","title":"#business_connection_id="},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted#chat","text":"Information about a chat in the business account. The bot may not have access to the chat or the corresponding user. View source","title":"#chat"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted#chat=(chat)","text":"Information about a chat in the business account. The bot may not have access to the chat or the corresponding user. View source","title":"#chat="},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted#message_ids","text":"The list of identifiers of deleted messages in the chat of the business account View source","title":"#message_ids"},{"location":"api_reference/Tourmaline/BusinessMessagesDeleted/#Tourmaline::BusinessMessagesDeleted#message_ids=(message_ids)","text":"The list of identifiers of deleted messages in the chat of the business account View source","title":"#message_ids="},{"location":"api_reference/Tourmaline/BusinessOpeningHours/","text":"class Tourmaline::BusinessOpeningHours inherits Reference # Describes the opening hours of a business. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( time_zone_name , opening_hours : Array ( Tourmaline::BusinessOpeningHoursInterval ) = [] of Tourmaline :: BusinessOpeningHoursInterval ) # View source Methods # #opening_hours : Array ( Tourmaline::BusinessOpeningHoursInterval ) # List of time intervals describing business opening hours View source #opening_hours= ( opening_hours : Array ( Tourmaline::BusinessOpeningHoursInterval )) # List of time intervals describing business opening hours View source #time_zone_name : String # Unique name of the time zone for which the opening hours are defined View source #time_zone_name= ( time_zone_name : String ) # Unique name of the time zone for which the opening hours are defined View source","title":"BusinessOpeningHours"},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours","text":"Describes the opening hours of a business.","title":"BusinessOpeningHours"},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours#opening_hours","text":"List of time intervals describing business opening hours View source","title":"#opening_hours"},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours#opening_hours=(opening_hours)","text":"List of time intervals describing business opening hours View source","title":"#opening_hours="},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours#time_zone_name","text":"Unique name of the time zone for which the opening hours are defined View source","title":"#time_zone_name"},{"location":"api_reference/Tourmaline/BusinessOpeningHours/#Tourmaline::BusinessOpeningHours#time_zone_name=(time_zone_name)","text":"Unique name of the time zone for which the opening hours are defined View source","title":"#time_zone_name="},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/","text":"class Tourmaline::BusinessOpeningHoursInterval inherits Reference # Describes an interval of time during which a business is open. Included modules JSON::Serializable Constructors # .new ( opening_minute , closing_minute ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #closing_minute : Int32 | Int64 # The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60 View source #closing_minute= ( closing_minute : Int32 | Int64 ) # The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60 View source #opening_minute : Int32 | Int64 # The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60 View source #opening_minute= ( opening_minute : Int32 | Int64 ) # The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60 View source","title":"BusinessOpeningHoursInterval"},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval","text":"Describes an interval of time during which a business is open.","title":"BusinessOpeningHoursInterval"},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval.new(opening_minute,closing_minute)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval#closing_minute","text":"The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60 View source","title":"#closing_minute"},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval#closing_minute=(closing_minute)","text":"The minute's sequence number in a week, starting on Monday, marking the end of the time interval during which the business is open; 0 - 8 * 24 * 60 View source","title":"#closing_minute="},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval#opening_minute","text":"The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60 View source","title":"#opening_minute"},{"location":"api_reference/Tourmaline/BusinessOpeningHoursInterval/#Tourmaline::BusinessOpeningHoursInterval#opening_minute=(opening_minute)","text":"The minute's sequence number in a week, starting on Monday, marking the start of the time interval during which the business is open; 0 - 7 * 24 * 60 View source","title":"#opening_minute="},{"location":"api_reference/Tourmaline/CallbackGame/","text":"class Tourmaline::CallbackGame inherits Reference # A placeholder, currently holds no information. Use BotFather to set up your game. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"CallbackGame"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame","text":"A placeholder, currently holds no information. Use BotFather to set up your game.","title":"CallbackGame"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackGame/#Tourmaline::CallbackGame.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQuery/","text":"class Tourmaline::CallbackQuery inherits Reference # This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present. Included modules JSON::Serializable Constructors # .new ( id , from , chat_instance , message : Tourmaline::MaybeInaccessibleMessage? = nil , inline_message_id : String? = nil , data : String? = nil , game_short_name : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_instance : String # Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. View source #chat_instance= ( chat_instance : String ) # Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. View source #data : String? # Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data. View source #data= ( data : String? ) # Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data. View source #from : Tourmaline::User # Sender View source #from= ( from : Tourmaline::User ) # Sender View source #game_short_name : String? # Optional. Short name of a Game to be returned, serves as the unique identifier for the game View source #game_short_name= ( game_short_name : String? ) # Optional. Short name of a Game to be returned, serves as the unique identifier for the game View source #id : String # Unique identifier for this query View source #id= ( id : String ) # Unique identifier for this query View source #inline_message_id : String? # Optional. Identifier of the message sent via the bot in inline mode, that originated the query. View source #inline_message_id= ( inline_message_id : String? ) # Optional. Identifier of the message sent via the bot in inline mode, that originated the query. View source #message : Tourmaline::MaybeInaccessibleMessage? # Optional. Message sent by the bot with the callback button that originated the query View source #message= ( message : Tourmaline::MaybeInaccessibleMessage? ) # Optional. Message sent by the bot with the callback button that originated the query View source","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery","text":"This object represents an incoming callback query from a callback button in an inline keyboard. If the button that originated the query was attached to a message sent by the bot, the field message will be present. If the button was attached to a message sent via the bot (in inline mode), the field inline_message_id will be present. Exactly one of the fields data or game_short_name will be present.","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery.new(id,from,chat_instance,message,inline_message_id,data,game_short_name)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#chat_instance","text":"Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. View source","title":"#chat_instance"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#chat_instance=(chat_instance)","text":"Global identifier, uniquely corresponding to the chat to which the message with the callback button was sent. Useful for high scores in games. View source","title":"#chat_instance="},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#data","text":"Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data. View source","title":"#data"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#data=(data)","text":"Optional. Data associated with the callback button. Be aware that the message originated the query can contain no callback buttons with this data. View source","title":"#data="},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#from","text":"Sender View source","title":"#from"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#from=(from)","text":"Sender View source","title":"#from="},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#game_short_name","text":"Optional. Short name of a Game to be returned, serves as the unique identifier for the game View source","title":"#game_short_name"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#game_short_name=(game_short_name)","text":"Optional. Short name of a Game to be returned, serves as the unique identifier for the game View source","title":"#game_short_name="},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#id","text":"Unique identifier for this query View source","title":"#id"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#id=(id)","text":"Unique identifier for this query View source","title":"#id="},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#inline_message_id","text":"Optional. Identifier of the message sent via the bot in inline mode, that originated the query. View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#inline_message_id=(inline_message_id)","text":"Optional. Identifier of the message sent via the bot in inline mode, that originated the query. View source","title":"#inline_message_id="},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#message","text":"Optional. Message sent by the bot with the callback button that originated the query View source","title":"#message"},{"location":"api_reference/Tourmaline/CallbackQuery/#Tourmaline::CallbackQuery#message=(message)","text":"Optional. Message sent by the bot with the callback button that originated the query View source","title":"#message="},{"location":"api_reference/Tourmaline/CallbackQueryHandler/","text":"class Tourmaline::CallbackQueryHandler inherits Tourmaline::EventHandler # Constructors # .new ( pattern : String | Regex , proc : EventHandlerProc ) # View source .new ( pattern : String | Regex , & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #pattern : Regex # View source","title":"CallbackQueryHandler"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler","text":"","title":"CallbackQueryHandler"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler.new(pattern,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/CallbackQueryHandler/#Tourmaline::CallbackQueryHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Chat/","text":"class Tourmaline::Chat inherits Reference # This object represents a chat. Included modules JSON::Serializable Constructors # .new ( id , type , title : String? = nil , username : String? = nil , first_name : String? = nil , last_name : String? = nil , is_forum : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #channel? # View source #first_name : String? # Optional. First name of the other party in a private chat View source #first_name= ( first_name : String? ) # Optional. First name of the other party in a private chat View source #group? # View source #id : Int32 | Int64 # Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #id= ( id : Int32 | Int64 ) # Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #is_forum= ( is_forum : Bool? ) # Optional. True, if the supergroup chat is a forum (has topics enabled) View source #is_forum? : Bool? # Optional. True, if the supergroup chat is a forum (has topics enabled) View source #last_name : String? # Optional. Last name of the other party in a private chat View source #last_name= ( last_name : String? ) # Optional. Last name of the other party in a private chat View source #name # View source #private? # View source #supergroup? # View source #title : String? # Optional. Title, for supergroups, channels and group chats View source #title= ( title : String? ) # Optional. Title, for supergroups, channels and group chats View source #type : String # Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source #type= ( type : String ) # Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source #username : String? # Optional. Username, for private chats, supergroups and channels if available View source #username= ( username : String? ) # Optional. Username, for private chats, supergroups and channels if available View source","title":"Chat"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat","text":"This object represents a chat.","title":"Chat"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat.new(id,type,title,username,first_name,last_name,is_forum)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#first_name","text":"Optional. First name of the other party in a private chat View source","title":"#first_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#first_name=(first_name)","text":"Optional. First name of the other party in a private chat View source","title":"#first_name="},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#group?","text":"View source","title":"#group?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#id","text":"Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#id"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#id=(id)","text":"Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#id="},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#is_forum=(is_forum)","text":"Optional. True, if the supergroup chat is a forum (has topics enabled) View source","title":"#is_forum="},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#is_forum?","text":"Optional. True, if the supergroup chat is a forum (has topics enabled) View source","title":"#is_forum?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#last_name","text":"Optional. Last name of the other party in a private chat View source","title":"#last_name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#last_name=(last_name)","text":"Optional. Last name of the other party in a private chat View source","title":"#last_name="},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#name","text":"View source","title":"#name"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#private?","text":"View source","title":"#private?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#supergroup?","text":"View source","title":"#supergroup?"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#title","text":"Optional. Title, for supergroups, channels and group chats View source","title":"#title"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#title=(title)","text":"Optional. Title, for supergroups, channels and group chats View source","title":"#title="},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#type","text":"Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source","title":"#type"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#type=(type)","text":"Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source","title":"#type="},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#username","text":"Optional. Username, for private chats, supergroups and channels if available View source","title":"#username"},{"location":"api_reference/Tourmaline/Chat/#Tourmaline::Chat#username=(username)","text":"Optional. Username, for private chats, supergroups and channels if available View source","title":"#username="},{"location":"api_reference/Tourmaline/Chat/Type/","text":"enum Tourmaline::Chat::Type # Members # Private = 0 # Group = 1 # Supergroup = 2 # Channel = 3 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #channel? # View source #group? # View source #private? # View source #supergroup? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"Type"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type","text":"","title":"Type"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Private","text":"","title":"Private"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Group","text":"","title":"Group"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Supergroup","text":"","title":"Supergroup"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type::Channel","text":"","title":"Channel"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#group?","text":"View source","title":"#group?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#private?","text":"View source","title":"#private?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#supergroup?","text":"View source","title":"#supergroup?"},{"location":"api_reference/Tourmaline/Chat/Type/#Tourmaline::Chat::Type#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/ChatAction/","text":"enum Tourmaline::ChatAction # Chat actions are what appear at the top of the screen when users are typing, sending files, etc. You can mimic these actions by using the Client#send_chat_action method. Members # Typing = 0 # UploadPhoto = 1 # RecordVideo = 2 # UploadVideo = 3 # RecordAudio = 4 # RecordVoice = 5 # UploadAudio = 6 # UploadVoice = 7 # UploadDocument = 8 # Findlocation = 9 # RecordVideoNote = 10 # UploadVideoNote = 11 # Methods # #findlocation? # View source #record_audio? # View source #record_video? # View source #record_video_note? # View source #record_voice? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source #typing? # View source #upload_audio? # View source #upload_document? # View source #upload_photo? # View source #upload_video? # View source #upload_video_note? # View source #upload_voice? # View source","title":"ChatAction"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction","text":"Chat actions are what appear at the top of the screen when users are typing, sending files, etc. You can mimic these actions by using the Client#send_chat_action method.","title":"ChatAction"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::Typing","text":"","title":"Typing"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadPhoto","text":"","title":"UploadPhoto"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVideo","text":"","title":"RecordVideo"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVideo","text":"","title":"UploadVideo"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordAudio","text":"","title":"RecordAudio"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVoice","text":"","title":"RecordVoice"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadAudio","text":"","title":"UploadAudio"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVoice","text":"","title":"UploadVoice"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadDocument","text":"","title":"UploadDocument"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::Findlocation","text":"","title":"Findlocation"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::RecordVideoNote","text":"","title":"RecordVideoNote"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction::UploadVideoNote","text":"","title":"UploadVideoNote"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#findlocation?","text":"View source","title":"#findlocation?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_audio?","text":"View source","title":"#record_audio?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_video?","text":"View source","title":"#record_video?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_video_note?","text":"View source","title":"#record_video_note?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#record_voice?","text":"View source","title":"#record_voice?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#typing?","text":"View source","title":"#typing?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_audio?","text":"View source","title":"#upload_audio?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_document?","text":"View source","title":"#upload_document?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_photo?","text":"View source","title":"#upload_photo?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_video?","text":"View source","title":"#upload_video?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_video_note?","text":"View source","title":"#upload_video_note?"},{"location":"api_reference/Tourmaline/ChatAction/#Tourmaline::ChatAction#upload_voice?","text":"View source","title":"#upload_voice?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/","text":"class Tourmaline::ChatAdministratorRights inherits Reference # Represents the rights of an administrator in a chat. Included modules JSON::Serializable Constructors # .new ( is_anonymous , can_manage_chat , can_delete_messages , can_manage_video_chats , can_restrict_members , can_promote_members , can_change_info , can_invite_users , can_post_stories , can_edit_stories , can_delete_stories , can_post_messages : Bool? = nil , can_edit_messages : Bool? = nil , can_pin_messages : Bool? = nil , can_manage_topics : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #can_change_info= ( can_change_info : Bool ) # True, if the user is allowed to change the chat title, photo and other settings View source #can_change_info? : Bool # True, if the user is allowed to change the chat title, photo and other settings View source #can_delete_messages= ( can_delete_messages : Bool ) # True, if the administrator can delete messages of other users View source #can_delete_messages? : Bool # True, if the administrator can delete messages of other users View source #can_delete_stories= ( can_delete_stories : Bool ) # True, if the administrator can delete stories posted by other users View source #can_delete_stories? : Bool # True, if the administrator can delete stories posted by other users View source #can_edit_messages= ( can_edit_messages : Bool? ) # Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source #can_edit_messages? : Bool? # Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source #can_edit_stories= ( can_edit_stories : Bool ) # True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source #can_edit_stories? : Bool # True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source #can_invite_users= ( can_invite_users : Bool ) # True, if the user is allowed to invite new users to the chat View source #can_invite_users? : Bool # True, if the user is allowed to invite new users to the chat View source #can_manage_chat= ( can_manage_chat : Bool ) # True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source #can_manage_chat? : Bool # True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source #can_manage_topics= ( can_manage_topics : Bool? ) # Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source #can_manage_topics? : Bool? # Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source #can_manage_video_chats= ( can_manage_video_chats : Bool ) # True, if the administrator can manage video chats View source #can_manage_video_chats? : Bool # True, if the administrator can manage video chats View source #can_pin_messages= ( can_pin_messages : Bool? ) # Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source #can_pin_messages? : Bool? # Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source #can_post_messages= ( can_post_messages : Bool? ) # Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source #can_post_messages? : Bool? # Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source #can_post_stories= ( can_post_stories : Bool ) # True, if the administrator can post stories to the chat View source #can_post_stories? : Bool # True, if the administrator can post stories to the chat View source #can_promote_members= ( can_promote_members : Bool ) # True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source #can_promote_members? : Bool # True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source #can_restrict_members= ( can_restrict_members : Bool ) # True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source #can_restrict_members? : Bool # True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source #is_anonymous= ( is_anonymous : Bool ) # True, if the user's presence in the chat is hidden View source #is_anonymous? : Bool # True, if the user's presence in the chat is hidden View source","title":"ChatAdministratorRights"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights","text":"Represents the rights of an administrator in a chat.","title":"ChatAdministratorRights"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights.new(is_anonymous,can_manage_chat,can_delete_messages,can_manage_video_chats,can_restrict_members,can_promote_members,can_change_info,can_invite_users,can_post_stories,can_edit_stories,can_delete_stories,can_post_messages,can_edit_messages,can_pin_messages,can_manage_topics)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_change_info=(can_change_info)","text":"True, if the user is allowed to change the chat title, photo and other settings View source","title":"#can_change_info="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_change_info?","text":"True, if the user is allowed to change the chat title, photo and other settings View source","title":"#can_change_info?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_delete_messages=(can_delete_messages)","text":"True, if the administrator can delete messages of other users View source","title":"#can_delete_messages="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_delete_messages?","text":"True, if the administrator can delete messages of other users View source","title":"#can_delete_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_delete_stories=(can_delete_stories)","text":"True, if the administrator can delete stories posted by other users View source","title":"#can_delete_stories="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_delete_stories?","text":"True, if the administrator can delete stories posted by other users View source","title":"#can_delete_stories?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_edit_messages=(can_edit_messages)","text":"Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source","title":"#can_edit_messages="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_edit_messages?","text":"Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source","title":"#can_edit_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_edit_stories=(can_edit_stories)","text":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source","title":"#can_edit_stories="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_edit_stories?","text":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source","title":"#can_edit_stories?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_invite_users=(can_invite_users)","text":"True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_invite_users?","text":"True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_chat=(can_manage_chat)","text":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source","title":"#can_manage_chat="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_chat?","text":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source","title":"#can_manage_chat?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_topics=(can_manage_topics)","text":"Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source","title":"#can_manage_topics="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_topics?","text":"Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source","title":"#can_manage_topics?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_video_chats=(can_manage_video_chats)","text":"True, if the administrator can manage video chats View source","title":"#can_manage_video_chats="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_manage_video_chats?","text":"True, if the administrator can manage video chats View source","title":"#can_manage_video_chats?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_pin_messages=(can_pin_messages)","text":"Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source","title":"#can_pin_messages="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_pin_messages?","text":"Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source","title":"#can_pin_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_post_messages=(can_post_messages)","text":"Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source","title":"#can_post_messages="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_post_messages?","text":"Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source","title":"#can_post_messages?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_post_stories=(can_post_stories)","text":"True, if the administrator can post stories to the chat View source","title":"#can_post_stories="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_post_stories?","text":"True, if the administrator can post stories to the chat View source","title":"#can_post_stories?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_promote_members=(can_promote_members)","text":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source","title":"#can_promote_members="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_promote_members?","text":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source","title":"#can_promote_members?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_restrict_members=(can_restrict_members)","text":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source","title":"#can_restrict_members="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#can_restrict_members?","text":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source","title":"#can_restrict_members?"},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#is_anonymous=(is_anonymous)","text":"True, if the user's presence in the chat is hidden View source","title":"#is_anonymous="},{"location":"api_reference/Tourmaline/ChatAdministratorRights/#Tourmaline::ChatAdministratorRights#is_anonymous?","text":"True, if the user's presence in the chat is hidden View source","title":"#is_anonymous?"},{"location":"api_reference/Tourmaline/ChatBackground/","text":"class Tourmaline::ChatBackground inherits Reference # This object represents a chat background. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : Tourmaline::BackgroundType # Type of the background View source #type= ( type : Tourmaline::BackgroundType ) # Type of the background View source","title":"ChatBackground"},{"location":"api_reference/Tourmaline/ChatBackground/#Tourmaline::ChatBackground","text":"This object represents a chat background.","title":"ChatBackground"},{"location":"api_reference/Tourmaline/ChatBackground/#Tourmaline::ChatBackground-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBackground/#Tourmaline::ChatBackground.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBackground/#Tourmaline::ChatBackground-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBackground/#Tourmaline::ChatBackground#type","text":"Type of the background View source","title":"#type"},{"location":"api_reference/Tourmaline/ChatBackground/#Tourmaline::ChatBackground#type=(type)","text":"Type of the background View source","title":"#type="},{"location":"api_reference/Tourmaline/ChatBoost/","text":"class Tourmaline::ChatBoost inherits Reference # This object contains information about a chat boost. Included modules JSON::Serializable Constructors # .new ( boost_id , add_date , expiration_date , source ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #add_date : Time # View source #add_date= ( add_date : Time ) # View source #boost_id : String # Unique identifier of the boost View source #boost_id= ( boost_id : String ) # Unique identifier of the boost View source #expiration_date : Time # View source #expiration_date= ( expiration_date : Time ) # View source #source : Tourmaline::ChatBoostSource # Source of the added boost View source #source= ( source : Tourmaline::ChatBoostSource ) # Source of the added boost View source","title":"ChatBoost"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost","text":"This object contains information about a chat boost.","title":"ChatBoost"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost.new(boost_id,add_date,expiration_date,source)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#add_date","text":"View source","title":"#add_date"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#add_date=(add_date)","text":"View source","title":"#add_date="},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#boost_id","text":"Unique identifier of the boost View source","title":"#boost_id"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#boost_id=(boost_id)","text":"Unique identifier of the boost View source","title":"#boost_id="},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#expiration_date","text":"View source","title":"#expiration_date"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#expiration_date=(expiration_date)","text":"View source","title":"#expiration_date="},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#source","text":"Source of the added boost View source","title":"#source"},{"location":"api_reference/Tourmaline/ChatBoost/#Tourmaline::ChatBoost#source=(source)","text":"Source of the added boost View source","title":"#source="},{"location":"api_reference/Tourmaline/ChatBoostAdded/","text":"class Tourmaline::ChatBoostAdded inherits Reference # This object represents a service message about a user boosting a chat. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( boost_count ) # View source Methods # #boost_count : Int32 | Int64 # Number of boosts added by the user View source #boost_count= ( boost_count : Int32 | Int64 ) # Number of boosts added by the user View source","title":"ChatBoostAdded"},{"location":"api_reference/Tourmaline/ChatBoostAdded/#Tourmaline::ChatBoostAdded","text":"This object represents a service message about a user boosting a chat.","title":"ChatBoostAdded"},{"location":"api_reference/Tourmaline/ChatBoostAdded/#Tourmaline::ChatBoostAdded-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBoostAdded/#Tourmaline::ChatBoostAdded.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBoostAdded/#Tourmaline::ChatBoostAdded-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBoostAdded/#Tourmaline::ChatBoostAdded#boost_count","text":"Number of boosts added by the user View source","title":"#boost_count"},{"location":"api_reference/Tourmaline/ChatBoostAdded/#Tourmaline::ChatBoostAdded#boost_count=(boost_count)","text":"Number of boosts added by the user View source","title":"#boost_count="},{"location":"api_reference/Tourmaline/ChatBoostRemoved/","text":"class Tourmaline::ChatBoostRemoved inherits Reference # This object represents a boost removed from a chat. Included modules JSON::Serializable Constructors # .new ( chat , boost_id , remove_date , source ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #boost_id : String # Unique identifier of the boost View source #boost_id= ( boost_id : String ) # Unique identifier of the boost View source #chat : Tourmaline::Chat # Chat which was boosted View source #chat= ( chat : Tourmaline::Chat ) # Chat which was boosted View source #remove_date : Time # View source #remove_date= ( remove_date : Time ) # View source #source : Tourmaline::ChatBoostSource # Source of the removed boost View source #source= ( source : Tourmaline::ChatBoostSource ) # Source of the removed boost View source","title":"ChatBoostRemoved"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved","text":"This object represents a boost removed from a chat.","title":"ChatBoostRemoved"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved.new(chat,boost_id,remove_date,source)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#boost_id","text":"Unique identifier of the boost View source","title":"#boost_id"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#boost_id=(boost_id)","text":"Unique identifier of the boost View source","title":"#boost_id="},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#chat","text":"Chat which was boosted View source","title":"#chat"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#chat=(chat)","text":"Chat which was boosted View source","title":"#chat="},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#remove_date","text":"View source","title":"#remove_date"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#remove_date=(remove_date)","text":"View source","title":"#remove_date="},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#source","text":"Source of the removed boost View source","title":"#source"},{"location":"api_reference/Tourmaline/ChatBoostRemoved/#Tourmaline::ChatBoostRemoved#source=(source)","text":"Source of the removed boost View source","title":"#source="},{"location":"api_reference/Tourmaline/ChatBoostSource/","text":"alias Tourmaline::ChatBoostSource # This object describes the source of a chat boost. It can be one of - ChatBoostSourcePremium - ChatBoostSourceGiftCode - ChatBoostSourceGiveaway Alias definition Tourmaline::ChatBoostSourceGiftCode | Tourmaline::ChatBoostSourceGiveaway | Tourmaline::ChatBoostSourcePremium","title":"ChatBoostSource"},{"location":"api_reference/Tourmaline/ChatBoostSource/#Tourmaline::ChatBoostSource","text":"This object describes the source of a chat boost. It can be one of - ChatBoostSourcePremium - ChatBoostSourceGiftCode - ChatBoostSourceGiveaway","title":"ChatBoostSource"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/","text":"class Tourmaline::ChatBoostSourceGiftCode inherits Reference # The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription. Included modules JSON::Serializable Constructors # .new ( source , user ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #source : String # Source of the boost, always \"gift_code\" View source #source= ( source : String ) # Source of the boost, always \"gift_code\" View source #user : Tourmaline::User # User for which the gift code was created View source #user= ( user : Tourmaline::User ) # User for which the gift code was created View source","title":"ChatBoostSourceGiftCode"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode","text":"The boost was obtained by the creation of Telegram Premium gift codes to boost a chat. Each such code boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.","title":"ChatBoostSourceGiftCode"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode.new(source,user)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode#source","text":"Source of the boost, always \"gift_code\" View source","title":"#source"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode#source=(source)","text":"Source of the boost, always \"gift_code\" View source","title":"#source="},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode#user","text":"User for which the gift code was created View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiftCode/#Tourmaline::ChatBoostSourceGiftCode#user=(user)","text":"User for which the gift code was created View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/","text":"class Tourmaline::ChatBoostSourceGiveaway inherits Reference # The boost was obtained by the creation of a Telegram Premium giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription. Included modules JSON::Serializable Constructors # .new ( source , giveaway_message_id , user : Tourmaline::User? = nil , is_unclaimed : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #giveaway_message_id : Int32 | Int64 # Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet. View source #giveaway_message_id= ( giveaway_message_id : Int32 | Int64 ) # Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet. View source #is_unclaimed= ( is_unclaimed : Bool? ) # Optional. True, if the giveaway was completed, but there was no user to win the prize View source #is_unclaimed? : Bool? # Optional. True, if the giveaway was completed, but there was no user to win the prize View source #source : String # Source of the boost, always \"giveaway\" View source #source= ( source : String ) # Source of the boost, always \"giveaway\" View source #user : Tourmaline::User? # Optional. User that won the prize in the giveaway if any View source #user= ( user : Tourmaline::User? ) # Optional. User that won the prize in the giveaway if any View source","title":"ChatBoostSourceGiveaway"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway","text":"The boost was obtained by the creation of a Telegram Premium giveaway. This boosts the chat 4 times for the duration of the corresponding Telegram Premium subscription.","title":"ChatBoostSourceGiveaway"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway.new(source,giveaway_message_id,user,is_unclaimed)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#giveaway_message_id","text":"Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet. View source","title":"#giveaway_message_id"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#giveaway_message_id=(giveaway_message_id)","text":"Identifier of a message in the chat with the giveaway; the message could have been deleted already. May be 0 if the message isn't sent yet. View source","title":"#giveaway_message_id="},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#is_unclaimed=(is_unclaimed)","text":"Optional. True, if the giveaway was completed, but there was no user to win the prize View source","title":"#is_unclaimed="},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#is_unclaimed?","text":"Optional. True, if the giveaway was completed, but there was no user to win the prize View source","title":"#is_unclaimed?"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#source","text":"Source of the boost, always \"giveaway\" View source","title":"#source"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#source=(source)","text":"Source of the boost, always \"giveaway\" View source","title":"#source="},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#user","text":"Optional. User that won the prize in the giveaway if any View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatBoostSourceGiveaway/#Tourmaline::ChatBoostSourceGiveaway#user=(user)","text":"Optional. User that won the prize in the giveaway if any View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/","text":"class Tourmaline::ChatBoostSourcePremium inherits Reference # The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user. Included modules JSON::Serializable Constructors # .new ( source , user ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #source : String # Source of the boost, always \"premium\" View source #source= ( source : String ) # Source of the boost, always \"premium\" View source #user : Tourmaline::User # User that boosted the chat View source #user= ( user : Tourmaline::User ) # User that boosted the chat View source","title":"ChatBoostSourcePremium"},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium","text":"The boost was obtained by subscribing to Telegram Premium or by gifting a Telegram Premium subscription to another user.","title":"ChatBoostSourcePremium"},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium.new(source,user)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium#source","text":"Source of the boost, always \"premium\" View source","title":"#source"},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium#source=(source)","text":"Source of the boost, always \"premium\" View source","title":"#source="},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium#user","text":"User that boosted the chat View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatBoostSourcePremium/#Tourmaline::ChatBoostSourcePremium#user=(user)","text":"User that boosted the chat View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatBoostUpdated/","text":"class Tourmaline::ChatBoostUpdated inherits Reference # This object represents a boost added to a chat or changed. Included modules JSON::Serializable Constructors # .new ( chat , boost ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #boost : Tourmaline::ChatBoost # Information about the chat boost View source #boost= ( boost : Tourmaline::ChatBoost ) # Information about the chat boost View source #chat : Tourmaline::Chat # Chat which was boosted View source #chat= ( chat : Tourmaline::Chat ) # Chat which was boosted View source","title":"ChatBoostUpdated"},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated","text":"This object represents a boost added to a chat or changed.","title":"ChatBoostUpdated"},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated.new(chat,boost)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated#boost","text":"Information about the chat boost View source","title":"#boost"},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated#boost=(boost)","text":"Information about the chat boost View source","title":"#boost="},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated#chat","text":"Chat which was boosted View source","title":"#chat"},{"location":"api_reference/Tourmaline/ChatBoostUpdated/#Tourmaline::ChatBoostUpdated#chat=(chat)","text":"Chat which was boosted View source","title":"#chat="},{"location":"api_reference/Tourmaline/ChatFullInfo/","text":"class Tourmaline::ChatFullInfo inherits Reference # This object contains full information about a chat. Included modules JSON::Serializable Constructors # .new ( id , type , accent_color_id , max_reaction_count , title : String? = nil , username : String? = nil , first_name : String? = nil , last_name : String? = nil , is_forum : Bool? = nil , photo : Tourmaline::ChatPhoto? = nil , active_usernames : Array ( String ) = [] of String , birthdate : Tourmaline::Birthdate? = nil , business_intro : Tourmaline::BusinessIntro? = nil , business_location : Tourmaline::BusinessLocation? = nil , business_opening_hours : Tourmaline::BusinessOpeningHours? = nil , personal_chat : Tourmaline::Chat? = nil , available_reactions : Array ( Tourmaline::ReactionType ) = [] of Tourmaline :: ReactionType , background_custom_emoji_id : String? = nil , profile_accent_color_id : Int32 | Int64 | Nil = nil , profile_background_custom_emoji_id : String? = nil , emoji_status_custom_emoji_id : String? = nil , emoji_status_expiration_date : Int32 | Int64 | Nil = nil , bio : String? = nil , has_private_forwards : Bool? = nil , has_restricted_voice_and_video_messages : Bool? = nil , join_to_send_messages : Bool? = nil , join_by_request : Bool? = nil , description : String? = nil , invite_link : String? = nil , pinned_message : Tourmaline::Message? = nil , permissions : Tourmaline::ChatPermissions? = nil , slow_mode_delay : Int32 | Int64 | Nil = nil , unrestrict_boost_count : Int32 | Int64 | Nil = nil , message_auto_delete_time : Int32 | Int64 | Nil = nil , has_aggressive_anti_spam_enabled : Bool? = nil , has_hidden_members : Bool? = nil , has_protected_content : Bool? = nil , has_visible_history : Bool? = nil , sticker_set_name : String? = nil , can_set_sticker_set : Bool? = nil , custom_emoji_sticker_set_name : String? = nil , linked_chat_id : Int32 | Int64 | Nil = nil , location : Tourmaline::ChatLocation? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #accent_color_id : Int32 | Int64 # Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details. View source #accent_color_id= ( accent_color_id : Int32 | Int64 ) # Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details. View source #active_usernames : Array ( String ) # Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels View source #active_usernames= ( active_usernames : Array ( String )) # Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels View source #available_reactions : Array ( Tourmaline::ReactionType ) # Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed. View source #available_reactions= ( available_reactions : Array ( Tourmaline::ReactionType )) # Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed. View source #background_custom_emoji_id : String? # Optional. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background View source #background_custom_emoji_id= ( background_custom_emoji_id : String? ) # Optional. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background View source #bio : String? # Optional. Bio of the other party in a private chat View source #bio= ( bio : String? ) # Optional. Bio of the other party in a private chat View source #birthdate : Tourmaline::Birthdate? # Optional. For private chats, the date of birth of the user View source #birthdate= ( birthdate : Tourmaline::Birthdate? ) # Optional. For private chats, the date of birth of the user View source #business_intro : Tourmaline::BusinessIntro? # Optional. For private chats with business accounts, the intro of the business View source #business_intro= ( business_intro : Tourmaline::BusinessIntro? ) # Optional. For private chats with business accounts, the intro of the business View source #business_location : Tourmaline::BusinessLocation? # Optional. For private chats with business accounts, the location of the business View source #business_location= ( business_location : Tourmaline::BusinessLocation? ) # Optional. For private chats with business accounts, the location of the business View source #business_opening_hours : Tourmaline::BusinessOpeningHours? # Optional. For private chats with business accounts, the opening hours of the business View source #business_opening_hours= ( business_opening_hours : Tourmaline::BusinessOpeningHours? ) # Optional. For private chats with business accounts, the opening hours of the business View source #can_set_sticker_set= ( can_set_sticker_set : Bool? ) # Optional. True, if the bot can change the group sticker set View source #can_set_sticker_set? : Bool? # Optional. True, if the bot can change the group sticker set View source #custom_emoji_sticker_set_name : String? # Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group. View source #custom_emoji_sticker_set_name= ( custom_emoji_sticker_set_name : String? ) # Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group. View source #description : String? # Optional. Description, for groups, supergroups and channel chats View source #description= ( description : String? ) # Optional. Description, for groups, supergroups and channel chats View source #emoji_status_custom_emoji_id : String? # Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat View source #emoji_status_custom_emoji_id= ( emoji_status_custom_emoji_id : String? ) # Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat View source #emoji_status_expiration_date : Time? # View source #emoji_status_expiration_date= ( emoji_status_expiration_date : Time? ) # View source #first_name : String? # Optional. First name of the other party in a private chat View source #first_name= ( first_name : String? ) # Optional. First name of the other party in a private chat View source #has_aggressive_anti_spam_enabled= ( has_aggressive_anti_spam_enabled : Bool? ) # Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators. View source #has_aggressive_anti_spam_enabled? : Bool? # Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators. View source #has_hidden_members= ( has_hidden_members : Bool? ) # Optional. True, if non-administrators can only get the list of bots and administrators in the chat View source #has_hidden_members? : Bool? # Optional. True, if non-administrators can only get the list of bots and administrators in the chat View source #has_private_forwards= ( has_private_forwards : Bool? ) # Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user View source #has_private_forwards? : Bool? # Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user View source #has_protected_content= ( has_protected_content : Bool? ) # Optional. True, if messages from the chat can't be forwarded to other chats View source #has_protected_content? : Bool? # Optional. True, if messages from the chat can't be forwarded to other chats View source #has_restricted_voice_and_video_messages= ( has_restricted_voice_and_video_messages : Bool? ) # Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat View source #has_restricted_voice_and_video_messages? : Bool? # Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat View source #has_visible_history= ( has_visible_history : Bool? ) # Optional. True, if new chat members will have access to old messages; available only to chat administrators View source #has_visible_history? : Bool? # Optional. True, if new chat members will have access to old messages; available only to chat administrators View source #id : Int32 | Int64 # Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #id= ( id : Int32 | Int64 ) # Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #invite_link : String? # Optional. Primary invite link, for groups, supergroups and channel chats View source #invite_link= ( invite_link : String? ) # Optional. Primary invite link, for groups, supergroups and channel chats View source #is_forum= ( is_forum : Bool? ) # Optional. True, if the supergroup chat is a forum (has topics enabled) View source #is_forum? : Bool? # Optional. True, if the supergroup chat is a forum (has topics enabled) View source #join_by_request= ( join_by_request : Bool? ) # Optional. True, if all users directly joining the supergroup need to be approved by supergroup administrators View source #join_by_request? : Bool? # Optional. True, if all users directly joining the supergroup need to be approved by supergroup administrators View source #join_to_send_messages= ( join_to_send_messages : Bool? ) # Optional. True, if users need to join the supergroup before they can send messages View source #join_to_send_messages? : Bool? # Optional. True, if users need to join the supergroup before they can send messages View source #last_name : String? # Optional. Last name of the other party in a private chat View source #last_name= ( last_name : String? ) # Optional. Last name of the other party in a private chat View source #linked_chat_id : Int32 | Int64 | Nil # Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. View source #linked_chat_id= ( linked_chat_id : Int32 | Int64 | Nil ) # Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. View source #location : Tourmaline::ChatLocation? # Optional. For supergroups, the location to which the supergroup is connected View source #location= ( location : Tourmaline::ChatLocation? ) # Optional. For supergroups, the location to which the supergroup is connected View source #max_reaction_count : Int32 | Int64 # The maximum number of reactions that can be set on a message in the chat View source #max_reaction_count= ( max_reaction_count : Int32 | Int64 ) # The maximum number of reactions that can be set on a message in the chat View source #message_auto_delete_time : Time? # View source #message_auto_delete_time= ( message_auto_delete_time : Time? ) # View source #permissions : Tourmaline::ChatPermissions? # Optional. Default chat member permissions, for groups and supergroups View source #permissions= ( permissions : Tourmaline::ChatPermissions? ) # Optional. Default chat member permissions, for groups and supergroups View source #personal_chat : Tourmaline::Chat? # Optional. For private chats, the personal channel of the user View source #personal_chat= ( personal_chat : Tourmaline::Chat? ) # Optional. For private chats, the personal channel of the user View source #photo : Tourmaline::ChatPhoto? # Optional. Chat photo View source #photo= ( photo : Tourmaline::ChatPhoto? ) # Optional. Chat photo View source #pinned_message : Tourmaline::Message? # Optional. The most recent pinned message (by sending date) View source #pinned_message= ( pinned_message : Tourmaline::Message? ) # Optional. The most recent pinned message (by sending date) View source #profile_accent_color_id : Int32 | Int64 | Nil # Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details. View source #profile_accent_color_id= ( profile_accent_color_id : Int32 | Int64 | Nil ) # Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details. View source #profile_background_custom_emoji_id : String? # Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background View source #profile_background_custom_emoji_id= ( profile_background_custom_emoji_id : String? ) # Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background View source #slow_mode_delay : Int32 | Int64 | Nil # Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds View source #slow_mode_delay= ( slow_mode_delay : Int32 | Int64 | Nil ) # Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds View source #sticker_set_name : String? # Optional. For supergroups, name of the group sticker set View source #sticker_set_name= ( sticker_set_name : String? ) # Optional. For supergroups, name of the group sticker set View source #title : String? # Optional. Title, for supergroups, channels and group chats View source #title= ( title : String? ) # Optional. Title, for supergroups, channels and group chats View source #type : String # Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source #type= ( type : String ) # Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source #unrestrict_boost_count : Int32 | Int64 | Nil # Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions View source #unrestrict_boost_count= ( unrestrict_boost_count : Int32 | Int64 | Nil ) # Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions View source #username : String? # Optional. Username, for private chats, supergroups and channels if available View source #username= ( username : String? ) # Optional. Username, for private chats, supergroups and channels if available View source","title":"ChatFullInfo"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo","text":"This object contains full information about a chat.","title":"ChatFullInfo"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo.new(id,type,accent_color_id,max_reaction_count,title,username,first_name,last_name,is_forum,photo,active_usernames,birthdate,business_intro,business_location,business_opening_hours,personal_chat,available_reactions,background_custom_emoji_id,profile_accent_color_id,profile_background_custom_emoji_id,emoji_status_custom_emoji_id,emoji_status_expiration_date,bio,has_private_forwards,has_restricted_voice_and_video_messages,join_to_send_messages,join_by_request,description,invite_link,pinned_message,permissions,slow_mode_delay,unrestrict_boost_count,message_auto_delete_time,has_aggressive_anti_spam_enabled,has_hidden_members,has_protected_content,has_visible_history,sticker_set_name,can_set_sticker_set,custom_emoji_sticker_set_name,linked_chat_id,location)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#accent_color_id","text":"Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details. View source","title":"#accent_color_id"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#accent_color_id=(accent_color_id)","text":"Identifier of the accent color for the chat name and backgrounds of the chat photo, reply header, and link preview. See accent colors for more details. View source","title":"#accent_color_id="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#active_usernames","text":"Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels View source","title":"#active_usernames"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#active_usernames=(active_usernames)","text":"Optional. If non-empty, the list of all active chat usernames; for private chats, supergroups and channels View source","title":"#active_usernames="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#available_reactions","text":"Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed. View source","title":"#available_reactions"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#available_reactions=(available_reactions)","text":"Optional. List of available reactions allowed in the chat. If omitted, then all emoji reactions are allowed. View source","title":"#available_reactions="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#background_custom_emoji_id","text":"Optional. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background View source","title":"#background_custom_emoji_id"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#background_custom_emoji_id=(background_custom_emoji_id)","text":"Optional. Custom emoji identifier of the emoji chosen by the chat for the reply header and link preview background View source","title":"#background_custom_emoji_id="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#bio","text":"Optional. Bio of the other party in a private chat View source","title":"#bio"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#bio=(bio)","text":"Optional. Bio of the other party in a private chat View source","title":"#bio="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#birthdate","text":"Optional. For private chats, the date of birth of the user View source","title":"#birthdate"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#birthdate=(birthdate)","text":"Optional. For private chats, the date of birth of the user View source","title":"#birthdate="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#business_intro","text":"Optional. For private chats with business accounts, the intro of the business View source","title":"#business_intro"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#business_intro=(business_intro)","text":"Optional. For private chats with business accounts, the intro of the business View source","title":"#business_intro="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#business_location","text":"Optional. For private chats with business accounts, the location of the business View source","title":"#business_location"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#business_location=(business_location)","text":"Optional. For private chats with business accounts, the location of the business View source","title":"#business_location="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#business_opening_hours","text":"Optional. For private chats with business accounts, the opening hours of the business View source","title":"#business_opening_hours"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#business_opening_hours=(business_opening_hours)","text":"Optional. For private chats with business accounts, the opening hours of the business View source","title":"#business_opening_hours="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#can_set_sticker_set=(can_set_sticker_set)","text":"Optional. True, if the bot can change the group sticker set View source","title":"#can_set_sticker_set="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#can_set_sticker_set?","text":"Optional. True, if the bot can change the group sticker set View source","title":"#can_set_sticker_set?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#custom_emoji_sticker_set_name","text":"Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group. View source","title":"#custom_emoji_sticker_set_name"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#custom_emoji_sticker_set_name=(custom_emoji_sticker_set_name)","text":"Optional. For supergroups, the name of the group's custom emoji sticker set. Custom emoji from this set can be used by all users and bots in the group. View source","title":"#custom_emoji_sticker_set_name="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#description","text":"Optional. Description, for groups, supergroups and channel chats View source","title":"#description"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#description=(description)","text":"Optional. Description, for groups, supergroups and channel chats View source","title":"#description="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#emoji_status_custom_emoji_id","text":"Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat View source","title":"#emoji_status_custom_emoji_id"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#emoji_status_custom_emoji_id=(emoji_status_custom_emoji_id)","text":"Optional. Custom emoji identifier of the emoji status of the chat or the other party in a private chat View source","title":"#emoji_status_custom_emoji_id="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#emoji_status_expiration_date","text":"View source","title":"#emoji_status_expiration_date"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#emoji_status_expiration_date=(emoji_status_expiration_date)","text":"View source","title":"#emoji_status_expiration_date="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#first_name","text":"Optional. First name of the other party in a private chat View source","title":"#first_name"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#first_name=(first_name)","text":"Optional. First name of the other party in a private chat View source","title":"#first_name="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_aggressive_anti_spam_enabled=(has_aggressive_anti_spam_enabled)","text":"Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators. View source","title":"#has_aggressive_anti_spam_enabled="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_aggressive_anti_spam_enabled?","text":"Optional. True, if aggressive anti-spam checks are enabled in the supergroup. The field is only available to chat administrators. View source","title":"#has_aggressive_anti_spam_enabled?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_hidden_members=(has_hidden_members)","text":"Optional. True, if non-administrators can only get the list of bots and administrators in the chat View source","title":"#has_hidden_members="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_hidden_members?","text":"Optional. True, if non-administrators can only get the list of bots and administrators in the chat View source","title":"#has_hidden_members?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_private_forwards=(has_private_forwards)","text":"Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user View source","title":"#has_private_forwards="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_private_forwards?","text":"Optional. True, if privacy settings of the other party in the private chat allows to use tg://user?id=<user_id> links only in chats with the user View source","title":"#has_private_forwards?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_protected_content=(has_protected_content)","text":"Optional. True, if messages from the chat can't be forwarded to other chats View source","title":"#has_protected_content="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_protected_content?","text":"Optional. True, if messages from the chat can't be forwarded to other chats View source","title":"#has_protected_content?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_restricted_voice_and_video_messages=(has_restricted_voice_and_video_messages)","text":"Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat View source","title":"#has_restricted_voice_and_video_messages="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_restricted_voice_and_video_messages?","text":"Optional. True, if the privacy settings of the other party restrict sending voice and video note messages in the private chat View source","title":"#has_restricted_voice_and_video_messages?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_visible_history=(has_visible_history)","text":"Optional. True, if new chat members will have access to old messages; available only to chat administrators View source","title":"#has_visible_history="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#has_visible_history?","text":"Optional. True, if new chat members will have access to old messages; available only to chat administrators View source","title":"#has_visible_history?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#id","text":"Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#id"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#id=(id)","text":"Unique identifier for this chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#id="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#invite_link","text":"Optional. Primary invite link, for groups, supergroups and channel chats View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#invite_link=(invite_link)","text":"Optional. Primary invite link, for groups, supergroups and channel chats View source","title":"#invite_link="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#is_forum=(is_forum)","text":"Optional. True, if the supergroup chat is a forum (has topics enabled) View source","title":"#is_forum="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#is_forum?","text":"Optional. True, if the supergroup chat is a forum (has topics enabled) View source","title":"#is_forum?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#join_by_request=(join_by_request)","text":"Optional. True, if all users directly joining the supergroup need to be approved by supergroup administrators View source","title":"#join_by_request="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#join_by_request?","text":"Optional. True, if all users directly joining the supergroup need to be approved by supergroup administrators View source","title":"#join_by_request?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#join_to_send_messages=(join_to_send_messages)","text":"Optional. True, if users need to join the supergroup before they can send messages View source","title":"#join_to_send_messages="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#join_to_send_messages?","text":"Optional. True, if users need to join the supergroup before they can send messages View source","title":"#join_to_send_messages?"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#last_name","text":"Optional. Last name of the other party in a private chat View source","title":"#last_name"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#last_name=(last_name)","text":"Optional. Last name of the other party in a private chat View source","title":"#last_name="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#linked_chat_id","text":"Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. View source","title":"#linked_chat_id"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#linked_chat_id=(linked_chat_id)","text":"Optional. Unique identifier for the linked chat, i.e. the discussion group identifier for a channel and vice versa; for supergroups and channel chats. This identifier may be greater than 32 bits and some programming languages may have difficulty/silent defects in interpreting it. But it is smaller than 52 bits, so a signed 64 bit integer or double-precision float type are safe for storing this identifier. View source","title":"#linked_chat_id="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#location","text":"Optional. For supergroups, the location to which the supergroup is connected View source","title":"#location"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#location=(location)","text":"Optional. For supergroups, the location to which the supergroup is connected View source","title":"#location="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#max_reaction_count","text":"The maximum number of reactions that can be set on a message in the chat View source","title":"#max_reaction_count"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#max_reaction_count=(max_reaction_count)","text":"The maximum number of reactions that can be set on a message in the chat View source","title":"#max_reaction_count="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#message_auto_delete_time","text":"View source","title":"#message_auto_delete_time"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#message_auto_delete_time=(message_auto_delete_time)","text":"View source","title":"#message_auto_delete_time="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#permissions","text":"Optional. Default chat member permissions, for groups and supergroups View source","title":"#permissions"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#permissions=(permissions)","text":"Optional. Default chat member permissions, for groups and supergroups View source","title":"#permissions="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#personal_chat","text":"Optional. For private chats, the personal channel of the user View source","title":"#personal_chat"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#personal_chat=(personal_chat)","text":"Optional. For private chats, the personal channel of the user View source","title":"#personal_chat="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#photo","text":"Optional. Chat photo View source","title":"#photo"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#photo=(photo)","text":"Optional. Chat photo View source","title":"#photo="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#pinned_message","text":"Optional. The most recent pinned message (by sending date) View source","title":"#pinned_message"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#pinned_message=(pinned_message)","text":"Optional. The most recent pinned message (by sending date) View source","title":"#pinned_message="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#profile_accent_color_id","text":"Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details. View source","title":"#profile_accent_color_id"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#profile_accent_color_id=(profile_accent_color_id)","text":"Optional. Identifier of the accent color for the chat's profile background. See profile accent colors for more details. View source","title":"#profile_accent_color_id="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#profile_background_custom_emoji_id","text":"Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background View source","title":"#profile_background_custom_emoji_id"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#profile_background_custom_emoji_id=(profile_background_custom_emoji_id)","text":"Optional. Custom emoji identifier of the emoji chosen by the chat for its profile background View source","title":"#profile_background_custom_emoji_id="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#slow_mode_delay","text":"Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds View source","title":"#slow_mode_delay"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#slow_mode_delay=(slow_mode_delay)","text":"Optional. For supergroups, the minimum allowed delay between consecutive messages sent by each unprivileged user; in seconds View source","title":"#slow_mode_delay="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#sticker_set_name","text":"Optional. For supergroups, name of the group sticker set View source","title":"#sticker_set_name"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#sticker_set_name=(sticker_set_name)","text":"Optional. For supergroups, name of the group sticker set View source","title":"#sticker_set_name="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#title","text":"Optional. Title, for supergroups, channels and group chats View source","title":"#title"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#title=(title)","text":"Optional. Title, for supergroups, channels and group chats View source","title":"#title="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#type","text":"Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source","title":"#type"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#type=(type)","text":"Type of the chat, can be either \"private\", \"group\", \"supergroup\" or \"channel\" View source","title":"#type="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#unrestrict_boost_count","text":"Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions View source","title":"#unrestrict_boost_count"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#unrestrict_boost_count=(unrestrict_boost_count)","text":"Optional. For supergroups, the minimum number of boosts that a non-administrator user needs to add in order to ignore slow mode and chat permissions View source","title":"#unrestrict_boost_count="},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#username","text":"Optional. Username, for private chats, supergroups and channels if available View source","title":"#username"},{"location":"api_reference/Tourmaline/ChatFullInfo/#Tourmaline::ChatFullInfo#username=(username)","text":"Optional. Username, for private chats, supergroups and channels if available View source","title":"#username="},{"location":"api_reference/Tourmaline/ChatInviteLink/","text":"class Tourmaline::ChatInviteLink inherits Reference # Represents an invite link for a chat. Included modules JSON::Serializable Constructors # .new ( invite_link , creator , creates_join_request , is_primary , is_revoked , name : String? = nil , expire_date : Int32 | Int64 | Nil = nil , member_limit : Int32 | Int64 | Nil = nil , pending_join_request_count : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #creates_join_request= ( creates_join_request : Bool ) # True, if users joining the chat via the link need to be approved by chat administrators View source #creates_join_request? : Bool # True, if users joining the chat via the link need to be approved by chat administrators View source #creator : Tourmaline::User # Creator of the link View source #creator= ( creator : Tourmaline::User ) # Creator of the link View source #expire_date : Time? # View source #expire_date= ( expire_date : Time? ) # View source #invite_link : String # The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with \"...\". View source #invite_link= ( invite_link : String ) # The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with \"...\". View source #is_primary= ( is_primary : Bool ) # True, if the link is primary View source #is_primary? : Bool # True, if the link is primary View source #is_revoked= ( is_revoked : Bool ) # True, if the link is revoked View source #is_revoked? : Bool # True, if the link is revoked View source #member_limit : Int32 | Int64 | Nil # Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 View source #member_limit= ( member_limit : Int32 | Int64 | Nil ) # Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 View source #name : String? # Optional. Invite link name View source #name= ( name : String? ) # Optional. Invite link name View source #pending_join_request_count : Int32 | Int64 | Nil # Optional. Number of pending join requests created using this link View source #pending_join_request_count= ( pending_join_request_count : Int32 | Int64 | Nil ) # Optional. Number of pending join requests created using this link View source","title":"ChatInviteLink"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink","text":"Represents an invite link for a chat.","title":"ChatInviteLink"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink.new(invite_link,creator,creates_join_request,is_primary,is_revoked,name,expire_date,member_limit,pending_join_request_count)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#creates_join_request=(creates_join_request)","text":"True, if users joining the chat via the link need to be approved by chat administrators View source","title":"#creates_join_request="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#creates_join_request?","text":"True, if users joining the chat via the link need to be approved by chat administrators View source","title":"#creates_join_request?"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#creator","text":"Creator of the link View source","title":"#creator"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#creator=(creator)","text":"Creator of the link View source","title":"#creator="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#expire_date","text":"View source","title":"#expire_date"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#expire_date=(expire_date)","text":"View source","title":"#expire_date="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#invite_link","text":"The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with \"...\". View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#invite_link=(invite_link)","text":"The invite link. If the link was created by another chat administrator, then the second part of the link will be replaced with \"...\". View source","title":"#invite_link="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#is_primary=(is_primary)","text":"True, if the link is primary View source","title":"#is_primary="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#is_primary?","text":"True, if the link is primary View source","title":"#is_primary?"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#is_revoked=(is_revoked)","text":"True, if the link is revoked View source","title":"#is_revoked="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#is_revoked?","text":"True, if the link is revoked View source","title":"#is_revoked?"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#member_limit","text":"Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 View source","title":"#member_limit"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#member_limit=(member_limit)","text":"Optional. The maximum number of users that can be members of the chat simultaneously after joining the chat via this invite link; 1-99999 View source","title":"#member_limit="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#name","text":"Optional. Invite link name View source","title":"#name"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#name=(name)","text":"Optional. Invite link name View source","title":"#name="},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#pending_join_request_count","text":"Optional. Number of pending join requests created using this link View source","title":"#pending_join_request_count"},{"location":"api_reference/Tourmaline/ChatInviteLink/#Tourmaline::ChatInviteLink#pending_join_request_count=(pending_join_request_count)","text":"Optional. Number of pending join requests created using this link View source","title":"#pending_join_request_count="},{"location":"api_reference/Tourmaline/ChatJoinRequest/","text":"class Tourmaline::ChatJoinRequest inherits Reference # Represents a join request sent to a chat. Included modules JSON::Serializable Constructors # .new ( chat , from , user_chat_id , date , bio : String? = nil , invite_link : Tourmaline::ChatInviteLink? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #bio : String? # Optional. Bio of the user. View source #bio= ( bio : String? ) # Optional. Bio of the user. View source #chat : Tourmaline::Chat # Chat to which the request was sent View source #chat= ( chat : Tourmaline::Chat ) # Chat to which the request was sent View source #date : Time # View source #date= ( date : Time ) # View source #from : Tourmaline::User # User that sent the join request View source #from= ( from : Tourmaline::User ) # User that sent the join request View source #invite_link : Tourmaline::ChatInviteLink? # Optional. Chat invite link that was used by the user to send the join request View source #invite_link= ( invite_link : Tourmaline::ChatInviteLink? ) # Optional. Chat invite link that was used by the user to send the join request View source #user_chat_id : Int32 | Int64 # Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user. View source #user_chat_id= ( user_chat_id : Int32 | Int64 ) # Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user. View source","title":"ChatJoinRequest"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest","text":"Represents a join request sent to a chat.","title":"ChatJoinRequest"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest.new(chat,from,user_chat_id,date,bio,invite_link)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#bio","text":"Optional. Bio of the user. View source","title":"#bio"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#bio=(bio)","text":"Optional. Bio of the user. View source","title":"#bio="},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#chat","text":"Chat to which the request was sent View source","title":"#chat"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#chat=(chat)","text":"Chat to which the request was sent View source","title":"#chat="},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#from","text":"User that sent the join request View source","title":"#from"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#from=(from)","text":"User that sent the join request View source","title":"#from="},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#invite_link","text":"Optional. Chat invite link that was used by the user to send the join request View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#invite_link=(invite_link)","text":"Optional. Chat invite link that was used by the user to send the join request View source","title":"#invite_link="},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#user_chat_id","text":"Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user. View source","title":"#user_chat_id"},{"location":"api_reference/Tourmaline/ChatJoinRequest/#Tourmaline::ChatJoinRequest#user_chat_id=(user_chat_id)","text":"Identifier of a private chat with the user who sent the join request. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot can use this identifier for 5 minutes to send messages until the join request is processed, assuming no other administrator contacted the user. View source","title":"#user_chat_id="},{"location":"api_reference/Tourmaline/ChatLocation/","text":"class Tourmaline::ChatLocation inherits Reference # Represents a location to which a chat is connected. Included modules JSON::Serializable Constructors # .new ( location , address ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # Location address; 1-64 characters, as defined by the chat owner View source #address= ( address : String ) # Location address; 1-64 characters, as defined by the chat owner View source #location : Tourmaline::Location # The location to which the supergroup is connected. Can't be a live location. View source #location= ( location : Tourmaline::Location ) # The location to which the supergroup is connected. Can't be a live location. View source","title":"ChatLocation"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation","text":"Represents a location to which a chat is connected.","title":"ChatLocation"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation.new(location,address)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#address","text":"Location address; 1-64 characters, as defined by the chat owner View source","title":"#address"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#address=(address)","text":"Location address; 1-64 characters, as defined by the chat owner View source","title":"#address="},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#location","text":"The location to which the supergroup is connected. Can't be a live location. View source","title":"#location"},{"location":"api_reference/Tourmaline/ChatLocation/#Tourmaline::ChatLocation#location=(location)","text":"The location to which the supergroup is connected. Can't be a live location. View source","title":"#location="},{"location":"api_reference/Tourmaline/ChatMember/","text":"alias Tourmaline::ChatMember # This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported: - ChatMemberOwner - ChatMemberAdministrator - ChatMemberMember - ChatMemberRestricted - ChatMemberLeft - ChatMemberBanned Alias definition Tourmaline::ChatMemberAdministrator | Tourmaline::ChatMemberBanned | Tourmaline::ChatMemberLeft | Tourmaline::ChatMemberMember | Tourmaline::ChatMemberOwner | Tourmaline::ChatMemberRestricted","title":"ChatMember"},{"location":"api_reference/Tourmaline/ChatMember/#Tourmaline::ChatMember","text":"This object contains information about one member of a chat. Currently, the following 6 types of chat members are supported: - ChatMemberOwner - ChatMemberAdministrator - ChatMemberMember - ChatMemberRestricted - ChatMemberLeft - ChatMemberBanned","title":"ChatMember"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/","text":"class Tourmaline::ChatMemberAdministrator inherits Reference # Represents a chat member that has some additional privileges. Included modules JSON::Serializable Constructors # .new ( status , user , can_be_edited , is_anonymous , can_manage_chat , can_delete_messages , can_manage_video_chats , can_restrict_members , can_promote_members , can_change_info , can_invite_users , can_post_stories , can_edit_stories , can_delete_stories , can_post_messages : Bool? = nil , can_edit_messages : Bool? = nil , can_pin_messages : Bool? = nil , can_manage_topics : Bool? = nil , custom_title : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #can_be_edited= ( can_be_edited : Bool ) # True, if the bot is allowed to edit administrator privileges of that user View source #can_be_edited? : Bool # True, if the bot is allowed to edit administrator privileges of that user View source #can_change_info= ( can_change_info : Bool ) # True, if the user is allowed to change the chat title, photo and other settings View source #can_change_info? : Bool # True, if the user is allowed to change the chat title, photo and other settings View source #can_delete_messages= ( can_delete_messages : Bool ) # True, if the administrator can delete messages of other users View source #can_delete_messages? : Bool # True, if the administrator can delete messages of other users View source #can_delete_stories= ( can_delete_stories : Bool ) # True, if the administrator can delete stories posted by other users View source #can_delete_stories? : Bool # True, if the administrator can delete stories posted by other users View source #can_edit_messages= ( can_edit_messages : Bool? ) # Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source #can_edit_messages? : Bool? # Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source #can_edit_stories= ( can_edit_stories : Bool ) # True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source #can_edit_stories? : Bool # True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source #can_invite_users= ( can_invite_users : Bool ) # True, if the user is allowed to invite new users to the chat View source #can_invite_users? : Bool # True, if the user is allowed to invite new users to the chat View source #can_manage_chat= ( can_manage_chat : Bool ) # True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source #can_manage_chat? : Bool # True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source #can_manage_topics= ( can_manage_topics : Bool? ) # Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source #can_manage_topics? : Bool? # Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source #can_manage_video_chats= ( can_manage_video_chats : Bool ) # True, if the administrator can manage video chats View source #can_manage_video_chats? : Bool # True, if the administrator can manage video chats View source #can_pin_messages= ( can_pin_messages : Bool? ) # Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source #can_pin_messages? : Bool? # Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source #can_post_messages= ( can_post_messages : Bool? ) # Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source #can_post_messages? : Bool? # Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source #can_post_stories= ( can_post_stories : Bool ) # True, if the administrator can post stories to the chat View source #can_post_stories? : Bool # True, if the administrator can post stories to the chat View source #can_promote_members= ( can_promote_members : Bool ) # True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source #can_promote_members? : Bool # True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source #can_restrict_members= ( can_restrict_members : Bool ) # True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source #can_restrict_members? : Bool # True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source #custom_title : String? # Optional. Custom title for this user View source #custom_title= ( custom_title : String? ) # Optional. Custom title for this user View source #is_anonymous= ( is_anonymous : Bool ) # True, if the user's presence in the chat is hidden View source #is_anonymous? : Bool # True, if the user's presence in the chat is hidden View source #status : String # The member's status in the chat, always \"administrator\" View source #status= ( status : String ) # The member's status in the chat, always \"administrator\" View source #user : Tourmaline::User # Information about the user View source #user= ( user : Tourmaline::User ) # Information about the user View source","title":"ChatMemberAdministrator"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator","text":"Represents a chat member that has some additional privileges.","title":"ChatMemberAdministrator"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator.new(status,user,can_be_edited,is_anonymous,can_manage_chat,can_delete_messages,can_manage_video_chats,can_restrict_members,can_promote_members,can_change_info,can_invite_users,can_post_stories,can_edit_stories,can_delete_stories,can_post_messages,can_edit_messages,can_pin_messages,can_manage_topics,custom_title)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_be_edited=(can_be_edited)","text":"True, if the bot is allowed to edit administrator privileges of that user View source","title":"#can_be_edited="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_be_edited?","text":"True, if the bot is allowed to edit administrator privileges of that user View source","title":"#can_be_edited?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_change_info=(can_change_info)","text":"True, if the user is allowed to change the chat title, photo and other settings View source","title":"#can_change_info="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_change_info?","text":"True, if the user is allowed to change the chat title, photo and other settings View source","title":"#can_change_info?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_delete_messages=(can_delete_messages)","text":"True, if the administrator can delete messages of other users View source","title":"#can_delete_messages="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_delete_messages?","text":"True, if the administrator can delete messages of other users View source","title":"#can_delete_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_delete_stories=(can_delete_stories)","text":"True, if the administrator can delete stories posted by other users View source","title":"#can_delete_stories="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_delete_stories?","text":"True, if the administrator can delete stories posted by other users View source","title":"#can_delete_stories?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_edit_messages=(can_edit_messages)","text":"Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source","title":"#can_edit_messages="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_edit_messages?","text":"Optional. True, if the administrator can edit messages of other users and can pin messages; for channels only View source","title":"#can_edit_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_edit_stories=(can_edit_stories)","text":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source","title":"#can_edit_stories="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_edit_stories?","text":"True, if the administrator can edit stories posted by other users, post stories to the chat page, pin chat stories, and access the chat's story archive View source","title":"#can_edit_stories?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_invite_users=(can_invite_users)","text":"True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_invite_users?","text":"True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_chat=(can_manage_chat)","text":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source","title":"#can_manage_chat="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_chat?","text":"True, if the administrator can access the chat event log, get boost list, see hidden supergroup and channel members, report spam messages and ignore slow mode. Implied by any other administrator privilege. View source","title":"#can_manage_chat?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_topics=(can_manage_topics)","text":"Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source","title":"#can_manage_topics="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_topics?","text":"Optional. True, if the user is allowed to create, rename, close, and reopen forum topics; for supergroups only View source","title":"#can_manage_topics?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_video_chats=(can_manage_video_chats)","text":"True, if the administrator can manage video chats View source","title":"#can_manage_video_chats="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_manage_video_chats?","text":"True, if the administrator can manage video chats View source","title":"#can_manage_video_chats?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_pin_messages=(can_pin_messages)","text":"Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source","title":"#can_pin_messages="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_pin_messages?","text":"Optional. True, if the user is allowed to pin messages; for groups and supergroups only View source","title":"#can_pin_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_post_messages=(can_post_messages)","text":"Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source","title":"#can_post_messages="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_post_messages?","text":"Optional. True, if the administrator can post messages in the channel, or access channel statistics; for channels only View source","title":"#can_post_messages?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_post_stories=(can_post_stories)","text":"True, if the administrator can post stories to the chat View source","title":"#can_post_stories="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_post_stories?","text":"True, if the administrator can post stories to the chat View source","title":"#can_post_stories?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_promote_members=(can_promote_members)","text":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source","title":"#can_promote_members="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_promote_members?","text":"True, if the administrator can add new administrators with a subset of their own privileges or demote administrators that they have promoted, directly or indirectly (promoted by administrators that were appointed by the user) View source","title":"#can_promote_members?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_restrict_members=(can_restrict_members)","text":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source","title":"#can_restrict_members="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#can_restrict_members?","text":"True, if the administrator can restrict, ban or unban chat members, or access supergroup statistics View source","title":"#can_restrict_members?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#custom_title","text":"Optional. Custom title for this user View source","title":"#custom_title"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#custom_title=(custom_title)","text":"Optional. Custom title for this user View source","title":"#custom_title="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#is_anonymous=(is_anonymous)","text":"True, if the user's presence in the chat is hidden View source","title":"#is_anonymous="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#is_anonymous?","text":"True, if the user's presence in the chat is hidden View source","title":"#is_anonymous?"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#status","text":"The member's status in the chat, always \"administrator\" View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#status=(status)","text":"The member's status in the chat, always \"administrator\" View source","title":"#status="},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#user","text":"Information about the user View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberAdministrator/#Tourmaline::ChatMemberAdministrator#user=(user)","text":"Information about the user View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatMemberBanned/","text":"class Tourmaline::ChatMemberBanned inherits Reference # Represents a chat member that was banned in the chat and can't return to the chat or view chat messages. Included modules JSON::Serializable Constructors # .new ( status , user , until_date ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #status : String # The member's status in the chat, always \"kicked\" View source #status= ( status : String ) # The member's status in the chat, always \"kicked\" View source #until_date : Time # View source #until_date= ( until_date : Time ) # View source #user : Tourmaline::User # Information about the user View source #user= ( user : Tourmaline::User ) # Information about the user View source","title":"ChatMemberBanned"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned","text":"Represents a chat member that was banned in the chat and can't return to the chat or view chat messages.","title":"ChatMemberBanned"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned.new(status,user,until_date)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned#status","text":"The member's status in the chat, always \"kicked\" View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned#status=(status)","text":"The member's status in the chat, always \"kicked\" View source","title":"#status="},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned#until_date","text":"View source","title":"#until_date"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned#until_date=(until_date)","text":"View source","title":"#until_date="},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned#user","text":"Information about the user View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberBanned/#Tourmaline::ChatMemberBanned#user=(user)","text":"Information about the user View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatMemberLeft/","text":"class Tourmaline::ChatMemberLeft inherits Reference # Represents a chat member that isn't currently a member of the chat, but may join it themselves. Included modules JSON::Serializable Constructors # .new ( status , user ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #status : String # The member's status in the chat, always \"left\" View source #status= ( status : String ) # The member's status in the chat, always \"left\" View source #user : Tourmaline::User # Information about the user View source #user= ( user : Tourmaline::User ) # Information about the user View source","title":"ChatMemberLeft"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft","text":"Represents a chat member that isn't currently a member of the chat, but may join it themselves.","title":"ChatMemberLeft"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft.new(status,user)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft#status","text":"The member's status in the chat, always \"left\" View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft#status=(status)","text":"The member's status in the chat, always \"left\" View source","title":"#status="},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft#user","text":"Information about the user View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberLeft/#Tourmaline::ChatMemberLeft#user=(user)","text":"Information about the user View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatMemberMember/","text":"class Tourmaline::ChatMemberMember inherits Reference # Represents a chat member that has no additional privileges or restrictions. Included modules JSON::Serializable Constructors # .new ( status , user ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #status : String # The member's status in the chat, always \"member\" View source #status= ( status : String ) # The member's status in the chat, always \"member\" View source #user : Tourmaline::User # Information about the user View source #user= ( user : Tourmaline::User ) # Information about the user View source","title":"ChatMemberMember"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember","text":"Represents a chat member that has no additional privileges or restrictions.","title":"ChatMemberMember"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember.new(status,user)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember#status","text":"The member's status in the chat, always \"member\" View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember#status=(status)","text":"The member's status in the chat, always \"member\" View source","title":"#status="},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember#user","text":"Information about the user View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberMember/#Tourmaline::ChatMemberMember#user=(user)","text":"Information about the user View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatMemberOwner/","text":"class Tourmaline::ChatMemberOwner inherits Reference # Represents a chat member that owns the chat and has all administrator privileges. Included modules JSON::Serializable Constructors # .new ( status , user , is_anonymous , custom_title : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #custom_title : String? # Optional. Custom title for this user View source #custom_title= ( custom_title : String? ) # Optional. Custom title for this user View source #is_anonymous= ( is_anonymous : Bool ) # True, if the user's presence in the chat is hidden View source #is_anonymous? : Bool # True, if the user's presence in the chat is hidden View source #status : String # The member's status in the chat, always \"creator\" View source #status= ( status : String ) # The member's status in the chat, always \"creator\" View source #user : Tourmaline::User # Information about the user View source #user= ( user : Tourmaline::User ) # Information about the user View source","title":"ChatMemberOwner"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner","text":"Represents a chat member that owns the chat and has all administrator privileges.","title":"ChatMemberOwner"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner.new(status,user,is_anonymous,custom_title)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#custom_title","text":"Optional. Custom title for this user View source","title":"#custom_title"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#custom_title=(custom_title)","text":"Optional. Custom title for this user View source","title":"#custom_title="},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#is_anonymous=(is_anonymous)","text":"True, if the user's presence in the chat is hidden View source","title":"#is_anonymous="},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#is_anonymous?","text":"True, if the user's presence in the chat is hidden View source","title":"#is_anonymous?"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#status","text":"The member's status in the chat, always \"creator\" View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#status=(status)","text":"The member's status in the chat, always \"creator\" View source","title":"#status="},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#user","text":"Information about the user View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberOwner/#Tourmaline::ChatMemberOwner#user=(user)","text":"Information about the user View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/","text":"class Tourmaline::ChatMemberRestricted inherits Reference # Represents a chat member that is under certain restrictions in the chat. Supergroups only. Included modules JSON::Serializable Constructors # .new ( status , user , is_member , can_send_messages , can_send_audios , can_send_documents , can_send_photos , can_send_videos , can_send_video_notes , can_send_voice_notes , can_send_polls , can_send_other_messages , can_add_web_page_previews , can_change_info , can_invite_users , can_pin_messages , can_manage_topics , until_date ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #can_add_web_page_previews= ( can_add_web_page_previews : Bool ) # True, if the user is allowed to add web page previews to their messages View source #can_add_web_page_previews? : Bool # True, if the user is allowed to add web page previews to their messages View source #can_change_info= ( can_change_info : Bool ) # True, if the user is allowed to change the chat title, photo and other settings View source #can_change_info? : Bool # True, if the user is allowed to change the chat title, photo and other settings View source #can_invite_users= ( can_invite_users : Bool ) # True, if the user is allowed to invite new users to the chat View source #can_invite_users? : Bool # True, if the user is allowed to invite new users to the chat View source #can_manage_topics= ( can_manage_topics : Bool ) # True, if the user is allowed to create forum topics View source #can_manage_topics? : Bool # True, if the user is allowed to create forum topics View source #can_pin_messages= ( can_pin_messages : Bool ) # True, if the user is allowed to pin messages View source #can_pin_messages? : Bool # True, if the user is allowed to pin messages View source #can_send_audios= ( can_send_audios : Bool ) # True, if the user is allowed to send audios View source #can_send_audios? : Bool # True, if the user is allowed to send audios View source #can_send_documents= ( can_send_documents : Bool ) # True, if the user is allowed to send documents View source #can_send_documents? : Bool # True, if the user is allowed to send documents View source #can_send_messages= ( can_send_messages : Bool ) # True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source #can_send_messages? : Bool # True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source #can_send_other_messages= ( can_send_other_messages : Bool ) # True, if the user is allowed to send animations, games, stickers and use inline bots View source #can_send_other_messages? : Bool # True, if the user is allowed to send animations, games, stickers and use inline bots View source #can_send_photos= ( can_send_photos : Bool ) # True, if the user is allowed to send photos View source #can_send_photos? : Bool # True, if the user is allowed to send photos View source #can_send_polls= ( can_send_polls : Bool ) # True, if the user is allowed to send polls View source #can_send_polls? : Bool # True, if the user is allowed to send polls View source #can_send_video_notes= ( can_send_video_notes : Bool ) # True, if the user is allowed to send video notes View source #can_send_video_notes? : Bool # True, if the user is allowed to send video notes View source #can_send_videos= ( can_send_videos : Bool ) # True, if the user is allowed to send videos View source #can_send_videos? : Bool # True, if the user is allowed to send videos View source #can_send_voice_notes= ( can_send_voice_notes : Bool ) # True, if the user is allowed to send voice notes View source #can_send_voice_notes? : Bool # True, if the user is allowed to send voice notes View source #is_member= ( is_member : Bool ) # True, if the user is a member of the chat at the moment of the request View source #is_member? : Bool # True, if the user is a member of the chat at the moment of the request View source #status : String # The member's status in the chat, always \"restricted\" View source #status= ( status : String ) # The member's status in the chat, always \"restricted\" View source #until_date : Time # View source #until_date= ( until_date : Time ) # View source #user : Tourmaline::User # Information about the user View source #user= ( user : Tourmaline::User ) # Information about the user View source","title":"ChatMemberRestricted"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted","text":"Represents a chat member that is under certain restrictions in the chat. Supergroups only.","title":"ChatMemberRestricted"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted.new(status,user,is_member,can_send_messages,can_send_audios,can_send_documents,can_send_photos,can_send_videos,can_send_video_notes,can_send_voice_notes,can_send_polls,can_send_other_messages,can_add_web_page_previews,can_change_info,can_invite_users,can_pin_messages,can_manage_topics,until_date)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_add_web_page_previews=(can_add_web_page_previews)","text":"True, if the user is allowed to add web page previews to their messages View source","title":"#can_add_web_page_previews="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_add_web_page_previews?","text":"True, if the user is allowed to add web page previews to their messages View source","title":"#can_add_web_page_previews?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_change_info=(can_change_info)","text":"True, if the user is allowed to change the chat title, photo and other settings View source","title":"#can_change_info="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_change_info?","text":"True, if the user is allowed to change the chat title, photo and other settings View source","title":"#can_change_info?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_invite_users=(can_invite_users)","text":"True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_invite_users?","text":"True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_manage_topics=(can_manage_topics)","text":"True, if the user is allowed to create forum topics View source","title":"#can_manage_topics="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_manage_topics?","text":"True, if the user is allowed to create forum topics View source","title":"#can_manage_topics?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_pin_messages=(can_pin_messages)","text":"True, if the user is allowed to pin messages View source","title":"#can_pin_messages="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_pin_messages?","text":"True, if the user is allowed to pin messages View source","title":"#can_pin_messages?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_audios=(can_send_audios)","text":"True, if the user is allowed to send audios View source","title":"#can_send_audios="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_audios?","text":"True, if the user is allowed to send audios View source","title":"#can_send_audios?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_documents=(can_send_documents)","text":"True, if the user is allowed to send documents View source","title":"#can_send_documents="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_documents?","text":"True, if the user is allowed to send documents View source","title":"#can_send_documents?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_messages=(can_send_messages)","text":"True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source","title":"#can_send_messages="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_messages?","text":"True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source","title":"#can_send_messages?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_other_messages=(can_send_other_messages)","text":"True, if the user is allowed to send animations, games, stickers and use inline bots View source","title":"#can_send_other_messages="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_other_messages?","text":"True, if the user is allowed to send animations, games, stickers and use inline bots View source","title":"#can_send_other_messages?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_photos=(can_send_photos)","text":"True, if the user is allowed to send photos View source","title":"#can_send_photos="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_photos?","text":"True, if the user is allowed to send photos View source","title":"#can_send_photos?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_polls=(can_send_polls)","text":"True, if the user is allowed to send polls View source","title":"#can_send_polls="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_polls?","text":"True, if the user is allowed to send polls View source","title":"#can_send_polls?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_video_notes=(can_send_video_notes)","text":"True, if the user is allowed to send video notes View source","title":"#can_send_video_notes="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_video_notes?","text":"True, if the user is allowed to send video notes View source","title":"#can_send_video_notes?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_videos=(can_send_videos)","text":"True, if the user is allowed to send videos View source","title":"#can_send_videos="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_videos?","text":"True, if the user is allowed to send videos View source","title":"#can_send_videos?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_voice_notes=(can_send_voice_notes)","text":"True, if the user is allowed to send voice notes View source","title":"#can_send_voice_notes="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#can_send_voice_notes?","text":"True, if the user is allowed to send voice notes View source","title":"#can_send_voice_notes?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#is_member=(is_member)","text":"True, if the user is a member of the chat at the moment of the request View source","title":"#is_member="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#is_member?","text":"True, if the user is a member of the chat at the moment of the request View source","title":"#is_member?"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#status","text":"The member's status in the chat, always \"restricted\" View source","title":"#status"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#status=(status)","text":"The member's status in the chat, always \"restricted\" View source","title":"#status="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#until_date","text":"View source","title":"#until_date"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#until_date=(until_date)","text":"View source","title":"#until_date="},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#user","text":"Information about the user View source","title":"#user"},{"location":"api_reference/Tourmaline/ChatMemberRestricted/#Tourmaline::ChatMemberRestricted#user=(user)","text":"Information about the user View source","title":"#user="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/","text":"class Tourmaline::ChatMemberUpdated inherits Reference # This object represents changes in the status of a chat member. Included modules JSON::Serializable Constructors # .new ( chat , from , date , old_chat_member , new_chat_member , invite_link : Tourmaline::ChatInviteLink? = nil , via_join_request : Bool? = nil , via_chat_folder_invite_link : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat : Tourmaline::Chat # Chat the user belongs to View source #chat= ( chat : Tourmaline::Chat ) # Chat the user belongs to View source #date : Time # View source #date= ( date : Time ) # View source #from : Tourmaline::User # Performer of the action, which resulted in the change View source #from= ( from : Tourmaline::User ) # Performer of the action, which resulted in the change View source #invite_link : Tourmaline::ChatInviteLink? # Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only. View source #invite_link= ( invite_link : Tourmaline::ChatInviteLink? ) # Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only. View source #new_chat_member : Tourmaline::ChatMember # New information about the chat member View source #new_chat_member= ( new_chat_member : Tourmaline::ChatMember ) # New information about the chat member View source #old_chat_member : Tourmaline::ChatMember # Previous information about the chat member View source #old_chat_member= ( old_chat_member : Tourmaline::ChatMember ) # Previous information about the chat member View source #via_chat_folder_invite_link= ( via_chat_folder_invite_link : Bool? ) # Optional. True, if the user joined the chat via a chat folder invite link View source #via_chat_folder_invite_link? : Bool? # Optional. True, if the user joined the chat via a chat folder invite link View source #via_join_request= ( via_join_request : Bool? ) # Optional. True, if the user joined the chat after sending a direct join request and being approved by an administrator View source #via_join_request? : Bool? # Optional. True, if the user joined the chat after sending a direct join request and being approved by an administrator View source","title":"ChatMemberUpdated"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated","text":"This object represents changes in the status of a chat member.","title":"ChatMemberUpdated"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated.new(chat,from,date,old_chat_member,new_chat_member,invite_link,via_join_request,via_chat_folder_invite_link)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#chat","text":"Chat the user belongs to View source","title":"#chat"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#chat=(chat)","text":"Chat the user belongs to View source","title":"#chat="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#from","text":"Performer of the action, which resulted in the change View source","title":"#from"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#from=(from)","text":"Performer of the action, which resulted in the change View source","title":"#from="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#invite_link","text":"Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only. View source","title":"#invite_link"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#invite_link=(invite_link)","text":"Optional. Chat invite link, which was used by the user to join the chat; for joining by invite link events only. View source","title":"#invite_link="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#new_chat_member","text":"New information about the chat member View source","title":"#new_chat_member"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#new_chat_member=(new_chat_member)","text":"New information about the chat member View source","title":"#new_chat_member="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#old_chat_member","text":"Previous information about the chat member View source","title":"#old_chat_member"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#old_chat_member=(old_chat_member)","text":"Previous information about the chat member View source","title":"#old_chat_member="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#via_chat_folder_invite_link=(via_chat_folder_invite_link)","text":"Optional. True, if the user joined the chat via a chat folder invite link View source","title":"#via_chat_folder_invite_link="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#via_chat_folder_invite_link?","text":"Optional. True, if the user joined the chat via a chat folder invite link View source","title":"#via_chat_folder_invite_link?"},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#via_join_request=(via_join_request)","text":"Optional. True, if the user joined the chat after sending a direct join request and being approved by an administrator View source","title":"#via_join_request="},{"location":"api_reference/Tourmaline/ChatMemberUpdated/#Tourmaline::ChatMemberUpdated#via_join_request?","text":"Optional. True, if the user joined the chat after sending a direct join request and being approved by an administrator View source","title":"#via_join_request?"},{"location":"api_reference/Tourmaline/ChatPermissions/","text":"class Tourmaline::ChatPermissions inherits Reference # Describes actions that a non-administrator user is allowed to take in a chat. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( can_send_messages : Bool? = nil , can_send_audios : Bool? = nil , can_send_documents : Bool? = nil , can_send_photos : Bool? = nil , can_send_videos : Bool? = nil , can_send_video_notes : Bool? = nil , can_send_voice_notes : Bool? = nil , can_send_polls : Bool? = nil , can_send_other_messages : Bool? = nil , can_add_web_page_previews : Bool? = nil , can_change_info : Bool? = nil , can_invite_users : Bool? = nil , can_pin_messages : Bool? = nil , can_manage_topics : Bool? = nil ) # View source Methods # #can_add_web_page_previews= ( can_add_web_page_previews : Bool? ) # Optional. True, if the user is allowed to add web page previews to their messages View source #can_add_web_page_previews? : Bool? # Optional. True, if the user is allowed to add web page previews to their messages View source #can_change_info= ( can_change_info : Bool? ) # Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups View source #can_change_info? : Bool? # Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups View source #can_invite_users= ( can_invite_users : Bool? ) # Optional. True, if the user is allowed to invite new users to the chat View source #can_invite_users? : Bool? # Optional. True, if the user is allowed to invite new users to the chat View source #can_manage_topics= ( can_manage_topics : Bool? ) # Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages View source #can_manage_topics? : Bool? # Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages View source #can_pin_messages= ( can_pin_messages : Bool? ) # Optional. True, if the user is allowed to pin messages. Ignored in public supergroups View source #can_pin_messages? : Bool? # Optional. True, if the user is allowed to pin messages. Ignored in public supergroups View source #can_send_audios= ( can_send_audios : Bool? ) # Optional. True, if the user is allowed to send audios View source #can_send_audios? : Bool? # Optional. True, if the user is allowed to send audios View source #can_send_documents= ( can_send_documents : Bool? ) # Optional. True, if the user is allowed to send documents View source #can_send_documents? : Bool? # Optional. True, if the user is allowed to send documents View source #can_send_messages= ( can_send_messages : Bool? ) # Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source #can_send_messages? : Bool? # Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source #can_send_other_messages= ( can_send_other_messages : Bool? ) # Optional. True, if the user is allowed to send animations, games, stickers and use inline bots View source #can_send_other_messages? : Bool? # Optional. True, if the user is allowed to send animations, games, stickers and use inline bots View source #can_send_photos= ( can_send_photos : Bool? ) # Optional. True, if the user is allowed to send photos View source #can_send_photos? : Bool? # Optional. True, if the user is allowed to send photos View source #can_send_polls= ( can_send_polls : Bool? ) # Optional. True, if the user is allowed to send polls View source #can_send_polls? : Bool? # Optional. True, if the user is allowed to send polls View source #can_send_video_notes= ( can_send_video_notes : Bool? ) # Optional. True, if the user is allowed to send video notes View source #can_send_video_notes? : Bool? # Optional. True, if the user is allowed to send video notes View source #can_send_videos= ( can_send_videos : Bool? ) # Optional. True, if the user is allowed to send videos View source #can_send_videos? : Bool? # Optional. True, if the user is allowed to send videos View source #can_send_voice_notes= ( can_send_voice_notes : Bool? ) # Optional. True, if the user is allowed to send voice notes View source #can_send_voice_notes? : Bool? # Optional. True, if the user is allowed to send voice notes View source","title":"ChatPermissions"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions","text":"Describes actions that a non-administrator user is allowed to take in a chat.","title":"ChatPermissions"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_add_web_page_previews=(can_add_web_page_previews)","text":"Optional. True, if the user is allowed to add web page previews to their messages View source","title":"#can_add_web_page_previews="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_add_web_page_previews?","text":"Optional. True, if the user is allowed to add web page previews to their messages View source","title":"#can_add_web_page_previews?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_change_info=(can_change_info)","text":"Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups View source","title":"#can_change_info="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_change_info?","text":"Optional. True, if the user is allowed to change the chat title, photo and other settings. Ignored in public supergroups View source","title":"#can_change_info?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_invite_users=(can_invite_users)","text":"Optional. True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_invite_users?","text":"Optional. True, if the user is allowed to invite new users to the chat View source","title":"#can_invite_users?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_manage_topics=(can_manage_topics)","text":"Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages View source","title":"#can_manage_topics="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_manage_topics?","text":"Optional. True, if the user is allowed to create forum topics. If omitted defaults to the value of can_pin_messages View source","title":"#can_manage_topics?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_pin_messages=(can_pin_messages)","text":"Optional. True, if the user is allowed to pin messages. Ignored in public supergroups View source","title":"#can_pin_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_pin_messages?","text":"Optional. True, if the user is allowed to pin messages. Ignored in public supergroups View source","title":"#can_pin_messages?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_audios=(can_send_audios)","text":"Optional. True, if the user is allowed to send audios View source","title":"#can_send_audios="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_audios?","text":"Optional. True, if the user is allowed to send audios View source","title":"#can_send_audios?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_documents=(can_send_documents)","text":"Optional. True, if the user is allowed to send documents View source","title":"#can_send_documents="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_documents?","text":"Optional. True, if the user is allowed to send documents View source","title":"#can_send_documents?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_messages=(can_send_messages)","text":"Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source","title":"#can_send_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_messages?","text":"Optional. True, if the user is allowed to send text messages, contacts, giveaways, giveaway winners, invoices, locations and venues View source","title":"#can_send_messages?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_other_messages=(can_send_other_messages)","text":"Optional. True, if the user is allowed to send animations, games, stickers and use inline bots View source","title":"#can_send_other_messages="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_other_messages?","text":"Optional. True, if the user is allowed to send animations, games, stickers and use inline bots View source","title":"#can_send_other_messages?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_photos=(can_send_photos)","text":"Optional. True, if the user is allowed to send photos View source","title":"#can_send_photos="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_photos?","text":"Optional. True, if the user is allowed to send photos View source","title":"#can_send_photos?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_polls=(can_send_polls)","text":"Optional. True, if the user is allowed to send polls View source","title":"#can_send_polls="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_polls?","text":"Optional. True, if the user is allowed to send polls View source","title":"#can_send_polls?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_video_notes=(can_send_video_notes)","text":"Optional. True, if the user is allowed to send video notes View source","title":"#can_send_video_notes="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_video_notes?","text":"Optional. True, if the user is allowed to send video notes View source","title":"#can_send_video_notes?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_videos=(can_send_videos)","text":"Optional. True, if the user is allowed to send videos View source","title":"#can_send_videos="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_videos?","text":"Optional. True, if the user is allowed to send videos View source","title":"#can_send_videos?"},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_voice_notes=(can_send_voice_notes)","text":"Optional. True, if the user is allowed to send voice notes View source","title":"#can_send_voice_notes="},{"location":"api_reference/Tourmaline/ChatPermissions/#Tourmaline::ChatPermissions#can_send_voice_notes?","text":"Optional. True, if the user is allowed to send voice notes View source","title":"#can_send_voice_notes?"},{"location":"api_reference/Tourmaline/ChatPhoto/","text":"class Tourmaline::ChatPhoto inherits Reference # This object represents a chat photo. Included modules JSON::Serializable Constructors # .new ( small_file_id , small_file_unique_id , big_file_id , big_file_unique_id ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #big_file_id : String # File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source #big_file_id= ( big_file_id : String ) # File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source #big_file_unique_id : String # Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #big_file_unique_id= ( big_file_unique_id : String ) # Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #small_file_id : String # File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source #small_file_id= ( small_file_id : String ) # File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source #small_file_unique_id : String # Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #small_file_unique_id= ( small_file_unique_id : String ) # Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"ChatPhoto"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto","text":"This object represents a chat photo.","title":"ChatPhoto"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto.new(small_file_id,small_file_unique_id,big_file_id,big_file_unique_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_id","text":"File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source","title":"#big_file_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_id=(big_file_id)","text":"File identifier of big (640x640) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source","title":"#big_file_id="},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_unique_id","text":"Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#big_file_unique_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#big_file_unique_id=(big_file_unique_id)","text":"Unique file identifier of big (640x640) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#big_file_unique_id="},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_id","text":"File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source","title":"#small_file_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_id=(small_file_id)","text":"File identifier of small (160x160) chat photo. This file_id can be used only for photo download and only for as long as the photo is not changed. View source","title":"#small_file_id="},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_unique_id","text":"Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#small_file_unique_id"},{"location":"api_reference/Tourmaline/ChatPhoto/#Tourmaline::ChatPhoto#small_file_unique_id=(small_file_unique_id)","text":"Unique file identifier of small (160x160) chat photo, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#small_file_unique_id="},{"location":"api_reference/Tourmaline/ChatShared/","text":"class Tourmaline::ChatShared inherits Reference # This object contains information about a chat that was shared with the bot using a KeyboardButtonRequestChat button. Included modules JSON::Serializable Constructors # .new ( request_id , chat_id , title : String? = nil , username : String? = nil , photo : Array ( Tourmaline::PhotoSize ) = [] of Tourmaline :: PhotoSize ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_id : Int32 | Int64 # Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means. View source #chat_id= ( chat_id : Int32 | Int64 ) # Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means. View source #photo : Array ( Tourmaline::PhotoSize ) # Optional. Available sizes of the chat photo, if the photo was requested by the bot View source #photo= ( photo : Array ( Tourmaline::PhotoSize )) # Optional. Available sizes of the chat photo, if the photo was requested by the bot View source #request_id : Int32 | Int64 # Identifier of the request View source #request_id= ( request_id : Int32 | Int64 ) # Identifier of the request View source #title : String? # Optional. Title of the chat, if the title was requested by the bot. View source #title= ( title : String? ) # Optional. Title of the chat, if the title was requested by the bot. View source #username : String? # Optional. Username of the chat, if the username was requested by the bot and available. View source #username= ( username : String? ) # Optional. Username of the chat, if the username was requested by the bot and available. View source","title":"ChatShared"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared","text":"This object contains information about a chat that was shared with the bot using a KeyboardButtonRequestChat button.","title":"ChatShared"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared.new(request_id,chat_id,title,username,photo)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#chat_id","text":"Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means. View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#chat_id=(chat_id)","text":"Identifier of the shared chat. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. The bot may not have access to the chat and could be unable to use this identifier, unless the chat is already known to the bot by some other means. View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#photo","text":"Optional. Available sizes of the chat photo, if the photo was requested by the bot View source","title":"#photo"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#photo=(photo)","text":"Optional. Available sizes of the chat photo, if the photo was requested by the bot View source","title":"#photo="},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#request_id","text":"Identifier of the request View source","title":"#request_id"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#request_id=(request_id)","text":"Identifier of the request View source","title":"#request_id="},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#title","text":"Optional. Title of the chat, if the title was requested by the bot. View source","title":"#title"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#title=(title)","text":"Optional. Title of the chat, if the title was requested by the bot. View source","title":"#title="},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#username","text":"Optional. Username of the chat, if the username was requested by the bot and available. View source","title":"#username"},{"location":"api_reference/Tourmaline/ChatShared/#Tourmaline::ChatShared#username=(username)","text":"Optional. Username of the chat, if the username was requested by the bot and available. View source","title":"#username="},{"location":"api_reference/Tourmaline/ChosenInlineResult/","text":"class Tourmaline::ChosenInlineResult inherits Reference # Represents a result of an inline query that was chosen by the user and sent to their chat partner. Note: It is necessary to enable inline feedback via @BotFather in order to receive these objects in updates. Included modules JSON::Serializable Constructors # .new ( result_id , from , query , location : Tourmaline::Location? = nil , inline_message_id : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #from : Tourmaline::User # The user that chose the result View source #from= ( from : Tourmaline::User ) # The user that chose the result View source #inline_message_id : String? # Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message. View source #inline_message_id= ( inline_message_id : String? ) # Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message. View source #location : Tourmaline::Location? # Optional. Sender location, only for bots that require user location View source #location= ( location : Tourmaline::Location? ) # Optional. Sender location, only for bots that require user location View source #query : String # The query that was used to obtain the result View source #query= ( query : String ) # The query that was used to obtain the result View source #result_id : String # The unique identifier for the result that was chosen View source #result_id= ( result_id : String ) # The unique identifier for the result that was chosen View source","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult","text":"Represents a result of an inline query that was chosen by the user and sent to their chat partner. Note: It is necessary to enable inline feedback via @BotFather in order to receive these objects in updates.","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult.new(result_id,from,query,location,inline_message_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#from","text":"The user that chose the result View source","title":"#from"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#from=(from)","text":"The user that chose the result View source","title":"#from="},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#inline_message_id","text":"Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message. View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#inline_message_id=(inline_message_id)","text":"Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. Will be also received in callback queries and can be used to edit the message. View source","title":"#inline_message_id="},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#location","text":"Optional. Sender location, only for bots that require user location View source","title":"#location"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#location=(location)","text":"Optional. Sender location, only for bots that require user location View source","title":"#location="},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#query","text":"The query that was used to obtain the result View source","title":"#query"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#query=(query)","text":"The query that was used to obtain the result View source","title":"#query="},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#result_id","text":"The unique identifier for the result that was chosen View source","title":"#result_id"},{"location":"api_reference/Tourmaline/ChosenInlineResult/#Tourmaline::ChosenInlineResult#result_id=(result_id)","text":"The unique identifier for the result that was chosen View source","title":"#result_id="},{"location":"api_reference/Tourmaline/Client/","text":"class Tourmaline::Client inherits Reference # The Client class is the base class for all Tourmaline based bots. Extend this class to create your own bots, or create an instance of Client and add event handlers to it. Included modules Tourmaline::Client::Api Tourmaline::Logger Constants # DEFAULT_API_URL = \"https://api.telegram.org/\" # Constructors # .new ( bot_token : String , endpoint = DEFAULT_API_URL , default_parse_mode : ParseMode = ParseMode :: Markdown , pool_capacity = 200 , initial_pool_size = 20 , pool_timeout = 0.1 , proxy = nil , proxy_uri = nil , proxy_host = nil , proxy_port = nil , proxy_user = nil , proxy_pass = nil ) # Create a new instance of Tourmaline::Client . Named Arguments # bot_token the bot token you should've received from @BotFather endpoint the API endpoint to use for requests; default is https://api.telegram.org , but for TDLight methods to work you may consider hosting your own instance or using one of the official ones such as https://telegram.rest default_parse_mode the default parse mode to use for messages; default is ParseMode::None (no formatting) pool_capacity the maximum number of concurrent HTTP connections to use initial_pool_size the number of HTTP::Client instances to create on init pool_timeout How long to wait for a new client to be available if the pool is full before throwing a TimeoutError proxy an instance of HTTP::Proxy::Client to use; if set, overrides the following proxy_ args proxy_uri a URI to use when connecting to the proxy; can be a URI instance or a String proxy_host if no proxy_uri is provided, this will be the host for the URI proxy_port if no proxy_uri is provided, this will be the port for the URI proxy_user a username to use for a proxy that requires authentication proxy_pass a password to use for a proxy that requires authentication View source Class methods # .build_inline_keyboard_markup ( * args , columns = nil , ** options , & block : InlineKeyboardMarkupBuilder -> ) # View source .build_inline_query_result ( & block : InlineQueryResultBuilder -> ) # View source .build_reply_keyboard_markup ( * args , columns = nil , ** options , & block : ReplyKeyboardMarkupBuilder -> ) # View source Methods # #bot : User # Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source #bot? : User? # Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source #bot_token : String # View source #build_inline_keyboard_markup ( * args , columns = nil , ** options , & block : InlineKeyboardMarkupBuilder -> ) # View source #build_inline_query_result ( & block : InlineQueryResultBuilder -> ) # View source #build_reply_keyboard_markup ( * args , columns = nil , ** options , & block : ReplyKeyboardMarkupBuilder -> ) # View source #default_parse_mode : ParseMode # View source #default_parse_mode= ( default_parse_mode : ParseMode ) # View source #dispatcher # View source #on ( action : UpdateAction , & block : Context -> ) # View source #on ( * actions : Symbol | UpdateAction , & block : Context -> ) # View source #poll # View source #register ( * handlers : EventHandler ) # View source #request ( type : U . class , method , params = {} of String => String ) forall U # Sends a request to the Telegram Client API. Returns the response, parsed as a U . View source #request_raw ( method : String , params = {} of String => String ) # Sends a request to the Telegram Client API. Returns the raw response. View source #serve ( path = \"/\" , host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil , no_middleware_check = false ) # View source #use ( middleware : Middleware ) # View source","title":"Client"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client","text":"The Client class is the base class for all Tourmaline based bots. Extend this class to create your own bots, or create an instance of Client and add event handlers to it.","title":"Client"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client::DEFAULT_API_URL","text":"","title":"DEFAULT_API_URL"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.new(bot_token,endpoint,default_parse_mode,pool_capacity,initial_pool_size,pool_timeout,proxy,proxy_uri,proxy_host,proxy_port,proxy_user,proxy_pass)","text":"Create a new instance of Tourmaline::Client .","title":".new"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.new(bot_token,endpoint,default_parse_mode,pool_capacity,initial_pool_size,pool_timeout,proxy,proxy_uri,proxy_host,proxy_port,proxy_user,proxy_pass)--named-arguments","text":"bot_token the bot token you should've received from @BotFather endpoint the API endpoint to use for requests; default is https://api.telegram.org , but for TDLight methods to work you may consider hosting your own instance or using one of the official ones such as https://telegram.rest default_parse_mode the default parse mode to use for messages; default is ParseMode::None (no formatting) pool_capacity the maximum number of concurrent HTTP connections to use initial_pool_size the number of HTTP::Client instances to create on init pool_timeout How long to wait for a new client to be available if the pool is full before throwing a TimeoutError proxy an instance of HTTP::Proxy::Client to use; if set, overrides the following proxy_ args proxy_uri a URI to use when connecting to the proxy; can be a URI instance or a String proxy_host if no proxy_uri is provided, this will be the host for the URI proxy_port if no proxy_uri is provided, this will be the port for the URI proxy_user a username to use for a proxy that requires authentication proxy_pass a password to use for a proxy that requires authentication View source","title":"Named Arguments"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.build_inline_keyboard_markup(*,columns,**,&)","text":"View source","title":".build_inline_keyboard_markup"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.build_inline_query_result(&)","text":"View source","title":".build_inline_query_result"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client.build_reply_keyboard_markup(*,columns,**,&)","text":"View source","title":".build_reply_keyboard_markup"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot","text":"Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source","title":"#bot"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot?","text":"Gets the name of the Client at the time the Client was started. Refreshing can be done by setting @bot to get_me . View source","title":"#bot?"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#bot_token","text":"View source","title":"#bot_token"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#build_inline_keyboard_markup(*,columns,**,&)","text":"View source","title":"#build_inline_keyboard_markup"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#build_inline_query_result(&)","text":"View source","title":"#build_inline_query_result"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#build_reply_keyboard_markup(*,columns,**,&)","text":"View source","title":"#build_reply_keyboard_markup"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#default_parse_mode","text":"View source","title":"#default_parse_mode"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#default_parse_mode=(default_parse_mode)","text":"View source","title":"#default_parse_mode="},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#dispatcher","text":"View source","title":"#dispatcher"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#on(action,&)","text":"View source","title":"#on"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#poll","text":"View source","title":"#poll"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#register(*)","text":"View source","title":"#register"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#request(type,method,params)","text":"Sends a request to the Telegram Client API. Returns the response, parsed as a U . View source","title":"#request"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#request_raw(method,params)","text":"Sends a request to the Telegram Client API. Returns the raw response. View source","title":"#request_raw"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#serve(path,host,port,ssl_certificate_path,ssl_key_path,no_middleware_check)","text":"View source","title":"#serve"},{"location":"api_reference/Tourmaline/Client/#Tourmaline::Client#use(middleware)","text":"View source","title":"#use"},{"location":"api_reference/Tourmaline/Client/Api/","text":"module Tourmaline::Client::Api # Direct including types Tourmaline::Client Methods # #add_sticker_to_set ( user_id : Int32 | Int64 , name : String , sticker : Tourmaline::InputSticker ) # Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns True on success. View source #answer_callback_query ( callback_query_id : String , text : String? = nil , show_alert : Bool? = nil , url : String? = nil , cache_time : Int32 | Int64 | Nil = nil ) # Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned. View source #answer_inline_query ( inline_query_id : String , results : Array ( Tourmaline::InlineQueryResult ), cache_time : Int32 | Int64 | Nil = nil , is_personal : Bool? = nil , next_offset : String? = nil , button : Tourmaline::InlineQueryResultsButton? = nil ) # Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed. View source #answer_pre_checkout_query ( pre_checkout_query_id : String , ok : Bool , error_message : String? = nil ) # Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent. View source #answer_shipping_query ( shipping_query_id : String , ok : Bool , shipping_options : Array ( Tourmaline::ShippingOption )? = nil , error_message : String? = nil ) # If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned. View source #answer_web_app_query ( web_app_query_id : String , result : Tourmaline::InlineQueryResult ) # Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned. View source #approve_chat_join_request ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 ) # Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source #ban_chat_member ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 , until_date : Int32 | Int64 | Nil = nil , revoke_messages : Bool? = nil ) # Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source #ban_chat_sender_chat ( chat_id : Int32 | Int64 | String , sender_chat_id : Int32 | Int64 ) # Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success. View source #close # Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters. View source #close_forum_topic ( chat_id : Int32 | Int64 | String , message_thread_id : Int32 | Int64 ) # Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source #close_general_forum_topic ( chat_id : Int32 | Int64 | String ) # Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success. View source #copy_message ( chat_id : Int32 | Int64 | String , from_chat_id : Int32 | Int64 | String , message_id : Int32 | Int64 , message_thread_id : Int32 | Int64 | Nil = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to copy messages of any kind. Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success. View source #copy_messages ( chat_id : Int32 | Int64 | String , from_chat_id : Int32 | Int64 | String , message_ids : Array ( Int32 | Int64 ), message_thread_id : Int32 | Int64 | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , remove_caption : Bool? = nil ) # Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessages, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages. On success, an array of MessageId of the sent messages is returned. View source #create_chat_invite_link ( chat_id : Int32 | Int64 | String , name : String? = nil , expire_date : Int32 | Int64 | Nil = nil , member_limit : Int32 | Int64 | Nil = nil , creates_join_request : Bool? = nil ) # Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. View source #create_forum_topic ( chat_id : Int32 | Int64 | String , name : String , icon_color : Int32 | Int64 | Nil = nil , icon_custom_emoji_id : String? = nil ) # Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object. View source #create_invoice_link ( title : String , description : String , payload : String , provider_token : String , currency : String , prices : Array ( Tourmaline::LabeledPrice ), max_tip_amount : Int32 | Int64 | Nil = nil , suggested_tip_amounts : Array ( Int32 | Int64 )? = nil , provider_data : String? = nil , photo_url : String? = nil , photo_size : Int32 | Int64 | Nil = nil , photo_width : Int32 | Int64 | Nil = nil , photo_height : Int32 | Int64 | Nil = nil , need_name : Bool? = nil , need_phone_number : Bool? = nil , need_email : Bool? = nil , need_shipping_address : Bool? = nil , send_phone_number_to_provider : Bool? = nil , send_email_to_provider : Bool? = nil , is_flexible : Bool? = nil ) # Use this method to create a link for an invoice. Returns the created invoice link as String on success. View source #create_new_sticker_set ( user_id : Int32 | Int64 , name : String , title : String , stickers : Array ( Tourmaline::InputSticker ), sticker_type : String? = nil , needs_repainting : Bool? = nil ) # Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success. View source #decline_chat_join_request ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 ) # Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source #delete_chat_photo ( chat_id : Int32 | Int64 | String ) # Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source #delete_chat_sticker_set ( chat_id : Int32 | Int64 | String ) # Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success. View source #delete_forum_topic ( chat_id : Int32 | Int64 | String , message_thread_id : Int32 | Int64 ) # Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success. View source #delete_message ( chat_id : Int32 | Int64 | String , message_id : Int32 | Int64 ) # Use this method to delete a message, including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Service messages about a supergroup, channel, or forum topic creation can't be deleted. - A dice message in a private chat can only be deleted if it was sent more than 24 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns True on success. View source #delete_messages ( chat_id : Int32 | Int64 | String , message_ids : Array ( Int32 | Int64 )) # Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped. Returns True on success. View source #delete_my_commands ( scope : Tourmaline::BotCommandScope? = nil , language_code : String? = nil ) # Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success. View source #delete_sticker_from_set ( sticker : String ) # Use this method to delete a sticker from a set created by the bot. Returns True on success. View source #delete_sticker_set ( name : String ) # Use this method to delete a sticker set that was created by the bot. Returns True on success. View source #delete_webhook ( drop_pending_updates : Bool? = nil ) # Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success. View source #edit_chat_invite_link ( chat_id : Int32 | Int64 | String , invite_link : String , name : String? = nil , expire_date : Int32 | Int64 | Nil = nil , member_limit : Int32 | Int64 | Nil = nil , creates_join_request : Bool? = nil ) # Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object. View source #edit_forum_topic ( chat_id : Int32 | Int64 | String , message_thread_id : Int32 | Int64 , name : String? = nil , icon_custom_emoji_id : String? = nil ) # Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source #edit_general_forum_topic ( chat_id : Int32 | Int64 | String , name : String ) # Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success. View source #edit_message_caption ( chat_id : Int32 | Int64 | String | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source #edit_message_live_location ( latitude : Float64 , longitude : Float64 , chat_id : Int32 | Int64 | String | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil , live_period : Int32 | Int64 | Nil = nil , horizontal_accuracy : Float64? = nil , heading : Int32 | Int64 | Nil = nil , proximity_alert_radius : Int32 | Int64 | Nil = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source #edit_message_media ( media : Tourmaline::InputMedia , chat_id : Int32 | Int64 | String | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source #edit_message_reply_markup ( chat_id : Int32 | Int64 | String | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source #edit_message_text ( text : String , chat_id : Int32 | Int64 | String | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil , parse_mode : ParseMode = default_parse_mode , entities : Array ( Tourmaline::MessageEntity )? = nil , link_preview_options : Tourmaline::LinkPreviewOptions? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source #export_chat_invite_link ( chat_id : Int32 | Int64 | String ) # Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success. View source #forward_message ( chat_id : Int32 | Int64 | String , from_chat_id : Int32 | Int64 | String , message_id : Int32 | Int64 , message_thread_id : Int32 | Int64 | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil ) # Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded. On success, the sent Message is returned. View source #forward_messages ( chat_id : Int32 | Int64 | String , from_chat_id : Int32 | Int64 | String , message_ids : Array ( Int32 | Int64 ), message_thread_id : Int32 | Int64 | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil ) # Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages. On success, an array of MessageId of the sent messages is returned. View source #get_business_connection ( business_connection_id : String ) # Use this method to get information about the connection of the bot with a business account. Returns a BusinessConnection object on success. View source #get_chat ( chat_id : Int32 | Int64 | String ) # Use this method to get up-to-date information about the chat. Returns a ChatFullInfo object on success. View source #get_chat_administrators ( chat_id : Int32 | Int64 | String ) # Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects. View source #get_chat_member ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 ) # Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success. View source #get_chat_member_count ( chat_id : Int32 | Int64 | String ) # Use this method to get the number of members in a chat. Returns Int on success. View source #get_chat_menu_button ( chat_id : Int32 | Int64 | Nil = nil ) # Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success. View source #get_custom_emoji_stickers ( custom_emoji_ids : Array ( String )) # Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects. View source #get_file ( file_id : String ) # Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot <token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again. Note: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received. View source #get_forum_topic_icon_stickers # Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects. View source #get_game_high_scores ( user_id : Int32 | Int64 , chat_id : Int32 | Int64 | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil ) # Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects. View source #get_me # A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object. View source #get_my_commands ( scope : Tourmaline::BotCommandScope? = nil , language_code : String? = nil ) # Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned. View source #get_my_default_administrator_rights ( for_channels : Bool? = nil ) # Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success. View source #get_my_description ( language_code : String? = nil ) # Use this method to get the current bot description for the given user language. Returns BotDescription on success. View source #get_my_name ( language_code : String? = nil ) # Use this method to get the current bot name for the given user language. Returns BotName on success. View source #get_my_short_description ( language_code : String? = nil ) # Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success. View source #get_sticker_set ( name : String ) # Use this method to get a sticker set. On success, a StickerSet object is returned. View source #get_updates ( offset : Int32 | Int64 | Nil = nil , limit : Int32 | Int64 | Nil = nil , timeout : Int32 | Int64 | Nil = nil , allowed_updates : Array ( String )? = nil ) # Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects. View source #get_user_chat_boosts ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 ) # Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a UserChatBoosts object. View source #get_user_profile_photos ( user_id : Int32 | Int64 , offset : Int32 | Int64 | Nil = nil , limit : Int32 | Int64 | Nil = nil ) # Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. View source #get_webhook_info # Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty. View source #hide_general_forum_topic ( chat_id : Int32 | Int64 | String ) # Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success. View source #leave_chat ( chat_id : Int32 | Int64 | String ) # Use this method for your bot to leave a group, supergroup or channel. Returns True on success. View source #log_out # Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters. View source #pin_chat_message ( chat_id : Int32 | Int64 | String , message_id : Int32 | Int64 , disable_notification : Bool? = nil ) # Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. View source #promote_chat_member ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 , is_anonymous : Bool? = nil , can_manage_chat : Bool? = nil , can_delete_messages : Bool? = nil , can_manage_video_chats : Bool? = nil , can_restrict_members : Bool? = nil , can_promote_members : Bool? = nil , can_change_info : Bool? = nil , can_invite_users : Bool? = nil , can_post_stories : Bool? = nil , can_edit_stories : Bool? = nil , can_delete_stories : Bool? = nil , can_post_messages : Bool? = nil , can_edit_messages : Bool? = nil , can_pin_messages : Bool? = nil , can_manage_topics : Bool? = nil ) # Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success. View source #reopen_forum_topic ( chat_id : Int32 | Int64 | String , message_thread_id : Int32 | Int64 ) # Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source #reopen_general_forum_topic ( chat_id : Int32 | Int64 | String ) # Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success. View source #replace_sticker_in_set ( user_id : Int32 | Int64 , name : String , old_sticker : String , sticker : Tourmaline::InputSticker ) # Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling deleteStickerFromSet, then addStickerToSet, then setStickerPositionInSet. Returns True on success. View source #restrict_chat_member ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 , permissions : Tourmaline::ChatPermissions , use_independent_chat_permissions : Bool? = nil , until_date : Int32 | Int64 | Nil = nil ) # Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success. View source #revoke_chat_invite_link ( chat_id : Int32 | Int64 | String , invite_link : String ) # Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object. View source #send_animation ( chat_id : Int32 | Int64 | String , animation : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , duration : Int32 | Int64 | Nil = nil , width : Int32 | Int64 | Nil = nil , height : Int32 | Int64 | Nil = nil , thumbnail : :: File | String | Nil = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , has_spoiler : Bool? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future. View source #send_audio ( chat_id : Int32 | Int64 | String , audio : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , duration : Int32 | Int64 | Nil = nil , performer : String? = nil , title : String? = nil , thumbnail : :: File | String | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the sendVoice method instead. View source #send_chat_action ( chat_id : Int32 | Int64 | String , action : String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil ) # Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive. View source #send_contact ( chat_id : Int32 | Int64 | String , phone_number : String , first_name : String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , last_name : String? = nil , vcard : String? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send phone contacts. On success, the sent Message is returned. View source #send_dice ( chat_id : Int32 | Int64 | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , emoji : String? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned. View source #send_document ( chat_id : Int32 | Int64 | String , document : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , thumbnail : :: File | String | Nil = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , disable_content_type_detection : Bool? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. View source #send_game ( chat_id : Int32 | Int64 , game_short_name : String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to send a game. On success, the sent Message is returned. View source #send_invoice ( chat_id : Int32 | Int64 | String , title : String , description : String , payload : String , provider_token : String , currency : String , prices : Array ( Tourmaline::LabeledPrice ), message_thread_id : Int32 | Int64 | Nil = nil , max_tip_amount : Int32 | Int64 | Nil = nil , suggested_tip_amounts : Array ( Int32 | Int64 )? = nil , start_parameter : String? = nil , provider_data : String? = nil , photo_url : String? = nil , photo_size : Int32 | Int64 | Nil = nil , photo_width : Int32 | Int64 | Nil = nil , photo_height : Int32 | Int64 | Nil = nil , need_name : Bool? = nil , need_phone_number : Bool? = nil , need_email : Bool? = nil , need_shipping_address : Bool? = nil , send_phone_number_to_provider : Bool? = nil , send_email_to_provider : Bool? = nil , is_flexible : Bool? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to send invoices. On success, the sent Message is returned. View source #send_location ( chat_id : Int32 | Int64 | String , latitude : Float64 , longitude : Float64 , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , horizontal_accuracy : Float64? = nil , live_period : Int32 | Int64 | Nil = nil , heading : Int32 | Int64 | Nil = nil , proximity_alert_radius : Int32 | Int64 | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send point on the map. On success, the sent Message is returned. View source #send_media_group ( chat_id : Int32 | Int64 | String , media : Array ( Tourmaline::InputMediaAudio ) | Array ( Tourmaline::InputMediaDocument ) | Array ( Tourmaline::InputMediaPhoto ) | Array ( Tourmaline::InputMediaVideo ), business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil ) # Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned. View source #send_message ( chat_id : Int32 | Int64 | String , text : String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , parse_mode : ParseMode = default_parse_mode , entities : Array ( Tourmaline::MessageEntity )? = nil , link_preview_options : Tourmaline::LinkPreviewOptions? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send text messages. On success, the sent Message is returned. View source #send_photo ( chat_id : Int32 | Int64 | String , photo : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , has_spoiler : Bool? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send photos. On success, the sent Message is returned. View source #send_poll ( chat_id : Int32 | Int64 | String , question : String , options : Array ( Tourmaline::InputPollOption ), business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , question_parse_mode : String? = nil , question_entities : Array ( Tourmaline::MessageEntity )? = nil , is_anonymous : Bool? = nil , type : String? = nil , allows_multiple_answers : Bool? = nil , correct_option_id : Int32 | Int64 | Nil = nil , explanation : String? = nil , explanation_parse_mode : String? = nil , explanation_entities : Array ( Tourmaline::MessageEntity )? = nil , open_period : Int32 | Int64 | Nil = nil , close_date : Int32 | Int64 | Nil = nil , is_closed : Bool? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send a native poll. On success, the sent Message is returned. View source #send_sticker ( chat_id : Int32 | Int64 | String , sticker : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , emoji : String? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned. View source #send_venue ( chat_id : Int32 | Int64 | String , latitude : Float64 , longitude : Float64 , title : String , address : String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , foursquare_id : String? = nil , foursquare_type : String? = nil , google_place_id : String? = nil , google_place_type : String? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send information about a venue. On success, the sent Message is returned. View source #send_video ( chat_id : Int32 | Int64 | String , video : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , duration : Int32 | Int64 | Nil = nil , width : Int32 | Int64 | Nil = nil , height : Int32 | Int64 | Nil = nil , thumbnail : :: File | String | Nil = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , has_spoiler : Bool? = nil , supports_streaming : Bool? = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. View source #send_video_note ( chat_id : Int32 | Int64 | String , video_note : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , duration : Int32 | Int64 | Nil = nil , length : Int32 | Int64 | Nil = nil , thumbnail : :: File | String | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. View source #send_voice ( chat_id : Int32 | Int64 | String , voice : :: File | String , business_connection_id : String? = nil , message_thread_id : Int32 | Int64 | Nil = nil , caption : String? = nil , parse_mode : ParseMode = default_parse_mode , caption_entities : Array ( Tourmaline::MessageEntity )? = nil , duration : Int32 | Int64 | Nil = nil , disable_notification : Bool? = nil , protect_content : Bool? = nil , reply_parameters : Tourmaline::ReplyParameters? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup | Tourmaline::ReplyKeyboardMarkup | Tourmaline::ReplyKeyboardRemove | Tourmaline::ForceReply | Nil = nil ) # Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. View source #set_chat_administrator_custom_title ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 , custom_title : String ) # Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success. View source #set_chat_description ( chat_id : Int32 | Int64 | String , description : String? = nil ) # Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source #set_chat_menu_button ( chat_id : Int32 | Int64 | Nil = nil , menu_button : Tourmaline::MenuButton? = nil ) # Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success. View source #set_chat_permissions ( chat_id : Int32 | Int64 | String , permissions : Tourmaline::ChatPermissions , use_independent_chat_permissions : Bool? = nil ) # Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success. View source #set_chat_photo ( chat_id : Int32 | Int64 | String , photo : :: File ) # Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source #set_chat_sticker_set ( chat_id : Int32 | Int64 | String , sticker_set_name : String ) # Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success. View source #set_chat_title ( chat_id : Int32 | Int64 | String , title : String ) # Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source #set_custom_emoji_sticker_set_thumbnail ( name : String , custom_emoji_id : String? = nil ) # Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success. View source #set_game_score ( user_id : Int32 | Int64 , score : Int32 | Int64 , force : Bool? = nil , disable_edit_message : Bool? = nil , chat_id : Int32 | Int64 | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil ) # Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False. View source #set_message_reaction ( chat_id : Int32 | Int64 | String , message_id : Int32 | Int64 , reaction : Array ( Tourmaline::ReactionType )? = nil , is_big : Bool? = nil ) # Use this method to change the chosen reactions on a message. Service messages can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Returns True on success. View source #set_my_commands ( commands : Array ( Tourmaline::BotCommand ), scope : Tourmaline::BotCommandScope? = nil , language_code : String? = nil ) # Use this method to change the list of the bot's commands. See this manual for more details about bot commands. Returns True on success. View source #set_my_default_administrator_rights ( rights : Tourmaline::ChatAdministratorRights? = nil , for_channels : Bool? = nil ) # Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success. View source #set_my_description ( description : String? = nil , language_code : String? = nil ) # Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success. View source #set_my_name ( name : String? = nil , language_code : String? = nil ) # Use this method to change the bot's name. Returns True on success. View source #set_my_short_description ( short_description : String? = nil , language_code : String? = nil ) # Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success. View source #set_passport_data_errors ( user_id : Int32 | Int64 , errors : Array ( Tourmaline::PassportElementError )) # Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues. View source #set_sticker_emoji_list ( sticker : String , emoji_list : Array ( String )) # Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source #set_sticker_keywords ( sticker : String , keywords : Array ( String )? = nil ) # Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source #set_sticker_mask_position ( sticker : String , mask_position : Tourmaline::MaskPosition? = nil ) # Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success. View source #set_sticker_position_in_set ( sticker : String , position : Int32 | Int64 ) # Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success. View source #set_sticker_set_thumbnail ( name : String , user_id : Int32 | Int64 , format : String , thumbnail : :: File | String | Nil = nil ) # Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success. View source #set_sticker_set_title ( name : String , title : String ) # Use this method to set the title of a created sticker set. Returns True on success. View source #set_webhook ( url : String , certificate : :: File? = nil , ip_address : String? = nil , max_connections : Int32 | Int64 | Nil = nil , allowed_updates : Array ( String )? = nil , drop_pending_updates : Bool? = nil , secret_token : String? = nil ) # Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success. If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header \"X-Telegram-Bot-Api-Secret-Token\" with the secret token as content. View source #stop_message_live_location ( chat_id : Int32 | Int64 | String | Nil = nil , message_id : Int32 | Int64 | Nil = nil , inline_message_id : String? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned. View source #stop_poll ( chat_id : Int32 | Int64 | String , message_id : Int32 | Int64 , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned. View source #unban_chat_member ( chat_id : Int32 | Int64 | String , user_id : Int32 | Int64 , only_if_banned : Bool? = nil ) # Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success. View source #unban_chat_sender_chat ( chat_id : Int32 | Int64 | String , sender_chat_id : Int32 | Int64 ) # Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success. View source #unhide_general_forum_topic ( chat_id : Int32 | Int64 | String ) # Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success. View source #unpin_all_chat_messages ( chat_id : Int32 | Int64 | String ) # Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. View source #unpin_all_forum_topic_messages ( chat_id : Int32 | Int64 | String , message_thread_id : Int32 | Int64 ) # Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. View source #unpin_all_general_forum_topic_messages ( chat_id : Int32 | Int64 | String ) # Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. View source #unpin_chat_message ( chat_id : Int32 | Int64 | String , message_id : Int32 | Int64 | Nil = nil ) # Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. View source #upload_sticker_file ( user_id : Int32 | Int64 , sticker : :: File , sticker_format : String ) # Use this method to upload a file with a sticker for later use in the createNewStickerSet, addStickerToSet, or replaceStickerInSet methods (the file can be used multiple times). Returns the uploaded File on success. View source","title":"Api"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api","text":"","title":"Api"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#add_sticker_to_set(user_id,name,sticker)","text":"Use this method to add a new sticker to a set created by the bot. Emoji sticker sets can have up to 200 stickers. Other sticker sets can have up to 120 stickers. Returns True on success. View source","title":"#add_sticker_to_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#answer_callback_query(callback_query_id,text,show_alert,url,cache_time)","text":"Use this method to send answers to callback queries sent from inline keyboards. The answer will be displayed to the user as a notification at the top of the chat screen or as an alert. On success, True is returned. View source","title":"#answer_callback_query"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#answer_inline_query(inline_query_id,results,cache_time,is_personal,next_offset,button)","text":"Use this method to send answers to an inline query. On success, True is returned. No more than 50 results per query are allowed. View source","title":"#answer_inline_query"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#answer_pre_checkout_query(pre_checkout_query_id,ok,error_message)","text":"Once the user has confirmed their payment and shipping details, the Bot API sends the final confirmation in the form of an Update with the field pre_checkout_query. Use this method to respond to such pre-checkout queries. On success, True is returned. Note: The Bot API must receive an answer within 10 seconds after the pre-checkout query was sent. View source","title":"#answer_pre_checkout_query"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#answer_shipping_query(shipping_query_id,ok,shipping_options,error_message)","text":"If you sent an invoice requesting a shipping address and the parameter is_flexible was specified, the Bot API will send an Update with a shipping_query field to the bot. Use this method to reply to shipping queries. On success, True is returned. View source","title":"#answer_shipping_query"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#answer_web_app_query(web_app_query_id,result)","text":"Use this method to set the result of an interaction with a Web App and send a corresponding message on behalf of the user to the chat from which the query originated. On success, a SentWebAppMessage object is returned. View source","title":"#answer_web_app_query"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#approve_chat_join_request(chat_id,user_id)","text":"Use this method to approve a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source","title":"#approve_chat_join_request"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#ban_chat_member(chat_id,user_id,until_date,revoke_messages)","text":"Use this method to ban a user in a group, a supergroup or a channel. In the case of supergroups and channels, the user will not be able to return to the chat on their own using invite links, etc., unless unbanned first. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#ban_chat_member"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#ban_chat_sender_chat(chat_id,sender_chat_id)","text":"Use this method to ban a channel chat in a supergroup or a channel. Until the chat is unbanned, the owner of the banned chat won't be able to send messages on behalf of any of their channels. The bot must be an administrator in the supergroup or channel for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#ban_chat_sender_chat"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#close","text":"Use this method to close the bot instance before moving it from one local server to another. You need to delete the webhook before calling this method to ensure that the bot isn't launched again after server restart. The method will return error 429 in the first 10 minutes after the bot is launched. Returns True on success. Requires no parameters. View source","title":"#close"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#close_forum_topic(chat_id,message_thread_id)","text":"Use this method to close an open topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source","title":"#close_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#close_general_forum_topic(chat_id)","text":"Use this method to close an open 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success. View source","title":"#close_general_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#copy_message(chat_id,from_chat_id,message_id,message_thread_id,caption,parse_mode,caption_entities,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to copy messages of any kind. Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessage, but the copied message doesn't have a link to the original message. Returns the MessageId of the sent message on success. View source","title":"#copy_message"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#copy_messages(chat_id,from_chat_id,message_ids,message_thread_id,disable_notification,protect_content,remove_caption)","text":"Use this method to copy messages of any kind. If some of the specified messages can't be found or copied, they are skipped. Service messages, giveaway messages, giveaway winners messages, and invoice messages can't be copied. A quiz poll can be copied only if the value of the field correct_option_id is known to the bot. The method is analogous to the method forwardMessages, but the copied messages don't have a link to the original message. Album grouping is kept for copied messages. On success, an array of MessageId of the sent messages is returned. View source","title":"#copy_messages"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#create_chat_invite_link(chat_id,name,expire_date,member_limit,creates_join_request)","text":"Use this method to create an additional invite link for a chat. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. The link can be revoked using the method revokeChatInviteLink. Returns the new invite link as ChatInviteLink object. View source","title":"#create_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#create_forum_topic(chat_id,name,icon_color,icon_custom_emoji_id)","text":"Use this method to create a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns information about the created topic as a ForumTopic object. View source","title":"#create_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#create_invoice_link(title,description,payload,provider_token,currency,prices,max_tip_amount,suggested_tip_amounts,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_phone_number,need_email,need_shipping_address,send_phone_number_to_provider,send_email_to_provider,is_flexible)","text":"Use this method to create a link for an invoice. Returns the created invoice link as String on success. View source","title":"#create_invoice_link"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#create_new_sticker_set(user_id,name,title,stickers,sticker_type,needs_repainting)","text":"Use this method to create a new sticker set owned by a user. The bot will be able to edit the sticker set thus created. Returns True on success. View source","title":"#create_new_sticker_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#decline_chat_join_request(chat_id,user_id)","text":"Use this method to decline a chat join request. The bot must be an administrator in the chat for this to work and must have the can_invite_users administrator right. Returns True on success. View source","title":"#decline_chat_join_request"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_chat_photo(chat_id)","text":"Use this method to delete a chat photo. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#delete_chat_photo"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_chat_sticker_set(chat_id)","text":"Use this method to delete a group sticker set from a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success. View source","title":"#delete_chat_sticker_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_forum_topic(chat_id,message_thread_id)","text":"Use this method to delete a forum topic along with all its messages in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_delete_messages administrator rights. Returns True on success. View source","title":"#delete_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_message(chat_id,message_id)","text":"Use this method to delete a message, including service messages, with the following limitations: - A message can only be deleted if it was sent less than 48 hours ago. - Service messages about a supergroup, channel, or forum topic creation can't be deleted. - A dice message in a private chat can only be deleted if it was sent more than 24 hours ago. - Bots can delete outgoing messages in private chats, groups, and supergroups. - Bots can delete incoming messages in private chats. - Bots granted can_post_messages permissions can delete outgoing messages in channels. - If the bot is an administrator of a group, it can delete any message there. - If the bot has can_delete_messages permission in a supergroup or a channel, it can delete any message there. Returns True on success. View source","title":"#delete_message"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_messages(chat_id,message_ids)","text":"Use this method to delete multiple messages simultaneously. If some of the specified messages can't be found, they are skipped. Returns True on success. View source","title":"#delete_messages"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_my_commands(scope,language_code)","text":"Use this method to delete the list of the bot's commands for the given scope and user language. After deletion, higher level commands will be shown to affected users. Returns True on success. View source","title":"#delete_my_commands"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_sticker_from_set(sticker)","text":"Use this method to delete a sticker from a set created by the bot. Returns True on success. View source","title":"#delete_sticker_from_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_sticker_set(name)","text":"Use this method to delete a sticker set that was created by the bot. Returns True on success. View source","title":"#delete_sticker_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#delete_webhook(drop_pending_updates)","text":"Use this method to remove webhook integration if you decide to switch back to getUpdates. Returns True on success. View source","title":"#delete_webhook"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_chat_invite_link(chat_id,invite_link,name,expire_date,member_limit,creates_join_request)","text":"Use this method to edit a non-primary invite link created by the bot. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the edited invite link as a ChatInviteLink object. View source","title":"#edit_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_forum_topic(chat_id,message_thread_id,name,icon_custom_emoji_id)","text":"Use this method to edit name and icon of a topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source","title":"#edit_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_general_forum_topic(chat_id,name)","text":"Use this method to edit the name of the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have can_manage_topics administrator rights. Returns True on success. View source","title":"#edit_general_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_message_caption(chat_id,message_id,inline_message_id,caption,parse_mode,caption_entities,reply_markup)","text":"Use this method to edit captions of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source","title":"#edit_message_caption"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_message_live_location(latitude,longitude,chat_id,message_id,inline_message_id,live_period,horizontal_accuracy,heading,proximity_alert_radius,reply_markup)","text":"Use this method to edit live location messages. A location can be edited until its live_period expires or editing is explicitly disabled by a call to stopMessageLiveLocation. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source","title":"#edit_message_live_location"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_message_media(media,chat_id,message_id,inline_message_id,reply_markup)","text":"Use this method to edit animation, audio, document, photo, or video messages. If a message is part of a message album, then it can be edited only to an audio for audio albums, only to a document for document albums and to a photo or a video otherwise. When an inline message is edited, a new file can't be uploaded; use a previously uploaded file via its file_id or specify a URL. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source","title":"#edit_message_media"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_message_reply_markup(chat_id,message_id,inline_message_id,reply_markup)","text":"Use this method to edit only the reply markup of messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source","title":"#edit_message_reply_markup"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#edit_message_text(text,chat_id,message_id,inline_message_id,parse_mode,entities,link_preview_options,reply_markup)","text":"Use this method to edit text and game messages. On success, if the edited message is not an inline message, the edited Message is returned, otherwise True is returned. View source","title":"#edit_message_text"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#export_chat_invite_link(chat_id)","text":"Use this method to generate a new primary invite link for a chat; any previously generated primary link is revoked. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the new invite link as String on success. View source","title":"#export_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#forward_message(chat_id,from_chat_id,message_id,message_thread_id,disable_notification,protect_content)","text":"Use this method to forward messages of any kind. Service messages and messages with protected content can't be forwarded. On success, the sent Message is returned. View source","title":"#forward_message"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#forward_messages(chat_id,from_chat_id,message_ids,message_thread_id,disable_notification,protect_content)","text":"Use this method to forward multiple messages of any kind. If some of the specified messages can't be found or forwarded, they are skipped. Service messages and messages with protected content can't be forwarded. Album grouping is kept for forwarded messages. On success, an array of MessageId of the sent messages is returned. View source","title":"#forward_messages"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_business_connection(business_connection_id)","text":"Use this method to get information about the connection of the bot with a business account. Returns a BusinessConnection object on success. View source","title":"#get_business_connection"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_chat(chat_id)","text":"Use this method to get up-to-date information about the chat. Returns a ChatFullInfo object on success. View source","title":"#get_chat"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_chat_administrators(chat_id)","text":"Use this method to get a list of administrators in a chat, which aren't bots. Returns an Array of ChatMember objects. View source","title":"#get_chat_administrators"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_chat_member(chat_id,user_id)","text":"Use this method to get information about a member of a chat. The method is only guaranteed to work for other users if the bot is an administrator in the chat. Returns a ChatMember object on success. View source","title":"#get_chat_member"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_chat_member_count(chat_id)","text":"Use this method to get the number of members in a chat. Returns Int on success. View source","title":"#get_chat_member_count"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_chat_menu_button(chat_id)","text":"Use this method to get the current value of the bot's menu button in a private chat, or the default menu button. Returns MenuButton on success. View source","title":"#get_chat_menu_button"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_custom_emoji_stickers(custom_emoji_ids)","text":"Use this method to get information about custom emoji stickers by their identifiers. Returns an Array of Sticker objects. View source","title":"#get_custom_emoji_stickers"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_file(file_id)","text":"Use this method to get basic information about a file and prepare it for downloading. For the moment, bots can download files of up to 20MB in size. On success, a File object is returned. The file can then be downloaded via the link https://api.telegram.org/file/bot <token>/<file_path>, where <file_path> is taken from the response. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile again. Note: This function may not preserve the original file name and MIME type. You should save the file's MIME type and name (if available) when the File object is received. View source","title":"#get_file"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_forum_topic_icon_stickers","text":"Use this method to get custom emoji stickers, which can be used as a forum topic icon by any user. Requires no parameters. Returns an Array of Sticker objects. View source","title":"#get_forum_topic_icon_stickers"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_game_high_scores(user_id,chat_id,message_id,inline_message_id)","text":"Use this method to get data for high score tables. Will return the score of the specified user and several of their neighbors in a game. Returns an Array of GameHighScore objects. View source","title":"#get_game_high_scores"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_me","text":"A simple method for testing your bot's authentication token. Requires no parameters. Returns basic information about the bot in form of a User object. View source","title":"#get_me"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_my_commands(scope,language_code)","text":"Use this method to get the current list of the bot's commands for the given scope and user language. Returns an Array of BotCommand objects. If commands aren't set, an empty list is returned. View source","title":"#get_my_commands"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_my_default_administrator_rights(for_channels)","text":"Use this method to get the current default administrator rights of the bot. Returns ChatAdministratorRights on success. View source","title":"#get_my_default_administrator_rights"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_my_description(language_code)","text":"Use this method to get the current bot description for the given user language. Returns BotDescription on success. View source","title":"#get_my_description"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_my_name(language_code)","text":"Use this method to get the current bot name for the given user language. Returns BotName on success. View source","title":"#get_my_name"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_my_short_description(language_code)","text":"Use this method to get the current bot short description for the given user language. Returns BotShortDescription on success. View source","title":"#get_my_short_description"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_sticker_set(name)","text":"Use this method to get a sticker set. On success, a StickerSet object is returned. View source","title":"#get_sticker_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_updates(offset,limit,timeout,allowed_updates)","text":"Use this method to receive incoming updates using long polling (wiki). Returns an Array of Update objects. View source","title":"#get_updates"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_user_chat_boosts(chat_id,user_id)","text":"Use this method to get the list of boosts added to a chat by a user. Requires administrator rights in the chat. Returns a UserChatBoosts object. View source","title":"#get_user_chat_boosts"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_user_profile_photos(user_id,offset,limit)","text":"Use this method to get a list of profile pictures for a user. Returns a UserProfilePhotos object. View source","title":"#get_user_profile_photos"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#get_webhook_info","text":"Use this method to get current webhook status. Requires no parameters. On success, returns a WebhookInfo object. If the bot is using getUpdates, will return an object with the url field empty. View source","title":"#get_webhook_info"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#hide_general_forum_topic(chat_id)","text":"Use this method to hide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically closed if it was open. Returns True on success. View source","title":"#hide_general_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#leave_chat(chat_id)","text":"Use this method for your bot to leave a group, supergroup or channel. Returns True on success. View source","title":"#leave_chat"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#log_out","text":"Use this method to log out from the cloud Bot API server before launching the bot locally. You must log out the bot before running it locally, otherwise there is no guarantee that the bot will receive updates. After a successful call, you can immediately log in on a local server, but will not be able to log in back to the cloud Bot API server for 10 minutes. Returns True on success. Requires no parameters. View source","title":"#log_out"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#pin_chat_message(chat_id,message_id,disable_notification)","text":"Use this method to add a message to the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. View source","title":"#pin_chat_message"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#promote_chat_member(chat_id,user_id,is_anonymous,can_manage_chat,can_delete_messages,can_manage_video_chats,can_restrict_members,can_promote_members,can_change_info,can_invite_users,can_post_stories,can_edit_stories,can_delete_stories,can_post_messages,can_edit_messages,can_pin_messages,can_manage_topics)","text":"Use this method to promote or demote a user in a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Pass False for all boolean parameters to demote a user. Returns True on success. View source","title":"#promote_chat_member"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#reopen_forum_topic(chat_id,message_thread_id)","text":"Use this method to reopen a closed topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights, unless it is the creator of the topic. Returns True on success. View source","title":"#reopen_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#reopen_general_forum_topic(chat_id)","text":"Use this method to reopen a closed 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. The topic will be automatically unhidden if it was hidden. Returns True on success. View source","title":"#reopen_general_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#replace_sticker_in_set(user_id,name,old_sticker,sticker)","text":"Use this method to replace an existing sticker in a sticker set with a new one. The method is equivalent to calling deleteStickerFromSet, then addStickerToSet, then setStickerPositionInSet. Returns True on success. View source","title":"#replace_sticker_in_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#restrict_chat_member(chat_id,user_id,permissions,use_independent_chat_permissions,until_date)","text":"Use this method to restrict a user in a supergroup. The bot must be an administrator in the supergroup for this to work and must have the appropriate administrator rights. Pass True for all permissions to lift restrictions from a user. Returns True on success. View source","title":"#restrict_chat_member"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#revoke_chat_invite_link(chat_id,invite_link)","text":"Use this method to revoke an invite link created by the bot. If the primary link is revoked, a new link is automatically generated. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns the revoked invite link as ChatInviteLink object. View source","title":"#revoke_chat_invite_link"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_animation(chat_id,animation,business_connection_id,message_thread_id,duration,width,height,thumbnail,caption,parse_mode,caption_entities,has_spoiler,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send animation files (GIF or H.264/MPEG-4 AVC video without sound). On success, the sent Message is returned. Bots can currently send animation files of up to 50 MB in size, this limit may be changed in the future. View source","title":"#send_animation"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_audio(chat_id,audio,business_connection_id,message_thread_id,caption,parse_mode,caption_entities,duration,performer,title,thumbnail,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send audio files, if you want Telegram clients to display them in the music player. Your audio must be in the .MP3 or .M4A format. On success, the sent Message is returned. Bots can currently send audio files of up to 50 MB in size, this limit may be changed in the future. For sending voice messages, use the sendVoice method instead. View source","title":"#send_audio"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_chat_action(chat_id,action,business_connection_id,message_thread_id)","text":"Use this method when you need to tell the user that something is happening on the bot's side. The status is set for 5 seconds or less (when a message arrives from your bot, Telegram clients clear its typing status). Returns True on success. We only recommend using this method when a response from the bot will take a noticeable amount of time to arrive. View source","title":"#send_chat_action"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_contact(chat_id,phone_number,first_name,business_connection_id,message_thread_id,last_name,vcard,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send phone contacts. On success, the sent Message is returned. View source","title":"#send_contact"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_dice(chat_id,business_connection_id,message_thread_id,emoji,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send an animated emoji that will display a random value. On success, the sent Message is returned. View source","title":"#send_dice"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_document(chat_id,document,business_connection_id,message_thread_id,thumbnail,caption,parse_mode,caption_entities,disable_content_type_detection,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send general files. On success, the sent Message is returned. Bots can currently send files of any type of up to 50 MB in size, this limit may be changed in the future. View source","title":"#send_document"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_game(chat_id,game_short_name,business_connection_id,message_thread_id,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send a game. On success, the sent Message is returned. View source","title":"#send_game"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_invoice(chat_id,title,description,payload,provider_token,currency,prices,message_thread_id,max_tip_amount,suggested_tip_amounts,start_parameter,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_phone_number,need_email,need_shipping_address,send_phone_number_to_provider,send_email_to_provider,is_flexible,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send invoices. On success, the sent Message is returned. View source","title":"#send_invoice"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_location(chat_id,latitude,longitude,business_connection_id,message_thread_id,horizontal_accuracy,live_period,heading,proximity_alert_radius,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send point on the map. On success, the sent Message is returned. View source","title":"#send_location"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_media_group(chat_id,media,business_connection_id,message_thread_id,disable_notification,protect_content,reply_parameters)","text":"Use this method to send a group of photos, videos, documents or audios as an album. Documents and audio files can be only grouped in an album with messages of the same type. On success, an array of Messages that were sent is returned. View source","title":"#send_media_group"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_message(chat_id,text,business_connection_id,message_thread_id,parse_mode,entities,link_preview_options,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send text messages. On success, the sent Message is returned. View source","title":"#send_message"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_photo(chat_id,photo,business_connection_id,message_thread_id,caption,parse_mode,caption_entities,has_spoiler,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send photos. On success, the sent Message is returned. View source","title":"#send_photo"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_poll(chat_id,question,options,business_connection_id,message_thread_id,question_parse_mode,question_entities,is_anonymous,type,allows_multiple_answers,correct_option_id,explanation,explanation_parse_mode,explanation_entities,open_period,close_date,is_closed,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send a native poll. On success, the sent Message is returned. View source","title":"#send_poll"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_sticker(chat_id,sticker,business_connection_id,message_thread_id,emoji,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send static .WEBP, animated .TGS, or video .WEBM stickers. On success, the sent Message is returned. View source","title":"#send_sticker"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_venue(chat_id,latitude,longitude,title,address,business_connection_id,message_thread_id,foursquare_id,foursquare_type,google_place_id,google_place_type,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send information about a venue. On success, the sent Message is returned. View source","title":"#send_venue"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_video(chat_id,video,business_connection_id,message_thread_id,duration,width,height,thumbnail,caption,parse_mode,caption_entities,has_spoiler,supports_streaming,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send video files, Telegram clients support MPEG4 videos (other formats may be sent as Document). On success, the sent Message is returned. Bots can currently send video files of up to 50 MB in size, this limit may be changed in the future. View source","title":"#send_video"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_video_note(chat_id,video_note,business_connection_id,message_thread_id,duration,length,thumbnail,disable_notification,protect_content,reply_parameters,reply_markup)","text":"As of v.4.0, Telegram clients support rounded square MPEG4 videos of up to 1 minute long. Use this method to send video messages. On success, the sent Message is returned. View source","title":"#send_video_note"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#send_voice(chat_id,voice,business_connection_id,message_thread_id,caption,parse_mode,caption_entities,duration,disable_notification,protect_content,reply_parameters,reply_markup)","text":"Use this method to send audio files, if you want Telegram clients to display the file as a playable voice message. For this to work, your audio must be in an .OGG file encoded with OPUS, or in .MP3 format, or in .M4A format (other formats may be sent as Audio or Document). On success, the sent Message is returned. Bots can currently send voice messages of up to 50 MB in size, this limit may be changed in the future. View source","title":"#send_voice"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_chat_administrator_custom_title(chat_id,user_id,custom_title)","text":"Use this method to set a custom title for an administrator in a supergroup promoted by the bot. Returns True on success. View source","title":"#set_chat_administrator_custom_title"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_chat_description(chat_id,description)","text":"Use this method to change the description of a group, a supergroup or a channel. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#set_chat_description"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_chat_menu_button(chat_id,menu_button)","text":"Use this method to change the bot's menu button in a private chat, or the default menu button. Returns True on success. View source","title":"#set_chat_menu_button"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_chat_permissions(chat_id,permissions,use_independent_chat_permissions)","text":"Use this method to set default chat permissions for all members. The bot must be an administrator in the group or a supergroup for this to work and must have the can_restrict_members administrator rights. Returns True on success. View source","title":"#set_chat_permissions"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_chat_photo(chat_id,photo)","text":"Use this method to set a new profile photo for the chat. Photos can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#set_chat_photo"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_chat_sticker_set(chat_id,sticker_set_name)","text":"Use this method to set a new group sticker set for a supergroup. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Use the field can_set_sticker_set optionally returned in getChat requests to check if the bot can use this method. Returns True on success. View source","title":"#set_chat_sticker_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_chat_title(chat_id,title)","text":"Use this method to change the title of a chat. Titles can't be changed for private chats. The bot must be an administrator in the chat for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#set_chat_title"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_custom_emoji_sticker_set_thumbnail(name,custom_emoji_id)","text":"Use this method to set the thumbnail of a custom emoji sticker set. Returns True on success. View source","title":"#set_custom_emoji_sticker_set_thumbnail"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_game_score(user_id,score,force,disable_edit_message,chat_id,message_id,inline_message_id)","text":"Use this method to set the score of the specified user in a game message. On success, if the message is not an inline message, the Message is returned, otherwise True is returned. Returns an error, if the new score is not greater than the user's current score in the chat and force is False. View source","title":"#set_game_score"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_message_reaction(chat_id,message_id,reaction,is_big)","text":"Use this method to change the chosen reactions on a message. Service messages can't be reacted to. Automatically forwarded messages from a channel to its discussion group have the same available reactions as messages in the channel. Returns True on success. View source","title":"#set_message_reaction"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_my_commands(commands,scope,language_code)","text":"Use this method to change the list of the bot's commands. See this manual for more details about bot commands. Returns True on success. View source","title":"#set_my_commands"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_my_default_administrator_rights(rights,for_channels)","text":"Use this method to change the default administrator rights requested by the bot when it's added as an administrator to groups or channels. These rights will be suggested to users, but they are free to modify the list before adding the bot. Returns True on success. View source","title":"#set_my_default_administrator_rights"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_my_description(description,language_code)","text":"Use this method to change the bot's description, which is shown in the chat with the bot if the chat is empty. Returns True on success. View source","title":"#set_my_description"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_my_name(name,language_code)","text":"Use this method to change the bot's name. Returns True on success. View source","title":"#set_my_name"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_my_short_description(short_description,language_code)","text":"Use this method to change the bot's short description, which is shown on the bot's profile page and is sent together with the link when users share the bot. Returns True on success. View source","title":"#set_my_short_description"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_passport_data_errors(user_id,errors)","text":"Informs a user that some of the Telegram Passport elements they provided contains errors. The user will not be able to re-submit their Passport to you until the errors are fixed (the contents of the field for which you returned the error must change). Returns True on success. Use this if the data submitted by the user doesn't satisfy the standards your service requires for any reason. For example, if a birthday date seems invalid, a submitted document is blurry, a scan shows evidence of tampering, etc. Supply some details in the error message to make sure the user knows how to correct the issues. View source","title":"#set_passport_data_errors"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_sticker_emoji_list(sticker,emoji_list)","text":"Use this method to change the list of emoji assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source","title":"#set_sticker_emoji_list"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_sticker_keywords(sticker,keywords)","text":"Use this method to change search keywords assigned to a regular or custom emoji sticker. The sticker must belong to a sticker set created by the bot. Returns True on success. View source","title":"#set_sticker_keywords"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_sticker_mask_position(sticker,mask_position)","text":"Use this method to change the mask position of a mask sticker. The sticker must belong to a sticker set that was created by the bot. Returns True on success. View source","title":"#set_sticker_mask_position"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_sticker_position_in_set(sticker,position)","text":"Use this method to move a sticker in a set created by the bot to a specific position. Returns True on success. View source","title":"#set_sticker_position_in_set"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_sticker_set_thumbnail(name,user_id,format,thumbnail)","text":"Use this method to set the thumbnail of a regular or mask sticker set. The format of the thumbnail file must match the format of the stickers in the set. Returns True on success. View source","title":"#set_sticker_set_thumbnail"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_sticker_set_title(name,title)","text":"Use this method to set the title of a created sticker set. Returns True on success. View source","title":"#set_sticker_set_title"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#set_webhook(url,certificate,ip_address,max_connections,allowed_updates,drop_pending_updates,secret_token)","text":"Use this method to specify a URL and receive incoming updates via an outgoing webhook. Whenever there is an update for the bot, we will send an HTTPS POST request to the specified URL, containing a JSON-serialized Update. In case of an unsuccessful request, we will give up after a reasonable amount of attempts. Returns True on success. If you'd like to make sure that the webhook was set by you, you can specify secret data in the parameter secret_token. If specified, the request will contain a header \"X-Telegram-Bot-Api-Secret-Token\" with the secret token as content. View source","title":"#set_webhook"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#stop_message_live_location(chat_id,message_id,inline_message_id,reply_markup)","text":"Use this method to stop updating a live location message before live_period expires. On success, if the message is not an inline message, the edited Message is returned, otherwise True is returned. View source","title":"#stop_message_live_location"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#stop_poll(chat_id,message_id,reply_markup)","text":"Use this method to stop a poll which was sent by the bot. On success, the stopped Poll is returned. View source","title":"#stop_poll"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#unban_chat_member(chat_id,user_id,only_if_banned)","text":"Use this method to unban a previously banned user in a supergroup or channel. The user will not return to the group or channel automatically, but will be able to join via link, etc. The bot must be an administrator for this to work. By default, this method guarantees that after the call the user is not a member of the chat, but will be able to join it. So if the user is a member of the chat they will also be removed from the chat. If you don't want this, use the parameter only_if_banned. Returns True on success. View source","title":"#unban_chat_member"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#unban_chat_sender_chat(chat_id,sender_chat_id)","text":"Use this method to unban a previously banned channel chat in a supergroup or channel. The bot must be an administrator for this to work and must have the appropriate administrator rights. Returns True on success. View source","title":"#unban_chat_sender_chat"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#unhide_general_forum_topic(chat_id)","text":"Use this method to unhide the 'General' topic in a forum supergroup chat. The bot must be an administrator in the chat for this to work and must have the can_manage_topics administrator rights. Returns True on success. View source","title":"#unhide_general_forum_topic"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#unpin_all_chat_messages(chat_id)","text":"Use this method to clear the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. View source","title":"#unpin_all_chat_messages"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#unpin_all_forum_topic_messages(chat_id,message_thread_id)","text":"Use this method to clear the list of pinned messages in a forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. View source","title":"#unpin_all_forum_topic_messages"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#unpin_all_general_forum_topic_messages(chat_id)","text":"Use this method to clear the list of pinned messages in a General forum topic. The bot must be an administrator in the chat for this to work and must have the can_pin_messages administrator right in the supergroup. Returns True on success. View source","title":"#unpin_all_general_forum_topic_messages"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#unpin_chat_message(chat_id,message_id)","text":"Use this method to remove a message from the list of pinned messages in a chat. If the chat is not a private chat, the bot must be an administrator in the chat for this to work and must have the 'can_pin_messages' administrator right in a supergroup or 'can_edit_messages' administrator right in a channel. Returns True on success. View source","title":"#unpin_chat_message"},{"location":"api_reference/Tourmaline/Client/Api/#Tourmaline::Client::Api#upload_sticker_file(user_id,sticker,sticker_format)","text":"Use this method to upload a file with a sticker for later use in the createNewStickerSet, addStickerToSet, or replaceStickerInSet methods (the file can be used multiple times). Returns the uploaded File on success. View source","title":"#upload_sticker_file"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/","text":"class Tourmaline::Client::InlineKeyboardMarkupBuilder inherits Tourmaline::KeyboardBuilder # Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false , persistent = false , input_field_placeholder = nil ) # View source Methods # #callback_button ( text , data ) # View source #game_button ( text ) # View source #keyboard ( columns = nil ) : G # View source #login_button ( text , url , * args , ** opts ) # View source #pay_button ( text ) # View source #switch_to_chat_button ( text , value ) # View source #switch_to_current_chat_button ( text , value ) # View source #url_button ( text , url ) # View source #web_app_button ( app : String | WebAppInfo ) # View source","title":"InlineKeyboardMarkupBuilder"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder","text":"","title":"InlineKeyboardMarkupBuilder"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time,persistent,input_field_placeholder)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#callback_button(text,data)","text":"View source","title":"#callback_button"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#game_button(text)","text":"View source","title":"#game_button"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#login_button(text,url,*,**)","text":"View source","title":"#login_button"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#pay_button(text)","text":"View source","title":"#pay_button"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#switch_to_chat_button(text,value)","text":"View source","title":"#switch_to_chat_button"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#switch_to_current_chat_button(text,value)","text":"View source","title":"#switch_to_current_chat_button"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#url_button(text,url)","text":"View source","title":"#url_button"},{"location":"api_reference/Tourmaline/Client/InlineKeyboardMarkupBuilder/#Tourmaline::Client::InlineKeyboardMarkupBuilder#web_app_button(app)","text":"View source","title":"#web_app_button"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/","text":"class Tourmaline::Client::InlineQueryResultBuilder inherits Reference # Constructors # .new # View source Methods # #article ( * args , ** opts ) # View source #audio ( * args , ** opts ) # View source #cached_audio ( * args , ** opts ) # View source #cached_document ( * args , ** opts ) # View source #cached_gif ( * args , ** opts ) # View source #cached_mpeg4_gif ( * args , ** opts ) # View source #cached_photo ( * args , ** opts ) # View source #cached_sticker ( * args , ** opts ) # View source #cached_video ( * args , ** opts ) # View source #cached_voice ( * args , ** opts ) # View source #contact ( * args , ** opts ) # View source #document ( * args , ** opts ) # View source #game ( * args , ** opts ) # View source #gif ( * args , ** opts ) # View source #location ( * args , ** opts ) # View source #mpeg4_gif ( * args , ** opts ) # View source #photo ( * args , ** opts ) # View source #results : Array ( Tourmaline::InlineQueryResult ) # View source #venue ( * args , ** opts ) # View source #video ( * args , ** opts ) # View source","title":"InlineQueryResultBuilder"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder","text":"","title":"InlineQueryResultBuilder"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder.new","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#article(*,**)","text":"View source","title":"#article"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#audio(*,**)","text":"View source","title":"#audio"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_audio(*,**)","text":"View source","title":"#cached_audio"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_document(*,**)","text":"View source","title":"#cached_document"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_gif(*,**)","text":"View source","title":"#cached_gif"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_mpeg4_gif(*,**)","text":"View source","title":"#cached_mpeg4_gif"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_photo(*,**)","text":"View source","title":"#cached_photo"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_sticker(*,**)","text":"View source","title":"#cached_sticker"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_video(*,**)","text":"View source","title":"#cached_video"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#cached_voice(*,**)","text":"View source","title":"#cached_voice"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#contact(*,**)","text":"View source","title":"#contact"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#document(*,**)","text":"View source","title":"#document"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#game(*,**)","text":"View source","title":"#game"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#gif(*,**)","text":"View source","title":"#gif"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#location(*,**)","text":"View source","title":"#location"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#mpeg4_gif(*,**)","text":"View source","title":"#mpeg4_gif"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#photo(*,**)","text":"View source","title":"#photo"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#results","text":"View source","title":"#results"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#venue(*,**)","text":"View source","title":"#venue"},{"location":"api_reference/Tourmaline/Client/InlineQueryResultBuilder/#Tourmaline::Client::InlineQueryResultBuilder#video(*,**)","text":"View source","title":"#video"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/","text":"class Tourmaline::Client::ReplyKeyboardMarkupBuilder inherits Tourmaline::KeyboardBuilder # Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false , persistent = false , input_field_placeholder = nil ) # View source Methods # #contact_request_button ( text ) # View source #keyboard ( columns = nil ) : G # View source #location_request_button ( text ) # View source #poll_request_button ( text , type ) # View source #text_button ( text ) # View source #web_app_button ( app : String | WebAppInfo ) # View source","title":"ReplyKeyboardMarkupBuilder"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder","text":"","title":"ReplyKeyboardMarkupBuilder"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time,persistent,input_field_placeholder)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder#contact_request_button(text)","text":"View source","title":"#contact_request_button"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder#location_request_button(text)","text":"View source","title":"#location_request_button"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder#poll_request_button(text,type)","text":"View source","title":"#poll_request_button"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder#text_button(text)","text":"View source","title":"#text_button"},{"location":"api_reference/Tourmaline/Client/ReplyKeyboardMarkupBuilder/#Tourmaline::Client::ReplyKeyboardMarkupBuilder#web_app_button(app)","text":"View source","title":"#web_app_button"},{"location":"api_reference/Tourmaline/CommandHandler/","text":"class Tourmaline::CommandHandler inherits Tourmaline::EventHandler # Constructors # .new ( commands : String | Array ( String ), proc : EventHandlerProc ) # View source .new ( commands : String | Array ( String ), & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #commands : Array ( String ) # View source","title":"CommandHandler"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler","text":"","title":"CommandHandler"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler.new(commands,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/CommandHandler/#Tourmaline::CommandHandler#commands","text":"View source","title":"#commands"},{"location":"api_reference/Tourmaline/Contact/","text":"class Tourmaline::Contact inherits Reference # This object represents a phone contact. Included modules JSON::Serializable Constructors # .new ( phone_number , first_name , last_name : String? = nil , user_id : Int32 | Int64 | Nil = nil , vcard : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # Contact's first name View source #first_name= ( first_name : String ) # Contact's first name View source #last_name : String? # Optional. Contact's last name View source #last_name= ( last_name : String? ) # Optional. Contact's last name View source #phone_number : String # Contact's phone number View source #phone_number= ( phone_number : String ) # Contact's phone number View source #user_id : Int32 | Int64 | Nil # Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source #user_id= ( user_id : Int32 | Int64 | Nil ) # Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source #vcard : String? # Optional. Additional data about the contact in the form of a vCard View source #vcard= ( vcard : String? ) # Optional. Additional data about the contact in the form of a vCard View source","title":"Contact"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact","text":"This object represents a phone contact.","title":"Contact"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact.new(phone_number,first_name,last_name,user_id,vcard)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#first_name","text":"Contact's first name View source","title":"#first_name"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#first_name=(first_name)","text":"Contact's first name View source","title":"#first_name="},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#last_name","text":"Optional. Contact's last name View source","title":"#last_name"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#last_name=(last_name)","text":"Optional. Contact's last name View source","title":"#last_name="},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#phone_number","text":"Contact's phone number View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#phone_number=(phone_number)","text":"Contact's phone number View source","title":"#phone_number="},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#user_id","text":"Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#user_id"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#user_id=(user_id)","text":"Optional. Contact's user identifier in Telegram. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#user_id="},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#vcard","text":"Optional. Additional data about the contact in the form of a vCard View source","title":"#vcard"},{"location":"api_reference/Tourmaline/Contact/#Tourmaline::Contact#vcard=(vcard)","text":"Optional. Additional data about the contact in the form of a vCard View source","title":"#vcard="},{"location":"api_reference/Tourmaline/Context/","text":"struct Tourmaline::Context inherits Struct # Constructors # .new ( client : Client , update : Update ) # View source Methods # #answer_callback_query ( ** kwargs ) # View source #answer_inline_query ( ** kwargs ) # View source #answer_pre_checkout_query ( ** kwargs ) # View source #answer_shipping_query ( ** kwargs ) # View source #api : Tourmaline::Client # Slightly shorter alias for the client View source #callback_query ( * args , ** options ) # Pass all update methods to the update object View source #callback_query # Pass all update methods to the update object View source #callback_query? # Pass all update methods to the update object View source #callback_query? ( * args , ** options ) # Pass all update methods to the update object View source #channel_post ( * args , ** options ) # Pass all update methods to the update object View source #channel_post # Pass all update methods to the update object View source #channel_post? # Pass all update methods to the update object View source #channel_post? ( * args , ** options ) # Pass all update methods to the update object View source #chosen_inline_result # Pass all update methods to the update object View source #chosen_inline_result ( * args , ** options ) # Pass all update methods to the update object View source #chosen_inline_result? # Pass all update methods to the update object View source #chosen_inline_result? ( * args , ** options ) # Pass all update methods to the update object View source #client : Client # View source #command # Get the command name, return nil if there is no message View source #command! # Get the command name, raise an exception if there is no message View source #delete_message ( message_id : Int32 ) # Context aware message deletion View source #edit_live_location ( latitude : Float64 , longitude : Float64 , ** kwargs ) # Context aware live location editing View source #edit_message ( text : String , ** kwargs ) # Context aware editing View source #edited_channel_post # Pass all update methods to the update object View source #edited_channel_post ( * args , ** options ) # Pass all update methods to the update object View source #edited_channel_post? ( * args , ** options ) # Pass all update methods to the update object View source #edited_channel_post? # Pass all update methods to the update object View source #edited_message # Pass all update methods to the update object View source #edited_message ( * args , ** options ) # Pass all update methods to the update object View source #edited_message? # Pass all update methods to the update object View source #edited_message? ( * args , ** options ) # Pass all update methods to the update object View source #forward_message ( to_chat , ** kwargs ) # Context aware forward View source #inline_query ( * args , ** options ) # Pass all update methods to the update object View source #inline_query # Pass all update methods to the update object View source #inline_query? ( * args , ** options ) # Pass all update methods to the update object View source #inline_query? # Pass all update methods to the update object View source #message # Retuns the message, edited_message, channel_post, edited_channel_post, callback_query.message, or nil View source #message ( * args , ** options ) # Pass all update methods to the update object View source #message # Pass all update methods to the update object View source #message! # Returns the message, edited_message, channel_post, edited_channel_post, callback_query.message, or raises an exception View source #message? ( * args , ** options ) # Pass all update methods to the update object View source #message? # Pass all update methods to the update object View source #pin_message ( ** kwargs ) # Context aware pinning View source #poll ( * args , ** options ) # Pass all update methods to the update object View source #poll # Pass all update methods to the update object View source #poll? ( * args , ** options ) # Pass all update methods to the update object View source #poll? # Pass all update methods to the update object View source #poll_answer # Pass all update methods to the update object View source #poll_answer ( * args , ** options ) # Pass all update methods to the update object View source #poll_answer? # Pass all update methods to the update object View source #poll_answer? ( * args , ** options ) # Pass all update methods to the update object View source #pre_checkout_query ( * args , ** options ) # Pass all update methods to the update object View source #pre_checkout_query # Pass all update methods to the update object View source #pre_checkout_query? # Pass all update methods to the update object View source #pre_checkout_query? ( * args , ** options ) # Pass all update methods to the update object View source #reply ( text : String , ** kwargs ) # Reply directly to the incoming message View source #reply_with_animation ( animation , ** kwargs ) # Reply directly to the incoming message with a animation View source #reply_with_audio ( audio , ** kwargs ) # Reply directly to the incoming message with a audio View source #reply_with_basketball ( ** kwargs ) # Reply directly to the incoming message with a basketball View source #reply_with_bowling ( ** kwargs ) # Reply directly to the incoming message with a bowling View source #reply_with_contact ( contact , ** kwargs ) # Reply directly to the incoming message with a contact View source #reply_with_dart ( ** kwargs ) # Reply directly to the incoming message with a dart View source #reply_with_dice ( ** kwargs ) # Reply directly to the incoming message with a dice View source #reply_with_document ( document , ** kwargs ) # Reply directly to the incoming message with a document View source #reply_with_football ( ** kwargs ) # Reply directly to the incoming message with a football View source #reply_with_invoice ( invoice , ** kwargs ) # Reply directly to the incoming message with a invoice View source #reply_with_location ( latitude : Float64 , longitude : Float64 , ** kwargs ) # Reply directly to the incoming message with a location View source #reply_with_media_group ( media_group , ** kwargs ) # Reply directly to the incoming message with a media_group View source #reply_with_photo ( photo , ** kwargs ) # Reply directly to the incoming message with a photo View source #reply_with_poll ( question : String , options : Array ( String ), ** kwargs ) # Reply directly to the incoming message with a poll View source #reply_with_slot_machine ( ** kwargs ) # Reply directly to the incoming message with a slot_machine View source #reply_with_sticker ( sticker , ** kwargs ) # Reply directly to the incoming message with a sticker View source #reply_with_venue ( venue , ** kwargs ) # Reply directly to the incoming message with a venue View source #reply_with_video ( video , ** kwargs ) # Reply directly to the incoming message with a video View source #reply_with_video_note ( video_note , ** kwargs ) # Reply directly to the incoming message with a video_note View source #reply_with_voice ( voice , ** kwargs ) # Reply directly to the incoming message with a voice View source #respond ( text : String , ** kwargs ) # Respond to the incoming message View source #respond_with_animation ( animation , ** kwargs ) # Respond with a animation View source #respond_with_audio ( audio , ** kwargs ) # Respond with a audio View source #respond_with_basketball ( ** kwargs ) # Respond with a basketball View source #respond_with_bowling ( ** kwargs ) # Respond with a bowling View source #respond_with_contact ( contact , ** kwargs ) # Respond with a contact View source #respond_with_dart ( ** kwargs ) # Respond with a dart View source #respond_with_dice ( ** kwargs ) # Respond with a dice View source #respond_with_document ( document , ** kwargs ) # Respond with a document View source #respond_with_football ( ** kwargs ) # Respond with a football View source #respond_with_invoice ( invoice , ** kwargs ) # Respond with a invoice View source #respond_with_location ( latitude : Float64 , longitude : Float64 , ** kwargs ) # Respond with a location View source #respond_with_media_group ( media_group , ** kwargs ) # Respond with a media_group View source #respond_with_photo ( photo , ** kwargs ) # Respond with a photo View source #respond_with_poll ( question : String , options : Array ( String ), ** kwargs ) # Respond with a poll View source #respond_with_slot_machine ( ** kwargs ) # Respond with a slot_machine View source #respond_with_sticker ( sticker , ** kwargs ) # Respond with a sticker View source #respond_with_venue ( venue , ** kwargs ) # Respond with a venue View source #respond_with_video ( video , ** kwargs ) # Respond with a video View source #respond_with_video_note ( video_note , ** kwargs ) # Respond with a video_note View source #respond_with_voice ( voice , ** kwargs ) # Respond with a voice View source #send_chat_action ( action : String | ChatAction ) # Context aware chat actions View source #shipping_query # Pass all update methods to the update object View source #shipping_query ( * args , ** options ) # Pass all update methods to the update object View source #shipping_query? # Pass all update methods to the update object View source #shipping_query? ( * args , ** options ) # Pass all update methods to the update object View source #text ( strip_command = true ) # Get the message text, return nil if there is no message View source #text! ( strip_command = true ) # Get the message text, raise an exception if there is no message View source #unpin_message ( ** kwargs ) # Context aware unpinning View source #update : Update # View source #with_message # If the update contains a message, pass it to the block. Less boilerplate. View source","title":"Context"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context","text":"","title":"Context"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context.new(client,update)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#answer_callback_query(**)","text":"View source","title":"#answer_callback_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#answer_inline_query(**)","text":"View source","title":"#answer_inline_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#answer_pre_checkout_query(**)","text":"View source","title":"#answer_pre_checkout_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#answer_shipping_query(**)","text":"View source","title":"#answer_shipping_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#api","text":"Slightly shorter alias for the client View source","title":"#api"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#callback_query(*,**)","text":"Pass all update methods to the update object View source","title":"#callback_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#callback_query?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#callback_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#channel_post(*,**)","text":"Pass all update methods to the update object View source","title":"#channel_post"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#channel_post?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#channel_post?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#chosen_inline_result(*,**,&)","text":"Pass all update methods to the update object View source","title":"#chosen_inline_result"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#chosen_inline_result?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#chosen_inline_result?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#client","text":"View source","title":"#client"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#command","text":"Get the command name, return nil if there is no message View source","title":"#command"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#command!","text":"Get the command name, raise an exception if there is no message View source","title":"#command!"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#delete_message(message_id)","text":"Context aware message deletion View source","title":"#delete_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edit_live_location(latitude,longitude,**)","text":"Context aware live location editing View source","title":"#edit_live_location"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edit_message(text,**)","text":"Context aware editing View source","title":"#edit_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_channel_post(*,**,&)","text":"Pass all update methods to the update object View source","title":"#edited_channel_post"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_channel_post?(*,**)","text":"Pass all update methods to the update object View source","title":"#edited_channel_post?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_message(*,**,&)","text":"Pass all update methods to the update object View source","title":"#edited_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#edited_message?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#edited_message?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#forward_message(to_chat,**)","text":"Context aware forward View source","title":"#forward_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#inline_query(*,**)","text":"Pass all update methods to the update object View source","title":"#inline_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#inline_query?(*,**)","text":"Pass all update methods to the update object View source","title":"#inline_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#message","text":"Retuns the message, edited_message, channel_post, edited_channel_post, callback_query.message, or nil View source","title":"#message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#message!","text":"Returns the message, edited_message, channel_post, edited_channel_post, callback_query.message, or raises an exception View source","title":"#message!"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#message?(*,**)","text":"Pass all update methods to the update object View source","title":"#message?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#pin_message(**)","text":"Context aware pinning View source","title":"#pin_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll(*,**)","text":"Pass all update methods to the update object View source","title":"#poll"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll?(*,**)","text":"Pass all update methods to the update object View source","title":"#poll?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll_answer(*,**,&)","text":"Pass all update methods to the update object View source","title":"#poll_answer"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#poll_answer?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#poll_answer?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#pre_checkout_query(*,**)","text":"Pass all update methods to the update object View source","title":"#pre_checkout_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#pre_checkout_query?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#pre_checkout_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply(text,**)","text":"Reply directly to the incoming message View source","title":"#reply"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_animation(animation,**)","text":"Reply directly to the incoming message with a animation View source","title":"#reply_with_animation"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_audio(audio,**)","text":"Reply directly to the incoming message with a audio View source","title":"#reply_with_audio"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_basketball(**)","text":"Reply directly to the incoming message with a basketball View source","title":"#reply_with_basketball"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_bowling(**)","text":"Reply directly to the incoming message with a bowling View source","title":"#reply_with_bowling"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_contact(contact,**)","text":"Reply directly to the incoming message with a contact View source","title":"#reply_with_contact"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_dart(**)","text":"Reply directly to the incoming message with a dart View source","title":"#reply_with_dart"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_dice(**)","text":"Reply directly to the incoming message with a dice View source","title":"#reply_with_dice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_document(document,**)","text":"Reply directly to the incoming message with a document View source","title":"#reply_with_document"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_football(**)","text":"Reply directly to the incoming message with a football View source","title":"#reply_with_football"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_invoice(invoice,**)","text":"Reply directly to the incoming message with a invoice View source","title":"#reply_with_invoice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_location(latitude,longitude,**)","text":"Reply directly to the incoming message with a location View source","title":"#reply_with_location"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_media_group(media_group,**)","text":"Reply directly to the incoming message with a media_group View source","title":"#reply_with_media_group"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_photo(photo,**)","text":"Reply directly to the incoming message with a photo View source","title":"#reply_with_photo"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_poll(question,options,**)","text":"Reply directly to the incoming message with a poll View source","title":"#reply_with_poll"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_slot_machine(**)","text":"Reply directly to the incoming message with a slot_machine View source","title":"#reply_with_slot_machine"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_sticker(sticker,**)","text":"Reply directly to the incoming message with a sticker View source","title":"#reply_with_sticker"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_venue(venue,**)","text":"Reply directly to the incoming message with a venue View source","title":"#reply_with_venue"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_video(video,**)","text":"Reply directly to the incoming message with a video View source","title":"#reply_with_video"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_video_note(video_note,**)","text":"Reply directly to the incoming message with a video_note View source","title":"#reply_with_video_note"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#reply_with_voice(voice,**)","text":"Reply directly to the incoming message with a voice View source","title":"#reply_with_voice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond(text,**)","text":"Respond to the incoming message View source","title":"#respond"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_animation(animation,**)","text":"Respond with a animation View source","title":"#respond_with_animation"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_audio(audio,**)","text":"Respond with a audio View source","title":"#respond_with_audio"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_basketball(**)","text":"Respond with a basketball View source","title":"#respond_with_basketball"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_bowling(**)","text":"Respond with a bowling View source","title":"#respond_with_bowling"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_contact(contact,**)","text":"Respond with a contact View source","title":"#respond_with_contact"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_dart(**)","text":"Respond with a dart View source","title":"#respond_with_dart"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_dice(**)","text":"Respond with a dice View source","title":"#respond_with_dice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_document(document,**)","text":"Respond with a document View source","title":"#respond_with_document"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_football(**)","text":"Respond with a football View source","title":"#respond_with_football"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_invoice(invoice,**)","text":"Respond with a invoice View source","title":"#respond_with_invoice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_location(latitude,longitude,**)","text":"Respond with a location View source","title":"#respond_with_location"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_media_group(media_group,**)","text":"Respond with a media_group View source","title":"#respond_with_media_group"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_photo(photo,**)","text":"Respond with a photo View source","title":"#respond_with_photo"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_poll(question,options,**)","text":"Respond with a poll View source","title":"#respond_with_poll"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_slot_machine(**)","text":"Respond with a slot_machine View source","title":"#respond_with_slot_machine"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_sticker(sticker,**)","text":"Respond with a sticker View source","title":"#respond_with_sticker"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_venue(venue,**)","text":"Respond with a venue View source","title":"#respond_with_venue"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_video(video,**)","text":"Respond with a video View source","title":"#respond_with_video"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_video_note(video_note,**)","text":"Respond with a video_note View source","title":"#respond_with_video_note"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#respond_with_voice(voice,**)","text":"Respond with a voice View source","title":"#respond_with_voice"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#send_chat_action(action)","text":"Context aware chat actions View source","title":"#send_chat_action"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#shipping_query(*,**,&)","text":"Pass all update methods to the update object View source","title":"#shipping_query"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#shipping_query?(*,**,&)","text":"Pass all update methods to the update object View source","title":"#shipping_query?"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#text(strip_command)","text":"Get the message text, return nil if there is no message View source","title":"#text"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#text!(strip_command)","text":"Get the message text, raise an exception if there is no message View source","title":"#text!"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#unpin_message(**)","text":"Context aware unpinning View source","title":"#unpin_message"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#update","text":"View source","title":"#update"},{"location":"api_reference/Tourmaline/Context/#Tourmaline::Context#with_message(&)","text":"If the update contains a message, pass it to the block. Less boilerplate. View source","title":"#with_message"},{"location":"api_reference/Tourmaline/Dice/","text":"class Tourmaline::Dice inherits Reference # This object represents an animated emoji that displays a random value. Included modules JSON::Serializable Constructors # .new ( emoji , value ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #emoji : String # Emoji on which the dice throw animation is based View source #emoji= ( emoji : String ) # Emoji on which the dice throw animation is based View source #value : Int32 | Int64 # Value of the dice, 1-6 for \"\ud83c\udfb2\", \"\ud83c\udfaf\" and \"\ud83c\udfb3\" base emoji, 1-5 for \"\ud83c\udfc0\" and \"\u26bd\" base emoji, 1-64 for \"\ud83c\udfb0\" base emoji View source #value= ( value : Int32 | Int64 ) # Value of the dice, 1-6 for \"\ud83c\udfb2\", \"\ud83c\udfaf\" and \"\ud83c\udfb3\" base emoji, 1-5 for \"\ud83c\udfc0\" and \"\u26bd\" base emoji, 1-64 for \"\ud83c\udfb0\" base emoji View source","title":"Dice"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice","text":"This object represents an animated emoji that displays a random value.","title":"Dice"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice.new(emoji,value)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#emoji","text":"Emoji on which the dice throw animation is based View source","title":"#emoji"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#emoji=(emoji)","text":"Emoji on which the dice throw animation is based View source","title":"#emoji="},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#value","text":"Value of the dice, 1-6 for \"\ud83c\udfb2\", \"\ud83c\udfaf\" and \"\ud83c\udfb3\" base emoji, 1-5 for \"\ud83c\udfc0\" and \"\u26bd\" base emoji, 1-64 for \"\ud83c\udfb0\" base emoji View source","title":"#value"},{"location":"api_reference/Tourmaline/Dice/#Tourmaline::Dice#value=(value)","text":"Value of the dice, 1-6 for \"\ud83c\udfb2\", \"\ud83c\udfaf\" and \"\ud83c\udfb3\" base emoji, 1-5 for \"\ud83c\udfc0\" and \"\u26bd\" base emoji, 1-64 for \"\ud83c\udfb0\" base emoji View source","title":"#value="},{"location":"api_reference/Tourmaline/Dispatcher/","text":"class Tourmaline::Dispatcher inherits Reference # The Dispatcher is responsible for dispatching requests to the appropria Constructors # .new ( client : Client ) # View source Methods # #event_handlers : Hash ( UpdateAction , Array ( EventHandlerType )) # View source #middleware : Array ( Middleware ) # View source #on ( * actions : UpdateAction , & block : Context -> ) # View source #process ( update : Update ) # View source #register ( handler : EventHandler ) # View source #use ( * middlewares : Middleware ) # View source #use ( * middlewares : Middleware . class ) # View source","title":"Dispatcher"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher","text":"The Dispatcher is responsible for dispatching requests to the appropria","title":"Dispatcher"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher.new(client)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#event_handlers","text":"View source","title":"#event_handlers"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#middleware","text":"View source","title":"#middleware"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#on(*,&)","text":"View source","title":"#on"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#process(update)","text":"View source","title":"#process"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#register(handler)","text":"View source","title":"#register"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#use(*)","text":"View source","title":"#use"},{"location":"api_reference/Tourmaline/Dispatcher/#Tourmaline::Dispatcher#use(*)","text":"View source","title":"#use"},{"location":"api_reference/Tourmaline/Document/","text":"class Tourmaline::Document inherits Reference # This object represents a general file (as opposed to photos, voice messages and audio files). Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , thumbnail : Tourmaline::PhotoSize? = nil , file_name : String? = nil , mime_type : String? = nil , file_size : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_name : String? # Optional. Original filename as defined by sender View source #file_name= ( file_name : String? ) # Optional. Original filename as defined by sender View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #mime_type : String? # Optional. MIME type of the file as defined by sender View source #mime_type= ( mime_type : String? ) # Optional. MIME type of the file as defined by sender View source #thumbnail : Tourmaline::PhotoSize? # Optional. Document thumbnail as defined by sender View source #thumbnail= ( thumbnail : Tourmaline::PhotoSize? ) # Optional. Document thumbnail as defined by sender View source","title":"Document"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document","text":"This object represents a general file (as opposed to photos, voice messages and audio files).","title":"Document"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document.new(file_id,file_unique_id,thumbnail,file_name,mime_type,file_size)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_name","text":"Optional. Original filename as defined by sender View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_name=(file_name)","text":"Optional. Original filename as defined by sender View source","title":"#file_name="},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_size","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_size=(file_size)","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size="},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#mime_type","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#mime_type=(mime_type)","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#thumbnail","text":"Optional. Document thumbnail as defined by sender View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Document/#Tourmaline::Document#thumbnail=(thumbnail)","text":"Optional. Document thumbnail as defined by sender View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/EncryptedCredentials/","text":"class Tourmaline::EncryptedCredentials inherits Reference # Describes data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes. Included modules JSON::Serializable Constructors # .new ( data , hash , secret ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #data : String # Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication View source #data= ( data : String ) # Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication View source #hash : String # Base64-encoded data hash for data authentication View source #hash= ( hash : String ) # Base64-encoded data hash for data authentication View source #secret : String # Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption View source #secret= ( secret : String ) # Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption View source","title":"EncryptedCredentials"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials","text":"Describes data required for decrypting and authenticating EncryptedPassportElement. See the Telegram Passport Documentation for a complete description of the data decryption and authentication processes.","title":"EncryptedCredentials"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials.new(data,hash,secret)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#data","text":"Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication View source","title":"#data"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#data=(data)","text":"Base64-encoded encrypted JSON-serialized data with unique user's payload, data hashes and secrets required for EncryptedPassportElement decryption and authentication View source","title":"#data="},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#hash","text":"Base64-encoded data hash for data authentication View source","title":"#hash"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#hash=(hash)","text":"Base64-encoded data hash for data authentication View source","title":"#hash="},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#secret","text":"Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption View source","title":"#secret"},{"location":"api_reference/Tourmaline/EncryptedCredentials/#Tourmaline::EncryptedCredentials#secret=(secret)","text":"Base64-encoded secret, encrypted with the bot's public RSA key, required for data decryption View source","title":"#secret="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/","text":"class Tourmaline::EncryptedPassportElement inherits Reference # Describes documents or other Telegram Passport elements shared with the bot by the user. Included modules JSON::Serializable Constructors # .new ( type , hash , data : String? = nil , phone_number : String? = nil , email : String? = nil , files : Array ( Tourmaline::PassportFile ) = [] of Tourmaline :: PassportFile , front_side : Tourmaline::PassportFile? = nil , reverse_side : Tourmaline::PassportFile? = nil , selfie : Tourmaline::PassportFile? = nil , translation : Array ( Tourmaline::PassportFile ) = [] of Tourmaline :: PassportFile ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #data : String? # Optional. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" and \"address\" types. Can be decrypted and verified using the accompanying EncryptedCredentials. View source #data= ( data : String? ) # Optional. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" and \"address\" types. Can be decrypted and verified using the accompanying EncryptedCredentials. View source #email : String? # Optional. User's verified email address; available only for \"email\" type View source #email= ( email : String? ) # Optional. User's verified email address; available only for \"email\" type View source #files : Array ( Tourmaline::PassportFile ) # Optional. Array of encrypted files with documents provided by the user; available only for \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source #files= ( files : Array ( Tourmaline::PassportFile )) # Optional. Array of encrypted files with documents provided by the user; available only for \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source #front_side : Tourmaline::PassportFile? # Optional. Encrypted file with the front side of the document, provided by the user; available only for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source #front_side= ( front_side : Tourmaline::PassportFile? ) # Optional. Encrypted file with the front side of the document, provided by the user; available only for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source #hash : String # Base64-encoded element hash for using in PassportElementErrorUnspecified View source #hash= ( hash : String ) # Base64-encoded element hash for using in PassportElementErrorUnspecified View source #phone_number : String? # Optional. User's verified phone number; available only for \"phone_number\" type View source #phone_number= ( phone_number : String? ) # Optional. User's verified phone number; available only for \"phone_number\" type View source #reverse_side : Tourmaline::PassportFile? # Optional. Encrypted file with the reverse side of the document, provided by the user; available only for \"driver_license\" and \"identity_card\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source #reverse_side= ( reverse_side : Tourmaline::PassportFile? ) # Optional. Encrypted file with the reverse side of the document, provided by the user; available only for \"driver_license\" and \"identity_card\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source #selfie : Tourmaline::PassportFile? # Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source #selfie= ( selfie : Tourmaline::PassportFile? ) # Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source #translation : Array ( Tourmaline::PassportFile ) # Optional. Array of encrypted files with translated versions of documents provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source #translation= ( translation : Array ( Tourmaline::PassportFile )) # Optional. Array of encrypted files with translated versions of documents provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source #type : String # Element type. One of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\", \"phone_number\", \"email\". View source #type= ( type : String ) # Element type. One of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\", \"phone_number\", \"email\". View source","title":"EncryptedPassportElement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement","text":"Describes documents or other Telegram Passport elements shared with the bot by the user.","title":"EncryptedPassportElement"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement.new(type,hash,data,phone_number,email,files,front_side,reverse_side,selfie,translation)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#data","text":"Optional. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" and \"address\" types. Can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#data"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#data=(data)","text":"Optional. Base64-encoded encrypted Telegram Passport element data provided by the user; available only for \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" and \"address\" types. Can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#data="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#email","text":"Optional. User's verified email address; available only for \"email\" type View source","title":"#email"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#email=(email)","text":"Optional. User's verified email address; available only for \"email\" type View source","title":"#email="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#files","text":"Optional. Array of encrypted files with documents provided by the user; available only for \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#files"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#files=(files)","text":"Optional. Array of encrypted files with documents provided by the user; available only for \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#files="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#front_side","text":"Optional. Encrypted file with the front side of the document, provided by the user; available only for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#front_side"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#front_side=(front_side)","text":"Optional. Encrypted file with the front side of the document, provided by the user; available only for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#front_side="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#hash","text":"Base64-encoded element hash for using in PassportElementErrorUnspecified View source","title":"#hash"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#hash=(hash)","text":"Base64-encoded element hash for using in PassportElementErrorUnspecified View source","title":"#hash="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#phone_number","text":"Optional. User's verified phone number; available only for \"phone_number\" type View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#phone_number=(phone_number)","text":"Optional. User's verified phone number; available only for \"phone_number\" type View source","title":"#phone_number="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#reverse_side","text":"Optional. Encrypted file with the reverse side of the document, provided by the user; available only for \"driver_license\" and \"identity_card\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#reverse_side"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#reverse_side=(reverse_side)","text":"Optional. Encrypted file with the reverse side of the document, provided by the user; available only for \"driver_license\" and \"identity_card\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#reverse_side="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#selfie","text":"Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#selfie"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#selfie=(selfie)","text":"Optional. Encrypted file with the selfie of the user holding a document, provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\" and \"internal_passport\". The file can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#selfie="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#translation","text":"Optional. Array of encrypted files with translated versions of documents provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#translation"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#translation=(translation)","text":"Optional. Array of encrypted files with translated versions of documents provided by the user; available if requested for \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\" and \"temporary_registration\" types. Files can be decrypted and verified using the accompanying EncryptedCredentials. View source","title":"#translation="},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#type","text":"Element type. One of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\", \"phone_number\", \"email\". View source","title":"#type"},{"location":"api_reference/Tourmaline/EncryptedPassportElement/#Tourmaline::EncryptedPassportElement#type=(type)","text":"Element type. One of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\", \"phone_number\", \"email\". View source","title":"#type="},{"location":"api_reference/Tourmaline/Error/","text":"class Tourmaline::Error inherits Exception # Direct known subclasses Tourmaline::Error::BadRequest Tourmaline::Error::ConflictError Tourmaline::Error::MigrateToChat Tourmaline::Error::NetworkError Tourmaline::Error::RetryAfter Tourmaline::Error::Throttled Tourmaline::Error::Unauthorized Tourmaline::Error::ValidationError Constants # ERROR_PREFIXES = [ \"error: \" , \"[error]: \" , \"bad request: \" , \"conflict: \" , \"not found: \" ] # Constructors # .new ( message = \"\" ) # View source Class methods # .from_message ( text ) # View source","title":"Error"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error","text":"","title":"Error"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error::ERROR_PREFIXES","text":"","title":"ERROR_PREFIXES"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error.new(message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/Error/#Tourmaline::Error.from_message(text)","text":"View source","title":".from_message"},{"location":"api_reference/Tourmaline/Error/BadRequest/","text":"class Tourmaline::Error::BadRequest inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::BadWebhook Tourmaline::Error::BotDomainInvalid Tourmaline::Error::ButtonDataInvalid Tourmaline::Error::ButtonURLInvalid Tourmaline::Error::CantDemoteChatCreator Tourmaline::Error::CantParseEntities Tourmaline::Error::CantParseUrl Tourmaline::Error::CantRemoveChatOwner Tourmaline::Error::CantRestrictSelf Tourmaline::Error::ChatAdminRequired Tourmaline::Error::ChatDescriptionIsNotModified Tourmaline::Error::ChatIdIsEmpty Tourmaline::Error::ChatNotFound Tourmaline::Error::CurrencyTotalAmountInvalid Tourmaline::Error::GroupDeactivated Tourmaline::Error::InlineKeyboardExpected Tourmaline::Error::InvalidHTTPUrlContent Tourmaline::Error::InvalidPeerID Tourmaline::Error::InvalidQueryID Tourmaline::Error::InvalidResultID Tourmaline::Error::InvalidStickersSet Tourmaline::Error::InvalidUserId Tourmaline::Error::MemberListInaccessible Tourmaline::Error::MessageError Tourmaline::Error::MethodIsNotAvailable Tourmaline::Error::MethodNotAvailableInPrivateChats Tourmaline::Error::NeedAdministratorRightsInTheChannel Tourmaline::Error::NoStickerInRequest Tourmaline::Error::NotEnoughRightsOther Tourmaline::Error::NotEnoughRightsToPinMessage Tourmaline::Error::NotEnoughRightsToRestrict Tourmaline::Error::NotFound Tourmaline::Error::ObjectExpectedAsReplyMarkup Tourmaline::Error::PaymentProviderInvalid Tourmaline::Error::PhotoAsInputFileRequired Tourmaline::Error::PhotoDimensions Tourmaline::Error::PollError Tourmaline::Error::RequestTimeoutError Tourmaline::Error::ResultIdDuplicate Tourmaline::Error::StartParamInvalid Tourmaline::Error::TypeOfFileMismatch Tourmaline::Error::UnavailableMembers Tourmaline::Error::UnsupportedUrlProtocol Tourmaline::Error::URLHostIsEmpty Tourmaline::Error::UserNotFound Tourmaline::Error::WrongFileIdentifier Tourmaline::Error::WrongLiveLocationPeriod Tourmaline::Error::WrongRemoteFileIdSpecified","title":"BadRequest"},{"location":"api_reference/Tourmaline/Error/BadRequest/#Tourmaline::Error::BadRequest","text":"","title":"BadRequest"},{"location":"api_reference/Tourmaline/Error/BadWebhook/","text":"class Tourmaline::Error::BadWebhook inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::BadWebhookAddrInfo Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname Tourmaline::Error::BadWebhookPort Tourmaline::Error::WebhookRequireHTTPS","title":"BadWebhook"},{"location":"api_reference/Tourmaline/Error/BadWebhook/#Tourmaline::Error::BadWebhook","text":"","title":"BadWebhook"},{"location":"api_reference/Tourmaline/Error/BadWebhookAddrInfo/","text":"class Tourmaline::Error::BadWebhookAddrInfo inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookAddrInfo"},{"location":"api_reference/Tourmaline/Error/BadWebhookAddrInfo/#Tourmaline::Error::BadWebhookAddrInfo","text":"","title":"BadWebhookAddrInfo"},{"location":"api_reference/Tourmaline/Error/BadWebhookNoAddressAssociatedWithHostname/","text":"class Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookNoAddressAssociatedWithHostname"},{"location":"api_reference/Tourmaline/Error/BadWebhookNoAddressAssociatedWithHostname/#Tourmaline::Error::BadWebhookNoAddressAssociatedWithHostname","text":"","title":"BadWebhookNoAddressAssociatedWithHostname"},{"location":"api_reference/Tourmaline/Error/BadWebhookPort/","text":"class Tourmaline::Error::BadWebhookPort inherits Tourmaline::Error::BadWebhook #","title":"BadWebhookPort"},{"location":"api_reference/Tourmaline/Error/BadWebhookPort/#Tourmaline::Error::BadWebhookPort","text":"","title":"BadWebhookPort"},{"location":"api_reference/Tourmaline/Error/BotBlocked/","text":"class Tourmaline::Error::BotBlocked inherits Tourmaline::Error::Unauthorized #","title":"BotBlocked"},{"location":"api_reference/Tourmaline/Error/BotBlocked/#Tourmaline::Error::BotBlocked","text":"","title":"BotBlocked"},{"location":"api_reference/Tourmaline/Error/BotDomainInvalid/","text":"class Tourmaline::Error::BotDomainInvalid inherits Tourmaline::Error::BadRequest #","title":"BotDomainInvalid"},{"location":"api_reference/Tourmaline/Error/BotDomainInvalid/#Tourmaline::Error::BotDomainInvalid","text":"","title":"BotDomainInvalid"},{"location":"api_reference/Tourmaline/Error/BotKicked/","text":"class Tourmaline::Error::BotKicked inherits Tourmaline::Error::Unauthorized #","title":"BotKicked"},{"location":"api_reference/Tourmaline/Error/BotKicked/#Tourmaline::Error::BotKicked","text":"","title":"BotKicked"},{"location":"api_reference/Tourmaline/Error/ButtonDataInvalid/","text":"class Tourmaline::Error::ButtonDataInvalid inherits Tourmaline::Error::BadRequest #","title":"ButtonDataInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonDataInvalid/#Tourmaline::Error::ButtonDataInvalid","text":"","title":"ButtonDataInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonURLInvalid/","text":"class Tourmaline::Error::ButtonURLInvalid inherits Tourmaline::Error::BadRequest #","title":"ButtonURLInvalid"},{"location":"api_reference/Tourmaline/Error/ButtonURLInvalid/#Tourmaline::Error::ButtonURLInvalid","text":"","title":"ButtonURLInvalid"},{"location":"api_reference/Tourmaline/Error/CantDemoteChatCreator/","text":"class Tourmaline::Error::CantDemoteChatCreator inherits Tourmaline::Error::BadRequest #","title":"CantDemoteChatCreator"},{"location":"api_reference/Tourmaline/Error/CantDemoteChatCreator/#Tourmaline::Error::CantDemoteChatCreator","text":"","title":"CantDemoteChatCreator"},{"location":"api_reference/Tourmaline/Error/CantGetUpdates/","text":"class Tourmaline::Error::CantGetUpdates inherits Tourmaline::Error::ConflictError #","title":"CantGetUpdates"},{"location":"api_reference/Tourmaline/Error/CantGetUpdates/#Tourmaline::Error::CantGetUpdates","text":"","title":"CantGetUpdates"},{"location":"api_reference/Tourmaline/Error/CantInitiateConversation/","text":"class Tourmaline::Error::CantInitiateConversation inherits Tourmaline::Error::Unauthorized #","title":"CantInitiateConversation"},{"location":"api_reference/Tourmaline/Error/CantInitiateConversation/#Tourmaline::Error::CantInitiateConversation","text":"","title":"CantInitiateConversation"},{"location":"api_reference/Tourmaline/Error/CantParseEntities/","text":"class Tourmaline::Error::CantParseEntities inherits Tourmaline::Error::BadRequest #","title":"CantParseEntities"},{"location":"api_reference/Tourmaline/Error/CantParseEntities/#Tourmaline::Error::CantParseEntities","text":"","title":"CantParseEntities"},{"location":"api_reference/Tourmaline/Error/CantParseUrl/","text":"class Tourmaline::Error::CantParseUrl inherits Tourmaline::Error::BadRequest #","title":"CantParseUrl"},{"location":"api_reference/Tourmaline/Error/CantParseUrl/#Tourmaline::Error::CantParseUrl","text":"","title":"CantParseUrl"},{"location":"api_reference/Tourmaline/Error/CantRemoveChatOwner/","text":"class Tourmaline::Error::CantRemoveChatOwner inherits Tourmaline::Error::BadRequest #","title":"CantRemoveChatOwner"},{"location":"api_reference/Tourmaline/Error/CantRemoveChatOwner/#Tourmaline::Error::CantRemoveChatOwner","text":"","title":"CantRemoveChatOwner"},{"location":"api_reference/Tourmaline/Error/CantRestrictSelf/","text":"class Tourmaline::Error::CantRestrictSelf inherits Tourmaline::Error::BadRequest #","title":"CantRestrictSelf"},{"location":"api_reference/Tourmaline/Error/CantRestrictSelf/#Tourmaline::Error::CantRestrictSelf","text":"","title":"CantRestrictSelf"},{"location":"api_reference/Tourmaline/Error/CantTalkWithBots/","text":"class Tourmaline::Error::CantTalkWithBots inherits Tourmaline::Error::Unauthorized #","title":"CantTalkWithBots"},{"location":"api_reference/Tourmaline/Error/CantTalkWithBots/#Tourmaline::Error::CantTalkWithBots","text":"","title":"CantTalkWithBots"},{"location":"api_reference/Tourmaline/Error/ChatAdminRequired/","text":"class Tourmaline::Error::ChatAdminRequired inherits Tourmaline::Error::BadRequest #","title":"ChatAdminRequired"},{"location":"api_reference/Tourmaline/Error/ChatAdminRequired/#Tourmaline::Error::ChatAdminRequired","text":"","title":"ChatAdminRequired"},{"location":"api_reference/Tourmaline/Error/ChatDescriptionIsNotModified/","text":"class Tourmaline::Error::ChatDescriptionIsNotModified inherits Tourmaline::Error::BadRequest #","title":"ChatDescriptionIsNotModified"},{"location":"api_reference/Tourmaline/Error/ChatDescriptionIsNotModified/#Tourmaline::Error::ChatDescriptionIsNotModified","text":"","title":"ChatDescriptionIsNotModified"},{"location":"api_reference/Tourmaline/Error/ChatIdIsEmpty/","text":"class Tourmaline::Error::ChatIdIsEmpty inherits Tourmaline::Error::BadRequest #","title":"ChatIdIsEmpty"},{"location":"api_reference/Tourmaline/Error/ChatIdIsEmpty/#Tourmaline::Error::ChatIdIsEmpty","text":"","title":"ChatIdIsEmpty"},{"location":"api_reference/Tourmaline/Error/ChatNotFound/","text":"class Tourmaline::Error::ChatNotFound inherits Tourmaline::Error::BadRequest #","title":"ChatNotFound"},{"location":"api_reference/Tourmaline/Error/ChatNotFound/#Tourmaline::Error::ChatNotFound","text":"","title":"ChatNotFound"},{"location":"api_reference/Tourmaline/Error/ConflictError/","text":"class Tourmaline::Error::ConflictError inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::CantGetUpdates Tourmaline::Error::TerminatedByOtherGetUpdates","title":"ConflictError"},{"location":"api_reference/Tourmaline/Error/ConflictError/#Tourmaline::Error::ConflictError","text":"","title":"ConflictError"},{"location":"api_reference/Tourmaline/Error/ConnectionLost/","text":"class Tourmaline::Error::ConnectionLost inherits DB::PoolResourceLost # Raised when a connection is unable to be established probably due to socket/network or configuration issues. It is used by the connection pool retry logic.","title":"ConnectionLost"},{"location":"api_reference/Tourmaline/Error/ConnectionLost/#Tourmaline::Error::ConnectionLost","text":"Raised when a connection is unable to be established probably due to socket/network or configuration issues. It is used by the connection pool retry logic.","title":"ConnectionLost"},{"location":"api_reference/Tourmaline/Error/CurrencyTotalAmountInvalid/","text":"class Tourmaline::Error::CurrencyTotalAmountInvalid inherits Tourmaline::Error::BadRequest #","title":"CurrencyTotalAmountInvalid"},{"location":"api_reference/Tourmaline/Error/CurrencyTotalAmountInvalid/#Tourmaline::Error::CurrencyTotalAmountInvalid","text":"","title":"CurrencyTotalAmountInvalid"},{"location":"api_reference/Tourmaline/Error/GroupDeactivated/","text":"class Tourmaline::Error::GroupDeactivated inherits Tourmaline::Error::BadRequest #","title":"GroupDeactivated"},{"location":"api_reference/Tourmaline/Error/GroupDeactivated/#Tourmaline::Error::GroupDeactivated","text":"","title":"GroupDeactivated"},{"location":"api_reference/Tourmaline/Error/InlineKeyboardExpected/","text":"class Tourmaline::Error::InlineKeyboardExpected inherits Tourmaline::Error::BadRequest #","title":"InlineKeyboardExpected"},{"location":"api_reference/Tourmaline/Error/InlineKeyboardExpected/#Tourmaline::Error::InlineKeyboardExpected","text":"","title":"InlineKeyboardExpected"},{"location":"api_reference/Tourmaline/Error/InvalidHTTPUrlContent/","text":"class Tourmaline::Error::InvalidHTTPUrlContent inherits Tourmaline::Error::BadRequest #","title":"InvalidHTTPUrlContent"},{"location":"api_reference/Tourmaline/Error/InvalidHTTPUrlContent/#Tourmaline::Error::InvalidHTTPUrlContent","text":"","title":"InvalidHTTPUrlContent"},{"location":"api_reference/Tourmaline/Error/InvalidPeerID/","text":"class Tourmaline::Error::InvalidPeerID inherits Tourmaline::Error::BadRequest #","title":"InvalidPeerID"},{"location":"api_reference/Tourmaline/Error/InvalidPeerID/#Tourmaline::Error::InvalidPeerID","text":"","title":"InvalidPeerID"},{"location":"api_reference/Tourmaline/Error/InvalidQueryID/","text":"class Tourmaline::Error::InvalidQueryID inherits Tourmaline::Error::BadRequest #","title":"InvalidQueryID"},{"location":"api_reference/Tourmaline/Error/InvalidQueryID/#Tourmaline::Error::InvalidQueryID","text":"","title":"InvalidQueryID"},{"location":"api_reference/Tourmaline/Error/InvalidResultID/","text":"class Tourmaline::Error::InvalidResultID inherits Tourmaline::Error::BadRequest #","title":"InvalidResultID"},{"location":"api_reference/Tourmaline/Error/InvalidResultID/#Tourmaline::Error::InvalidResultID","text":"","title":"InvalidResultID"},{"location":"api_reference/Tourmaline/Error/InvalidStickersSet/","text":"class Tourmaline::Error::InvalidStickersSet inherits Tourmaline::Error::BadRequest #","title":"InvalidStickersSet"},{"location":"api_reference/Tourmaline/Error/InvalidStickersSet/#Tourmaline::Error::InvalidStickersSet","text":"","title":"InvalidStickersSet"},{"location":"api_reference/Tourmaline/Error/InvalidUserId/","text":"class Tourmaline::Error::InvalidUserId inherits Tourmaline::Error::BadRequest #","title":"InvalidUserId"},{"location":"api_reference/Tourmaline/Error/InvalidUserId/#Tourmaline::Error::InvalidUserId","text":"","title":"InvalidUserId"},{"location":"api_reference/Tourmaline/Error/MemberListInaccessible/","text":"class Tourmaline::Error::MemberListInaccessible inherits Tourmaline::Error::BadRequest #","title":"MemberListInaccessible"},{"location":"api_reference/Tourmaline/Error/MemberListInaccessible/#Tourmaline::Error::MemberListInaccessible","text":"","title":"MemberListInaccessible"},{"location":"api_reference/Tourmaline/Error/MessageCantBeDeleted/","text":"class Tourmaline::Error::MessageCantBeDeleted inherits Tourmaline::Error::MessageError #","title":"MessageCantBeDeleted"},{"location":"api_reference/Tourmaline/Error/MessageCantBeDeleted/#Tourmaline::Error::MessageCantBeDeleted","text":"","title":"MessageCantBeDeleted"},{"location":"api_reference/Tourmaline/Error/MessageCantBeEdited/","text":"class Tourmaline::Error::MessageCantBeEdited inherits Tourmaline::Error::MessageError #","title":"MessageCantBeEdited"},{"location":"api_reference/Tourmaline/Error/MessageCantBeEdited/#Tourmaline::Error::MessageCantBeEdited","text":"","title":"MessageCantBeEdited"},{"location":"api_reference/Tourmaline/Error/MessageError/","text":"class Tourmaline::Error::MessageError inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::MessageCantBeDeleted Tourmaline::Error::MessageCantBeEdited Tourmaline::Error::MessageIdentifierNotSpecified Tourmaline::Error::MessageIdInvalid Tourmaline::Error::MessageIsNotAPoll Tourmaline::Error::MessageIsTooLong Tourmaline::Error::MessageNotModified Tourmaline::Error::MessageTextIsEmpty Tourmaline::Error::MessageToDeleteNotFound Tourmaline::Error::MessageToEditNotFound Tourmaline::Error::MessageToForwardNotFound Tourmaline::Error::MessageToReplyNotFound Tourmaline::Error::MessageWithPollNotFound Tourmaline::Error::PollCantBeStopped Tourmaline::Error::PollHasAlreadyClosed Tourmaline::Error::PollsCantBeSentToPrivateChats Tourmaline::Error::TooMuchMessages","title":"MessageError"},{"location":"api_reference/Tourmaline/Error/MessageError/#Tourmaline::Error::MessageError","text":"","title":"MessageError"},{"location":"api_reference/Tourmaline/Error/MessageIdInvalid/","text":"class Tourmaline::Error::MessageIdInvalid inherits Tourmaline::Error::MessageError #","title":"MessageIdInvalid"},{"location":"api_reference/Tourmaline/Error/MessageIdInvalid/#Tourmaline::Error::MessageIdInvalid","text":"","title":"MessageIdInvalid"},{"location":"api_reference/Tourmaline/Error/MessageIdentifierNotSpecified/","text":"class Tourmaline::Error::MessageIdentifierNotSpecified inherits Tourmaline::Error::MessageError #","title":"MessageIdentifierNotSpecified"},{"location":"api_reference/Tourmaline/Error/MessageIdentifierNotSpecified/#Tourmaline::Error::MessageIdentifierNotSpecified","text":"","title":"MessageIdentifierNotSpecified"},{"location":"api_reference/Tourmaline/Error/MessageIsNotAPoll/","text":"class Tourmaline::Error::MessageIsNotAPoll inherits Tourmaline::Error::MessageError #","title":"MessageIsNotAPoll"},{"location":"api_reference/Tourmaline/Error/MessageIsNotAPoll/#Tourmaline::Error::MessageIsNotAPoll","text":"","title":"MessageIsNotAPoll"},{"location":"api_reference/Tourmaline/Error/MessageIsTooLong/","text":"class Tourmaline::Error::MessageIsTooLong inherits Tourmaline::Error::MessageError #","title":"MessageIsTooLong"},{"location":"api_reference/Tourmaline/Error/MessageIsTooLong/#Tourmaline::Error::MessageIsTooLong","text":"","title":"MessageIsTooLong"},{"location":"api_reference/Tourmaline/Error/MessageNotModified/","text":"class Tourmaline::Error::MessageNotModified inherits Tourmaline::Error::MessageError #","title":"MessageNotModified"},{"location":"api_reference/Tourmaline/Error/MessageNotModified/#Tourmaline::Error::MessageNotModified","text":"","title":"MessageNotModified"},{"location":"api_reference/Tourmaline/Error/MessageTextIsEmpty/","text":"class Tourmaline::Error::MessageTextIsEmpty inherits Tourmaline::Error::MessageError #","title":"MessageTextIsEmpty"},{"location":"api_reference/Tourmaline/Error/MessageTextIsEmpty/#Tourmaline::Error::MessageTextIsEmpty","text":"","title":"MessageTextIsEmpty"},{"location":"api_reference/Tourmaline/Error/MessageToDeleteNotFound/","text":"class Tourmaline::Error::MessageToDeleteNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToDeleteNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToDeleteNotFound/#Tourmaline::Error::MessageToDeleteNotFound","text":"","title":"MessageToDeleteNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToEditNotFound/","text":"class Tourmaline::Error::MessageToEditNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToEditNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToEditNotFound/#Tourmaline::Error::MessageToEditNotFound","text":"","title":"MessageToEditNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToForwardNotFound/","text":"class Tourmaline::Error::MessageToForwardNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToForwardNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToForwardNotFound/#Tourmaline::Error::MessageToForwardNotFound","text":"","title":"MessageToForwardNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToReplyNotFound/","text":"class Tourmaline::Error::MessageToReplyNotFound inherits Tourmaline::Error::MessageError #","title":"MessageToReplyNotFound"},{"location":"api_reference/Tourmaline/Error/MessageToReplyNotFound/#Tourmaline::Error::MessageToReplyNotFound","text":"","title":"MessageToReplyNotFound"},{"location":"api_reference/Tourmaline/Error/MessageWithPollNotFound/","text":"class Tourmaline::Error::MessageWithPollNotFound inherits Tourmaline::Error::MessageError #","title":"MessageWithPollNotFound"},{"location":"api_reference/Tourmaline/Error/MessageWithPollNotFound/#Tourmaline::Error::MessageWithPollNotFound","text":"","title":"MessageWithPollNotFound"},{"location":"api_reference/Tourmaline/Error/MethodIsNotAvailable/","text":"class Tourmaline::Error::MethodIsNotAvailable inherits Tourmaline::Error::BadRequest #","title":"MethodIsNotAvailable"},{"location":"api_reference/Tourmaline/Error/MethodIsNotAvailable/#Tourmaline::Error::MethodIsNotAvailable","text":"","title":"MethodIsNotAvailable"},{"location":"api_reference/Tourmaline/Error/MethodNotAvailableInPrivateChats/","text":"class Tourmaline::Error::MethodNotAvailableInPrivateChats inherits Tourmaline::Error::BadRequest #","title":"MethodNotAvailableInPrivateChats"},{"location":"api_reference/Tourmaline/Error/MethodNotAvailableInPrivateChats/#Tourmaline::Error::MethodNotAvailableInPrivateChats","text":"","title":"MethodNotAvailableInPrivateChats"},{"location":"api_reference/Tourmaline/Error/MethodNotKnown/","text":"class Tourmaline::Error::MethodNotKnown inherits Tourmaline::Error::NotFound #","title":"MethodNotKnown"},{"location":"api_reference/Tourmaline/Error/MethodNotKnown/#Tourmaline::Error::MethodNotKnown","text":"","title":"MethodNotKnown"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/","text":"class Tourmaline::Error::MigrateToChat inherits Tourmaline::Error # Constructors # .new ( chat_id ) # View source Methods # #chat_id : Int64 # View source","title":"MigrateToChat"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat","text":"","title":"MigrateToChat"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat.new(chat_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Error/MigrateToChat/#Tourmaline::Error::MigrateToChat#chat_id","text":"View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/Error/NeedAdministratorRightsInTheChannel/","text":"class Tourmaline::Error::NeedAdministratorRightsInTheChannel inherits Tourmaline::Error::BadRequest #","title":"NeedAdministratorRightsInTheChannel"},{"location":"api_reference/Tourmaline/Error/NeedAdministratorRightsInTheChannel/#Tourmaline::Error::NeedAdministratorRightsInTheChannel","text":"","title":"NeedAdministratorRightsInTheChannel"},{"location":"api_reference/Tourmaline/Error/NetworkError/","text":"class Tourmaline::Error::NetworkError inherits Tourmaline::Error #","title":"NetworkError"},{"location":"api_reference/Tourmaline/Error/NetworkError/#Tourmaline::Error::NetworkError","text":"","title":"NetworkError"},{"location":"api_reference/Tourmaline/Error/NoStickerInRequest/","text":"class Tourmaline::Error::NoStickerInRequest inherits Tourmaline::Error::BadRequest #","title":"NoStickerInRequest"},{"location":"api_reference/Tourmaline/Error/NoStickerInRequest/#Tourmaline::Error::NoStickerInRequest","text":"","title":"NoStickerInRequest"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsOther/","text":"class Tourmaline::Error::NotEnoughRightsOther inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsOther"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsOther/#Tourmaline::Error::NotEnoughRightsOther","text":"","title":"NotEnoughRightsOther"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToPinMessage/","text":"class Tourmaline::Error::NotEnoughRightsToPinMessage inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsToPinMessage"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToPinMessage/#Tourmaline::Error::NotEnoughRightsToPinMessage","text":"","title":"NotEnoughRightsToPinMessage"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToRestrict/","text":"class Tourmaline::Error::NotEnoughRightsToRestrict inherits Tourmaline::Error::BadRequest #","title":"NotEnoughRightsToRestrict"},{"location":"api_reference/Tourmaline/Error/NotEnoughRightsToRestrict/#Tourmaline::Error::NotEnoughRightsToRestrict","text":"","title":"NotEnoughRightsToRestrict"},{"location":"api_reference/Tourmaline/Error/NotFound/","text":"class Tourmaline::Error::NotFound inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::MethodNotKnown","title":"NotFound"},{"location":"api_reference/Tourmaline/Error/NotFound/#Tourmaline::Error::NotFound","text":"","title":"NotFound"},{"location":"api_reference/Tourmaline/Error/ObjectExpectedAsReplyMarkup/","text":"class Tourmaline::Error::ObjectExpectedAsReplyMarkup inherits Tourmaline::Error::BadRequest #","title":"ObjectExpectedAsReplyMarkup"},{"location":"api_reference/Tourmaline/Error/ObjectExpectedAsReplyMarkup/#Tourmaline::Error::ObjectExpectedAsReplyMarkup","text":"","title":"ObjectExpectedAsReplyMarkup"},{"location":"api_reference/Tourmaline/Error/PaymentProviderInvalid/","text":"class Tourmaline::Error::PaymentProviderInvalid inherits Tourmaline::Error::BadRequest #","title":"PaymentProviderInvalid"},{"location":"api_reference/Tourmaline/Error/PaymentProviderInvalid/#Tourmaline::Error::PaymentProviderInvalid","text":"","title":"PaymentProviderInvalid"},{"location":"api_reference/Tourmaline/Error/PhotoAsInputFileRequired/","text":"class Tourmaline::Error::PhotoAsInputFileRequired inherits Tourmaline::Error::BadRequest #","title":"PhotoAsInputFileRequired"},{"location":"api_reference/Tourmaline/Error/PhotoAsInputFileRequired/#Tourmaline::Error::PhotoAsInputFileRequired","text":"","title":"PhotoAsInputFileRequired"},{"location":"api_reference/Tourmaline/Error/PhotoDimensions/","text":"class Tourmaline::Error::PhotoDimensions inherits Tourmaline::Error::BadRequest #","title":"PhotoDimensions"},{"location":"api_reference/Tourmaline/Error/PhotoDimensions/#Tourmaline::Error::PhotoDimensions","text":"","title":"PhotoDimensions"},{"location":"api_reference/Tourmaline/Error/PollCantBeStopped/","text":"class Tourmaline::Error::PollCantBeStopped inherits Tourmaline::Error::MessageError #","title":"PollCantBeStopped"},{"location":"api_reference/Tourmaline/Error/PollCantBeStopped/#Tourmaline::Error::PollCantBeStopped","text":"","title":"PollCantBeStopped"},{"location":"api_reference/Tourmaline/Error/PollCantHaveMoreOptions/","text":"class Tourmaline::Error::PollCantHaveMoreOptions inherits Tourmaline::Error::PollError #","title":"PollCantHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollCantHaveMoreOptions/#Tourmaline::Error::PollCantHaveMoreOptions","text":"","title":"PollCantHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollError/","text":"class Tourmaline::Error::PollError inherits Tourmaline::Error::BadRequest # Direct known subclasses Tourmaline::Error::PollCantHaveMoreOptions Tourmaline::Error::PollMustHaveMoreOptions Tourmaline::Error::PollOptionsMustBeNonEmpty Tourmaline::Error::PollQuestionMustBeNonEmpty Tourmaline::Error::PollSizeError Tourmaline::Error::PollsOptionsLengthTooLong","title":"PollError"},{"location":"api_reference/Tourmaline/Error/PollError/#Tourmaline::Error::PollError","text":"","title":"PollError"},{"location":"api_reference/Tourmaline/Error/PollHasAlreadyClosed/","text":"class Tourmaline::Error::PollHasAlreadyClosed inherits Tourmaline::Error::MessageError #","title":"PollHasAlreadyClosed"},{"location":"api_reference/Tourmaline/Error/PollHasAlreadyClosed/#Tourmaline::Error::PollHasAlreadyClosed","text":"","title":"PollHasAlreadyClosed"},{"location":"api_reference/Tourmaline/Error/PollMustHaveMoreOptions/","text":"class Tourmaline::Error::PollMustHaveMoreOptions inherits Tourmaline::Error::PollError #","title":"PollMustHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollMustHaveMoreOptions/#Tourmaline::Error::PollMustHaveMoreOptions","text":"","title":"PollMustHaveMoreOptions"},{"location":"api_reference/Tourmaline/Error/PollOptionsMustBeNonEmpty/","text":"class Tourmaline::Error::PollOptionsMustBeNonEmpty inherits Tourmaline::Error::PollError #","title":"PollOptionsMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollOptionsMustBeNonEmpty/#Tourmaline::Error::PollOptionsMustBeNonEmpty","text":"","title":"PollOptionsMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollQuestionMustBeNonEmpty/","text":"class Tourmaline::Error::PollQuestionMustBeNonEmpty inherits Tourmaline::Error::PollError #","title":"PollQuestionMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollQuestionMustBeNonEmpty/#Tourmaline::Error::PollQuestionMustBeNonEmpty","text":"","title":"PollQuestionMustBeNonEmpty"},{"location":"api_reference/Tourmaline/Error/PollSizeError/","text":"class Tourmaline::Error::PollSizeError inherits Tourmaline::Error::PollError #","title":"PollSizeError"},{"location":"api_reference/Tourmaline/Error/PollSizeError/#Tourmaline::Error::PollSizeError","text":"","title":"PollSizeError"},{"location":"api_reference/Tourmaline/Error/PollsCantBeSentToPrivateChats/","text":"class Tourmaline::Error::PollsCantBeSentToPrivateChats inherits Tourmaline::Error::MessageError #","title":"PollsCantBeSentToPrivateChats"},{"location":"api_reference/Tourmaline/Error/PollsCantBeSentToPrivateChats/#Tourmaline::Error::PollsCantBeSentToPrivateChats","text":"","title":"PollsCantBeSentToPrivateChats"},{"location":"api_reference/Tourmaline/Error/PollsOptionsLengthTooLong/","text":"class Tourmaline::Error::PollsOptionsLengthTooLong inherits Tourmaline::Error::PollError #","title":"PollsOptionsLengthTooLong"},{"location":"api_reference/Tourmaline/Error/PollsOptionsLengthTooLong/#Tourmaline::Error::PollsOptionsLengthTooLong","text":"","title":"PollsOptionsLengthTooLong"},{"location":"api_reference/Tourmaline/Error/PoolRetryAttemptsExceeded/","text":"class Tourmaline::Error::PoolRetryAttemptsExceeded inherits DB::PoolRetryAttemptsExceeded #","title":"PoolRetryAttemptsExceeded"},{"location":"api_reference/Tourmaline/Error/PoolRetryAttemptsExceeded/#Tourmaline::Error::PoolRetryAttemptsExceeded","text":"","title":"PoolRetryAttemptsExceeded"},{"location":"api_reference/Tourmaline/Error/RequestTimeoutError/","text":"class Tourmaline::Error::RequestTimeoutError inherits Tourmaline::Error::BadRequest #","title":"RequestTimeoutError"},{"location":"api_reference/Tourmaline/Error/RequestTimeoutError/#Tourmaline::Error::RequestTimeoutError","text":"","title":"RequestTimeoutError"},{"location":"api_reference/Tourmaline/Error/ResultIdDuplicate/","text":"class Tourmaline::Error::ResultIdDuplicate inherits Tourmaline::Error::BadRequest #","title":"ResultIdDuplicate"},{"location":"api_reference/Tourmaline/Error/ResultIdDuplicate/#Tourmaline::Error::ResultIdDuplicate","text":"","title":"ResultIdDuplicate"},{"location":"api_reference/Tourmaline/Error/RetryAfter/","text":"class Tourmaline::Error::RetryAfter inherits Tourmaline::Error # Constructors # .new ( seconds ) # View source Methods # #seconds : Int32 # View source","title":"RetryAfter"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter","text":"","title":"RetryAfter"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter.new(seconds)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Error/RetryAfter/#Tourmaline::Error::RetryAfter#seconds","text":"View source","title":"#seconds"},{"location":"api_reference/Tourmaline/Error/StartParamInvalid/","text":"class Tourmaline::Error::StartParamInvalid inherits Tourmaline::Error::BadRequest #","title":"StartParamInvalid"},{"location":"api_reference/Tourmaline/Error/StartParamInvalid/#Tourmaline::Error::StartParamInvalid","text":"","title":"StartParamInvalid"},{"location":"api_reference/Tourmaline/Error/TerminatedByOtherGetUpdates/","text":"class Tourmaline::Error::TerminatedByOtherGetUpdates inherits Tourmaline::Error::ConflictError #","title":"TerminatedByOtherGetUpdates"},{"location":"api_reference/Tourmaline/Error/TerminatedByOtherGetUpdates/#Tourmaline::Error::TerminatedByOtherGetUpdates","text":"","title":"TerminatedByOtherGetUpdates"},{"location":"api_reference/Tourmaline/Error/Throttled/","text":"class Tourmaline::Error::Throttled inherits Tourmaline::Error #","title":"Throttled"},{"location":"api_reference/Tourmaline/Error/Throttled/#Tourmaline::Error::Throttled","text":"","title":"Throttled"},{"location":"api_reference/Tourmaline/Error/TooMuchMessages/","text":"class Tourmaline::Error::TooMuchMessages inherits Tourmaline::Error::MessageError #","title":"TooMuchMessages"},{"location":"api_reference/Tourmaline/Error/TooMuchMessages/#Tourmaline::Error::TooMuchMessages","text":"","title":"TooMuchMessages"},{"location":"api_reference/Tourmaline/Error/TypeOfFileMismatch/","text":"class Tourmaline::Error::TypeOfFileMismatch inherits Tourmaline::Error::BadRequest #","title":"TypeOfFileMismatch"},{"location":"api_reference/Tourmaline/Error/TypeOfFileMismatch/#Tourmaline::Error::TypeOfFileMismatch","text":"","title":"TypeOfFileMismatch"},{"location":"api_reference/Tourmaline/Error/URLHostIsEmpty/","text":"class Tourmaline::Error::URLHostIsEmpty inherits Tourmaline::Error::BadRequest #","title":"URLHostIsEmpty"},{"location":"api_reference/Tourmaline/Error/URLHostIsEmpty/#Tourmaline::Error::URLHostIsEmpty","text":"","title":"URLHostIsEmpty"},{"location":"api_reference/Tourmaline/Error/Unauthorized/","text":"class Tourmaline::Error::Unauthorized inherits Tourmaline::Error # Direct known subclasses Tourmaline::Error::BotBlocked Tourmaline::Error::BotKicked Tourmaline::Error::CantInitiateConversation Tourmaline::Error::CantTalkWithBots Tourmaline::Error::UserDeactivated","title":"Unauthorized"},{"location":"api_reference/Tourmaline/Error/Unauthorized/#Tourmaline::Error::Unauthorized","text":"","title":"Unauthorized"},{"location":"api_reference/Tourmaline/Error/UnavailableMembers/","text":"class Tourmaline::Error::UnavailableMembers inherits Tourmaline::Error::BadRequest #","title":"UnavailableMembers"},{"location":"api_reference/Tourmaline/Error/UnavailableMembers/#Tourmaline::Error::UnavailableMembers","text":"","title":"UnavailableMembers"},{"location":"api_reference/Tourmaline/Error/UnsupportedUrlProtocol/","text":"class Tourmaline::Error::UnsupportedUrlProtocol inherits Tourmaline::Error::BadRequest #","title":"UnsupportedUrlProtocol"},{"location":"api_reference/Tourmaline/Error/UnsupportedUrlProtocol/#Tourmaline::Error::UnsupportedUrlProtocol","text":"","title":"UnsupportedUrlProtocol"},{"location":"api_reference/Tourmaline/Error/UserDeactivated/","text":"class Tourmaline::Error::UserDeactivated inherits Tourmaline::Error::Unauthorized #","title":"UserDeactivated"},{"location":"api_reference/Tourmaline/Error/UserDeactivated/#Tourmaline::Error::UserDeactivated","text":"","title":"UserDeactivated"},{"location":"api_reference/Tourmaline/Error/UserNotFound/","text":"class Tourmaline::Error::UserNotFound inherits Tourmaline::Error::BadRequest #","title":"UserNotFound"},{"location":"api_reference/Tourmaline/Error/UserNotFound/#Tourmaline::Error::UserNotFound","text":"","title":"UserNotFound"},{"location":"api_reference/Tourmaline/Error/ValidationError/","text":"class Tourmaline::Error::ValidationError inherits Tourmaline::Error #","title":"ValidationError"},{"location":"api_reference/Tourmaline/Error/ValidationError/#Tourmaline::Error::ValidationError","text":"","title":"ValidationError"},{"location":"api_reference/Tourmaline/Error/WebhookRequireHTTPS/","text":"class Tourmaline::Error::WebhookRequireHTTPS inherits Tourmaline::Error::BadWebhook #","title":"WebhookRequireHTTPS"},{"location":"api_reference/Tourmaline/Error/WebhookRequireHTTPS/#Tourmaline::Error::WebhookRequireHTTPS","text":"","title":"WebhookRequireHTTPS"},{"location":"api_reference/Tourmaline/Error/WrongFileIdentifier/","text":"class Tourmaline::Error::WrongFileIdentifier inherits Tourmaline::Error::BadRequest #","title":"WrongFileIdentifier"},{"location":"api_reference/Tourmaline/Error/WrongFileIdentifier/#Tourmaline::Error::WrongFileIdentifier","text":"","title":"WrongFileIdentifier"},{"location":"api_reference/Tourmaline/Error/WrongLiveLocationPeriod/","text":"class Tourmaline::Error::WrongLiveLocationPeriod inherits Tourmaline::Error::BadRequest #","title":"WrongLiveLocationPeriod"},{"location":"api_reference/Tourmaline/Error/WrongLiveLocationPeriod/#Tourmaline::Error::WrongLiveLocationPeriod","text":"","title":"WrongLiveLocationPeriod"},{"location":"api_reference/Tourmaline/Error/WrongRemoteFileIdSpecified/","text":"class Tourmaline::Error::WrongRemoteFileIdSpecified inherits Tourmaline::Error::BadRequest #","title":"WrongRemoteFileIdSpecified"},{"location":"api_reference/Tourmaline/Error/WrongRemoteFileIdSpecified/#Tourmaline::Error::WrongRemoteFileIdSpecified","text":"","title":"WrongRemoteFileIdSpecified"},{"location":"api_reference/Tourmaline/EventHandler/","text":"abstract class Tourmaline::EventHandler inherits Reference # Direct known subclasses Tourmaline::CallbackQueryHandler Tourmaline::CommandHandler Tourmaline::HearsHandler Tourmaline::InlineQueryHandler Methods # abstract #actions : Array ( UpdateAction ) # View source abstract #call ( ctx : Tourmaline::Context ) # View source","title":"EventHandler"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler","text":"","title":"EventHandler"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/EventHandler/#Tourmaline::EventHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/EventHandlerProc/","text":"alias Tourmaline::EventHandlerProc # Alias definition Tourmaline::Context -> Nil","title":"EventHandlerProc"},{"location":"api_reference/Tourmaline/EventHandlerProc/#Tourmaline::EventHandlerProc","text":"","title":"EventHandlerProc"},{"location":"api_reference/Tourmaline/EventHandlerType/","text":"alias Tourmaline::EventHandlerType # Alias definition Tourmaline::Context -> Nil | Tourmaline::EventHandler","title":"EventHandlerType"},{"location":"api_reference/Tourmaline/EventHandlerType/#Tourmaline::EventHandlerType","text":"","title":"EventHandlerType"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/","text":"class Tourmaline::ExternalReplyInfo inherits Reference # This object contains information about a message that is being replied to, which may come from another chat or forum topic. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( origin , chat : Tourmaline::Chat? = nil , message_id : Int32 | Int64 | Nil = nil , link_preview_options : Tourmaline::LinkPreviewOptions? = nil , animation : Tourmaline::Animation? = nil , audio : Tourmaline::Audio? = nil , document : Tourmaline::Document? = nil , photo : Array ( Tourmaline::PhotoSize ) = [] of Tourmaline :: PhotoSize , sticker : Tourmaline::Sticker? = nil , story : Tourmaline::Story? = nil , video : Tourmaline::Video? = nil , video_note : Tourmaline::VideoNote? = nil , voice : Tourmaline::Voice? = nil , has_media_spoiler : Bool? = nil , contact : Tourmaline::Contact? = nil , dice : Tourmaline::Dice? = nil , game : Tourmaline::Game? = nil , giveaway : Tourmaline::Giveaway? = nil , giveaway_winners : Tourmaline::GiveawayWinners? = nil , invoice : Tourmaline::Invoice? = nil , location : Tourmaline::Location? = nil , poll : Tourmaline::Poll? = nil , venue : Tourmaline::Venue? = nil ) # View source Methods # #animation : Tourmaline::Animation? # Optional. Message is an animation, information about the animation View source #animation= ( animation : Tourmaline::Animation? ) # Optional. Message is an animation, information about the animation View source #audio : Tourmaline::Audio? # Optional. Message is an audio file, information about the file View source #audio= ( audio : Tourmaline::Audio? ) # Optional. Message is an audio file, information about the file View source #chat : Tourmaline::Chat? # Optional. Chat the original message belongs to. Available only if the chat is a supergroup or a channel. View source #chat= ( chat : Tourmaline::Chat? ) # Optional. Chat the original message belongs to. Available only if the chat is a supergroup or a channel. View source #contact : Tourmaline::Contact? # Optional. Message is a shared contact, information about the contact View source #contact= ( contact : Tourmaline::Contact? ) # Optional. Message is a shared contact, information about the contact View source #dice : Tourmaline::Dice? # Optional. Message is a dice with random value View source #dice= ( dice : Tourmaline::Dice? ) # Optional. Message is a dice with random value View source #document : Tourmaline::Document? # Optional. Message is a general file, information about the file View source #document= ( document : Tourmaline::Document? ) # Optional. Message is a general file, information about the file View source #game : Tourmaline::Game? # Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source #game= ( game : Tourmaline::Game? ) # Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source #giveaway : Tourmaline::Giveaway? # Optional. Message is a scheduled giveaway, information about the giveaway View source #giveaway= ( giveaway : Tourmaline::Giveaway? ) # Optional. Message is a scheduled giveaway, information about the giveaway View source #giveaway_winners : Tourmaline::GiveawayWinners? # Optional. A giveaway with public winners was completed View source #giveaway_winners= ( giveaway_winners : Tourmaline::GiveawayWinners? ) # Optional. A giveaway with public winners was completed View source #has_media_spoiler= ( has_media_spoiler : Bool? ) # Optional. True, if the message media is covered by a spoiler animation View source #has_media_spoiler? : Bool? # Optional. True, if the message media is covered by a spoiler animation View source #invoice : Tourmaline::Invoice? # Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source #invoice= ( invoice : Tourmaline::Invoice? ) # Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source #link_preview_options : Tourmaline::LinkPreviewOptions? # Optional. Options used for link preview generation for the original message, if it is a text message View source #link_preview_options= ( link_preview_options : Tourmaline::LinkPreviewOptions? ) # Optional. Options used for link preview generation for the original message, if it is a text message View source #location : Tourmaline::Location? # Optional. Message is a shared location, information about the location View source #location= ( location : Tourmaline::Location? ) # Optional. Message is a shared location, information about the location View source #message_id : Int32 | Int64 | Nil # Optional. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel. View source #message_id= ( message_id : Int32 | Int64 | Nil ) # Optional. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel. View source #origin : Tourmaline::MessageOrigin # Origin of the message replied to by the given message View source #origin= ( origin : Tourmaline::MessageOrigin ) # Origin of the message replied to by the given message View source #photo : Array ( Tourmaline::PhotoSize ) # Optional. Message is a photo, available sizes of the photo View source #photo= ( photo : Array ( Tourmaline::PhotoSize )) # Optional. Message is a photo, available sizes of the photo View source #poll : Tourmaline::Poll? # Optional. Message is a native poll, information about the poll View source #poll= ( poll : Tourmaline::Poll? ) # Optional. Message is a native poll, information about the poll View source #sticker : Tourmaline::Sticker? # Optional. Message is a sticker, information about the sticker View source #sticker= ( sticker : Tourmaline::Sticker? ) # Optional. Message is a sticker, information about the sticker View source #story : Tourmaline::Story? # Optional. Message is a forwarded story View source #story= ( story : Tourmaline::Story? ) # Optional. Message is a forwarded story View source #venue : Tourmaline::Venue? # Optional. Message is a venue, information about the venue View source #venue= ( venue : Tourmaline::Venue? ) # Optional. Message is a venue, information about the venue View source #video : Tourmaline::Video? # Optional. Message is a video, information about the video View source #video= ( video : Tourmaline::Video? ) # Optional. Message is a video, information about the video View source #video_note : Tourmaline::VideoNote? # Optional. Message is a video note, information about the video message View source #video_note= ( video_note : Tourmaline::VideoNote? ) # Optional. Message is a video note, information about the video message View source #voice : Tourmaline::Voice? # Optional. Message is a voice message, information about the file View source #voice= ( voice : Tourmaline::Voice? ) # Optional. Message is a voice message, information about the file View source","title":"ExternalReplyInfo"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo","text":"This object contains information about a message that is being replied to, which may come from another chat or forum topic.","title":"ExternalReplyInfo"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#animation","text":"Optional. Message is an animation, information about the animation View source","title":"#animation"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#animation=(animation)","text":"Optional. Message is an animation, information about the animation View source","title":"#animation="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#audio","text":"Optional. Message is an audio file, information about the file View source","title":"#audio"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#audio=(audio)","text":"Optional. Message is an audio file, information about the file View source","title":"#audio="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#chat","text":"Optional. Chat the original message belongs to. Available only if the chat is a supergroup or a channel. View source","title":"#chat"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#chat=(chat)","text":"Optional. Chat the original message belongs to. Available only if the chat is a supergroup or a channel. View source","title":"#chat="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#contact","text":"Optional. Message is a shared contact, information about the contact View source","title":"#contact"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#contact=(contact)","text":"Optional. Message is a shared contact, information about the contact View source","title":"#contact="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#dice","text":"Optional. Message is a dice with random value View source","title":"#dice"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#dice=(dice)","text":"Optional. Message is a dice with random value View source","title":"#dice="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#document","text":"Optional. Message is a general file, information about the file View source","title":"#document"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#document=(document)","text":"Optional. Message is a general file, information about the file View source","title":"#document="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#game","text":"Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source","title":"#game"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#game=(game)","text":"Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source","title":"#game="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#giveaway","text":"Optional. Message is a scheduled giveaway, information about the giveaway View source","title":"#giveaway"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#giveaway=(giveaway)","text":"Optional. Message is a scheduled giveaway, information about the giveaway View source","title":"#giveaway="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#giveaway_winners","text":"Optional. A giveaway with public winners was completed View source","title":"#giveaway_winners"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#giveaway_winners=(giveaway_winners)","text":"Optional. A giveaway with public winners was completed View source","title":"#giveaway_winners="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#has_media_spoiler=(has_media_spoiler)","text":"Optional. True, if the message media is covered by a spoiler animation View source","title":"#has_media_spoiler="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#has_media_spoiler?","text":"Optional. True, if the message media is covered by a spoiler animation View source","title":"#has_media_spoiler?"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#invoice","text":"Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source","title":"#invoice"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#invoice=(invoice)","text":"Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source","title":"#invoice="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#link_preview_options","text":"Optional. Options used for link preview generation for the original message, if it is a text message View source","title":"#link_preview_options"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#link_preview_options=(link_preview_options)","text":"Optional. Options used for link preview generation for the original message, if it is a text message View source","title":"#link_preview_options="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#location","text":"Optional. Message is a shared location, information about the location View source","title":"#location"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#location=(location)","text":"Optional. Message is a shared location, information about the location View source","title":"#location="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#message_id","text":"Optional. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel. View source","title":"#message_id"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#message_id=(message_id)","text":"Optional. Unique message identifier inside the original chat. Available only if the original chat is a supergroup or a channel. View source","title":"#message_id="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#origin","text":"Origin of the message replied to by the given message View source","title":"#origin"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#origin=(origin)","text":"Origin of the message replied to by the given message View source","title":"#origin="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#photo","text":"Optional. Message is a photo, available sizes of the photo View source","title":"#photo"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#photo=(photo)","text":"Optional. Message is a photo, available sizes of the photo View source","title":"#photo="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#poll","text":"Optional. Message is a native poll, information about the poll View source","title":"#poll"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#poll=(poll)","text":"Optional. Message is a native poll, information about the poll View source","title":"#poll="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#sticker","text":"Optional. Message is a sticker, information about the sticker View source","title":"#sticker"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#sticker=(sticker)","text":"Optional. Message is a sticker, information about the sticker View source","title":"#sticker="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#story","text":"Optional. Message is a forwarded story View source","title":"#story"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#story=(story)","text":"Optional. Message is a forwarded story View source","title":"#story="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#venue","text":"Optional. Message is a venue, information about the venue View source","title":"#venue"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#venue=(venue)","text":"Optional. Message is a venue, information about the venue View source","title":"#venue="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#video","text":"Optional. Message is a video, information about the video View source","title":"#video"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#video=(video)","text":"Optional. Message is a video, information about the video View source","title":"#video="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#video_note","text":"Optional. Message is a video note, information about the video message View source","title":"#video_note"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#video_note=(video_note)","text":"Optional. Message is a video note, information about the video message View source","title":"#video_note="},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#voice","text":"Optional. Message is a voice message, information about the file View source","title":"#voice"},{"location":"api_reference/Tourmaline/ExternalReplyInfo/#Tourmaline::ExternalReplyInfo#voice=(voice)","text":"Optional. Message is a voice message, information about the file View source","title":"#voice="},{"location":"api_reference/Tourmaline/File/","text":"class Tourmaline::File inherits Reference # This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot <token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile. Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , file_size : Int32 | Int64 | Nil = nil , file_path : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_path : String? # Optional. File path. Use https://api.telegram.org/file/bot <token>/<file_path> to get the file. View source #file_path= ( file_path : String? ) # Optional. File path. Use https://api.telegram.org/file/bot <token>/<file_path> to get the file. View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #link # View source","title":"File"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File","text":"This object represents a file ready to be downloaded. The file can be downloaded via the link https://api.telegram.org/file/bot <token>/<file_path>. It is guaranteed that the link will be valid for at least 1 hour. When the link expires, a new one can be requested by calling getFile.","title":"File"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File.new(file_id,file_unique_id,file_size,file_path)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_path","text":"Optional. File path. Use https://api.telegram.org/file/bot <token>/<file_path> to get the file. View source","title":"#file_path"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_path=(file_path)","text":"Optional. File path. Use https://api.telegram.org/file/bot <token>/<file_path> to get the file. View source","title":"#file_path="},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_size","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_size=(file_size)","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size="},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/File/#Tourmaline::File#link","text":"View source","title":"#link"},{"location":"api_reference/Tourmaline/ForceReply/","text":"class Tourmaline::ForceReply inherits Reference # Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Not supported in channels and for messages sent on behalf of a Telegram Business account. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( force_reply , input_field_placeholder : String? = nil , selective : Bool? = nil ) # View source Methods # #force_reply= ( force_reply : Bool ) # Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply' View source #force_reply? : Bool # Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply' View source #input_field_placeholder : String? # Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters View source #input_field_placeholder= ( input_field_placeholder : String? ) # Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters View source #selective= ( selective : Bool? ) # Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. View source #selective? : Bool? # Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. View source","title":"ForceReply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply","text":"Upon receiving a message with this object, Telegram clients will display a reply interface to the user (act as if the user has selected the bot's message and tapped 'Reply'). This can be extremely useful if you want to create user-friendly step-by-step interfaces without having to sacrifice privacy mode. Not supported in channels and for messages sent on behalf of a Telegram Business account.","title":"ForceReply"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#force_reply=(force_reply)","text":"Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply' View source","title":"#force_reply="},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#force_reply?","text":"Shows reply interface to the user, as if they manually selected the bot's message and tapped 'Reply' View source","title":"#force_reply?"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#input_field_placeholder","text":"Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#input_field_placeholder=(input_field_placeholder)","text":"Optional. The placeholder to be shown in the input field when the reply is active; 1-64 characters View source","title":"#input_field_placeholder="},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#selective=(selective)","text":"Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. View source","title":"#selective="},{"location":"api_reference/Tourmaline/ForceReply/#Tourmaline::ForceReply#selective?","text":"Optional. Use this parameter if you want to force reply from specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. View source","title":"#selective?"},{"location":"api_reference/Tourmaline/ForumTopic/","text":"class Tourmaline::ForumTopic inherits Reference # This object represents a forum topic. Included modules JSON::Serializable Constructors # .new ( message_thread_id , name , icon_color , icon_custom_emoji_id : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #icon_color : Int32 | Int64 # Color of the topic icon in RGB format View source #icon_color= ( icon_color : Int32 | Int64 ) # Color of the topic icon in RGB format View source #icon_custom_emoji_id : String? # Optional. Unique identifier of the custom emoji shown as the topic icon View source #icon_custom_emoji_id= ( icon_custom_emoji_id : String? ) # Optional. Unique identifier of the custom emoji shown as the topic icon View source #message_thread_id : Int32 | Int64 # Unique identifier of the forum topic View source #message_thread_id= ( message_thread_id : Int32 | Int64 ) # Unique identifier of the forum topic View source #name : String # Name of the topic View source #name= ( name : String ) # Name of the topic View source","title":"ForumTopic"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic","text":"This object represents a forum topic.","title":"ForumTopic"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic.new(message_thread_id,name,icon_color,icon_custom_emoji_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#icon_color","text":"Color of the topic icon in RGB format View source","title":"#icon_color"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#icon_color=(icon_color)","text":"Color of the topic icon in RGB format View source","title":"#icon_color="},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#icon_custom_emoji_id","text":"Optional. Unique identifier of the custom emoji shown as the topic icon View source","title":"#icon_custom_emoji_id"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#icon_custom_emoji_id=(icon_custom_emoji_id)","text":"Optional. Unique identifier of the custom emoji shown as the topic icon View source","title":"#icon_custom_emoji_id="},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#message_thread_id","text":"Unique identifier of the forum topic View source","title":"#message_thread_id"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#message_thread_id=(message_thread_id)","text":"Unique identifier of the forum topic View source","title":"#message_thread_id="},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#name","text":"Name of the topic View source","title":"#name"},{"location":"api_reference/Tourmaline/ForumTopic/#Tourmaline::ForumTopic#name=(name)","text":"Name of the topic View source","title":"#name="},{"location":"api_reference/Tourmaline/ForumTopicClosed/","text":"class Tourmaline::ForumTopicClosed inherits Reference # This object represents a service message about a forum topic closed in the chat. Currently holds no information. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"ForumTopicClosed"},{"location":"api_reference/Tourmaline/ForumTopicClosed/#Tourmaline::ForumTopicClosed","text":"This object represents a service message about a forum topic closed in the chat. Currently holds no information.","title":"ForumTopicClosed"},{"location":"api_reference/Tourmaline/ForumTopicClosed/#Tourmaline::ForumTopicClosed-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopicClosed/#Tourmaline::ForumTopicClosed.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForumTopicCreated/","text":"class Tourmaline::ForumTopicCreated inherits Reference # This object represents a service message about a new forum topic created in the chat. Included modules JSON::Serializable Constructors # .new ( name , icon_color , icon_custom_emoji_id : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #icon_color : Int32 | Int64 # Color of the topic icon in RGB format View source #icon_color= ( icon_color : Int32 | Int64 ) # Color of the topic icon in RGB format View source #icon_custom_emoji_id : String? # Optional. Unique identifier of the custom emoji shown as the topic icon View source #icon_custom_emoji_id= ( icon_custom_emoji_id : String? ) # Optional. Unique identifier of the custom emoji shown as the topic icon View source #name : String # Name of the topic View source #name= ( name : String ) # Name of the topic View source","title":"ForumTopicCreated"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated","text":"This object represents a service message about a new forum topic created in the chat.","title":"ForumTopicCreated"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated.new(name,icon_color,icon_custom_emoji_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#icon_color","text":"Color of the topic icon in RGB format View source","title":"#icon_color"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#icon_color=(icon_color)","text":"Color of the topic icon in RGB format View source","title":"#icon_color="},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#icon_custom_emoji_id","text":"Optional. Unique identifier of the custom emoji shown as the topic icon View source","title":"#icon_custom_emoji_id"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#icon_custom_emoji_id=(icon_custom_emoji_id)","text":"Optional. Unique identifier of the custom emoji shown as the topic icon View source","title":"#icon_custom_emoji_id="},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#name","text":"Name of the topic View source","title":"#name"},{"location":"api_reference/Tourmaline/ForumTopicCreated/#Tourmaline::ForumTopicCreated#name=(name)","text":"Name of the topic View source","title":"#name="},{"location":"api_reference/Tourmaline/ForumTopicEdited/","text":"class Tourmaline::ForumTopicEdited inherits Reference # This object represents a service message about an edited forum topic. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( name : String? = nil , icon_custom_emoji_id : String? = nil ) # View source Methods # #icon_custom_emoji_id : String? # Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed View source #icon_custom_emoji_id= ( icon_custom_emoji_id : String? ) # Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed View source #name : String? # Optional. New name of the topic, if it was edited View source #name= ( name : String? ) # Optional. New name of the topic, if it was edited View source","title":"ForumTopicEdited"},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited","text":"This object represents a service message about an edited forum topic.","title":"ForumTopicEdited"},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited#icon_custom_emoji_id","text":"Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed View source","title":"#icon_custom_emoji_id"},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited#icon_custom_emoji_id=(icon_custom_emoji_id)","text":"Optional. New identifier of the custom emoji shown as the topic icon, if it was edited; an empty string if the icon was removed View source","title":"#icon_custom_emoji_id="},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited#name","text":"Optional. New name of the topic, if it was edited View source","title":"#name"},{"location":"api_reference/Tourmaline/ForumTopicEdited/#Tourmaline::ForumTopicEdited#name=(name)","text":"Optional. New name of the topic, if it was edited View source","title":"#name="},{"location":"api_reference/Tourmaline/ForumTopicReopened/","text":"class Tourmaline::ForumTopicReopened inherits Reference # This object represents a service message about a forum topic reopened in the chat. Currently holds no information. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"ForumTopicReopened"},{"location":"api_reference/Tourmaline/ForumTopicReopened/#Tourmaline::ForumTopicReopened","text":"This object represents a service message about a forum topic reopened in the chat. Currently holds no information.","title":"ForumTopicReopened"},{"location":"api_reference/Tourmaline/ForumTopicReopened/#Tourmaline::ForumTopicReopened-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ForumTopicReopened/#Tourmaline::ForumTopicReopened.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Game/","text":"class Tourmaline::Game inherits Reference # This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers. Included modules JSON::Serializable Constructors # .new ( title , description , photo : Array ( Tourmaline::PhotoSize ) = [] of Tourmaline :: PhotoSize , text : String? = nil , text_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , animation : Tourmaline::Animation? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #animation : Tourmaline::Animation? # Optional. Animation that will be displayed in the game message in chats. Upload via BotFather View source #animation= ( animation : Tourmaline::Animation? ) # Optional. Animation that will be displayed in the game message in chats. Upload via BotFather View source #description : String # Description of the game View source #description= ( description : String ) # Description of the game View source #photo : Array ( Tourmaline::PhotoSize ) # Photo that will be displayed in the game message in chats. View source #photo= ( photo : Array ( Tourmaline::PhotoSize )) # Photo that will be displayed in the game message in chats. View source #text : String? # Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters. View source #text= ( text : String? ) # Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters. View source #text_entities : Array ( Tourmaline::MessageEntity ) # Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc. View source #text_entities= ( text_entities : Array ( Tourmaline::MessageEntity )) # Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc. View source #title : String # Title of the game View source #title= ( title : String ) # Title of the game View source","title":"Game"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game","text":"This object represents a game. Use BotFather to create and edit games, their short names will act as unique identifiers.","title":"Game"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game.new(title,description,photo,text,text_entities,animation)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#animation","text":"Optional. Animation that will be displayed in the game message in chats. Upload via BotFather View source","title":"#animation"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#animation=(animation)","text":"Optional. Animation that will be displayed in the game message in chats. Upload via BotFather View source","title":"#animation="},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#description","text":"Description of the game View source","title":"#description"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#description=(description)","text":"Description of the game View source","title":"#description="},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#photo","text":"Photo that will be displayed in the game message in chats. View source","title":"#photo"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#photo=(photo)","text":"Photo that will be displayed in the game message in chats. View source","title":"#photo="},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text","text":"Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters. View source","title":"#text"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text=(text)","text":"Optional. Brief description of the game or high scores included in the game message. Can be automatically edited to include current high scores for the game when the bot calls setGameScore, or manually edited using editMessageText. 0-4096 characters. View source","title":"#text="},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text_entities","text":"Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc. View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#text_entities=(text_entities)","text":"Optional. Special entities that appear in text, such as usernames, URLs, bot commands, etc. View source","title":"#text_entities="},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#title","text":"Title of the game View source","title":"#title"},{"location":"api_reference/Tourmaline/Game/#Tourmaline::Game#title=(title)","text":"Title of the game View source","title":"#title="},{"location":"api_reference/Tourmaline/GameHighScore/","text":"class Tourmaline::GameHighScore inherits Reference # This object represents one row of the high scores table for a game. Included modules JSON::Serializable Constructors # .new ( position , user , score ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #position : Int32 | Int64 # Position in high score table for the game View source #position= ( position : Int32 | Int64 ) # Position in high score table for the game View source #score : Int32 | Int64 # Score View source #score= ( score : Int32 | Int64 ) # Score View source #user : Tourmaline::User # User View source #user= ( user : Tourmaline::User ) # User View source","title":"GameHighScore"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore","text":"This object represents one row of the high scores table for a game.","title":"GameHighScore"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore.new(position,user,score)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#position","text":"Position in high score table for the game View source","title":"#position"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#position=(position)","text":"Position in high score table for the game View source","title":"#position="},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#score","text":"Score View source","title":"#score"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#score=(score)","text":"Score View source","title":"#score="},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#user","text":"User View source","title":"#user"},{"location":"api_reference/Tourmaline/GameHighScore/#Tourmaline::GameHighScore#user=(user)","text":"User View source","title":"#user="},{"location":"api_reference/Tourmaline/GeneralForumTopicHidden/","text":"class Tourmaline::GeneralForumTopicHidden inherits Reference # This object represents a service message about General forum topic hidden in the chat. Currently holds no information. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"GeneralForumTopicHidden"},{"location":"api_reference/Tourmaline/GeneralForumTopicHidden/#Tourmaline::GeneralForumTopicHidden","text":"This object represents a service message about General forum topic hidden in the chat. Currently holds no information.","title":"GeneralForumTopicHidden"},{"location":"api_reference/Tourmaline/GeneralForumTopicHidden/#Tourmaline::GeneralForumTopicHidden-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GeneralForumTopicHidden/#Tourmaline::GeneralForumTopicHidden.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/GeneralForumTopicUnhidden/","text":"class Tourmaline::GeneralForumTopicUnhidden inherits Reference # This object represents a service message about General forum topic unhidden in the chat. Currently holds no information. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"GeneralForumTopicUnhidden"},{"location":"api_reference/Tourmaline/GeneralForumTopicUnhidden/#Tourmaline::GeneralForumTopicUnhidden","text":"This object represents a service message about General forum topic unhidden in the chat. Currently holds no information.","title":"GeneralForumTopicUnhidden"},{"location":"api_reference/Tourmaline/GeneralForumTopicUnhidden/#Tourmaline::GeneralForumTopicUnhidden-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GeneralForumTopicUnhidden/#Tourmaline::GeneralForumTopicUnhidden.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Giveaway/","text":"class Tourmaline::Giveaway inherits Reference # This object represents a message about a scheduled giveaway. Included modules JSON::Serializable Constructors # .new ( winners_selection_date , winner_count , chats : Array ( Tourmaline::Chat ) = [] of Tourmaline :: Chat , only_new_members : Bool? = nil , has_public_winners : Bool? = nil , prize_description : String? = nil , country_codes : Array ( String ) = [] of String , premium_subscription_month_count : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chats : Array ( Tourmaline::Chat ) # The list of chats which the user must join to participate in the giveaway View source #chats= ( chats : Array ( Tourmaline::Chat )) # The list of chats which the user must join to participate in the giveaway View source #country_codes : Array ( String ) # Optional. A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways. View source #country_codes= ( country_codes : Array ( String )) # Optional. A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways. View source #has_public_winners= ( has_public_winners : Bool? ) # Optional. True, if the list of giveaway winners will be visible to everyone View source #has_public_winners? : Bool? # Optional. True, if the list of giveaway winners will be visible to everyone View source #only_new_members= ( only_new_members : Bool? ) # Optional. True, if only users who join the chats after the giveaway started should be eligible to win View source #only_new_members? : Bool? # Optional. True, if only users who join the chats after the giveaway started should be eligible to win View source #premium_subscription_month_count : Int32 | Int64 | Nil # Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source #premium_subscription_month_count= ( premium_subscription_month_count : Int32 | Int64 | Nil ) # Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source #prize_description : String? # Optional. Description of additional giveaway prize View source #prize_description= ( prize_description : String? ) # Optional. Description of additional giveaway prize View source #winner_count : Int32 | Int64 # The number of users which are supposed to be selected as winners of the giveaway View source #winner_count= ( winner_count : Int32 | Int64 ) # The number of users which are supposed to be selected as winners of the giveaway View source #winners_selection_date : Time # View source #winners_selection_date= ( winners_selection_date : Time ) # View source","title":"Giveaway"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway","text":"This object represents a message about a scheduled giveaway.","title":"Giveaway"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway.new(winners_selection_date,winner_count,chats,only_new_members,has_public_winners,prize_description,country_codes,premium_subscription_month_count)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#chats","text":"The list of chats which the user must join to participate in the giveaway View source","title":"#chats"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#chats=(chats)","text":"The list of chats which the user must join to participate in the giveaway View source","title":"#chats="},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#country_codes","text":"Optional. A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways. View source","title":"#country_codes"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#country_codes=(country_codes)","text":"Optional. A list of two-letter ISO 3166-1 alpha-2 country codes indicating the countries from which eligible users for the giveaway must come. If empty, then all users can participate in the giveaway. Users with a phone number that was bought on Fragment can always participate in giveaways. View source","title":"#country_codes="},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#has_public_winners=(has_public_winners)","text":"Optional. True, if the list of giveaway winners will be visible to everyone View source","title":"#has_public_winners="},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#has_public_winners?","text":"Optional. True, if the list of giveaway winners will be visible to everyone View source","title":"#has_public_winners?"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#only_new_members=(only_new_members)","text":"Optional. True, if only users who join the chats after the giveaway started should be eligible to win View source","title":"#only_new_members="},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#only_new_members?","text":"Optional. True, if only users who join the chats after the giveaway started should be eligible to win View source","title":"#only_new_members?"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#premium_subscription_month_count","text":"Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source","title":"#premium_subscription_month_count"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#premium_subscription_month_count=(premium_subscription_month_count)","text":"Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source","title":"#premium_subscription_month_count="},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#prize_description","text":"Optional. Description of additional giveaway prize View source","title":"#prize_description"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#prize_description=(prize_description)","text":"Optional. Description of additional giveaway prize View source","title":"#prize_description="},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#winner_count","text":"The number of users which are supposed to be selected as winners of the giveaway View source","title":"#winner_count"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#winner_count=(winner_count)","text":"The number of users which are supposed to be selected as winners of the giveaway View source","title":"#winner_count="},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#winners_selection_date","text":"View source","title":"#winners_selection_date"},{"location":"api_reference/Tourmaline/Giveaway/#Tourmaline::Giveaway#winners_selection_date=(winners_selection_date)","text":"View source","title":"#winners_selection_date="},{"location":"api_reference/Tourmaline/GiveawayCompleted/","text":"class Tourmaline::GiveawayCompleted inherits Reference # This object represents a service message about the completion of a giveaway without public winners. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( winner_count , unclaimed_prize_count : Int32 | Int64 | Nil = nil , giveaway_message : Tourmaline::Message? = nil ) # View source Methods # #giveaway_message : Tourmaline::Message? # Optional. Message with the giveaway that was completed, if it wasn't deleted View source #giveaway_message= ( giveaway_message : Tourmaline::Message? ) # Optional. Message with the giveaway that was completed, if it wasn't deleted View source #unclaimed_prize_count : Int32 | Int64 | Nil # Optional. Number of undistributed prizes View source #unclaimed_prize_count= ( unclaimed_prize_count : Int32 | Int64 | Nil ) # Optional. Number of undistributed prizes View source #winner_count : Int32 | Int64 # Number of winners in the giveaway View source #winner_count= ( winner_count : Int32 | Int64 ) # Number of winners in the giveaway View source","title":"GiveawayCompleted"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted","text":"This object represents a service message about the completion of a giveaway without public winners.","title":"GiveawayCompleted"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted#giveaway_message","text":"Optional. Message with the giveaway that was completed, if it wasn't deleted View source","title":"#giveaway_message"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted#giveaway_message=(giveaway_message)","text":"Optional. Message with the giveaway that was completed, if it wasn't deleted View source","title":"#giveaway_message="},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted#unclaimed_prize_count","text":"Optional. Number of undistributed prizes View source","title":"#unclaimed_prize_count"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted#unclaimed_prize_count=(unclaimed_prize_count)","text":"Optional. Number of undistributed prizes View source","title":"#unclaimed_prize_count="},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted#winner_count","text":"Number of winners in the giveaway View source","title":"#winner_count"},{"location":"api_reference/Tourmaline/GiveawayCompleted/#Tourmaline::GiveawayCompleted#winner_count=(winner_count)","text":"Number of winners in the giveaway View source","title":"#winner_count="},{"location":"api_reference/Tourmaline/GiveawayCreated/","text":"class Tourmaline::GiveawayCreated inherits Reference # This object represents a service message about the creation of a scheduled giveaway. Currently holds no information. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"GiveawayCreated"},{"location":"api_reference/Tourmaline/GiveawayCreated/#Tourmaline::GiveawayCreated","text":"This object represents a service message about the creation of a scheduled giveaway. Currently holds no information.","title":"GiveawayCreated"},{"location":"api_reference/Tourmaline/GiveawayCreated/#Tourmaline::GiveawayCreated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GiveawayCreated/#Tourmaline::GiveawayCreated.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/GiveawayWinners/","text":"class Tourmaline::GiveawayWinners inherits Reference # This object represents a message about the completion of a giveaway with public winners. Included modules JSON::Serializable Constructors # .new ( chat , giveaway_message_id , winners_selection_date , winner_count , winners : Array ( Tourmaline::User ) = [] of Tourmaline :: User , additional_chat_count : Int32 | Int64 | Nil = nil , premium_subscription_month_count : Int32 | Int64 | Nil = nil , unclaimed_prize_count : Int32 | Int64 | Nil = nil , only_new_members : Bool? = nil , was_refunded : Bool? = nil , prize_description : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #additional_chat_count : Int32 | Int64 | Nil # Optional. The number of other chats the user had to join in order to be eligible for the giveaway View source #additional_chat_count= ( additional_chat_count : Int32 | Int64 | Nil ) # Optional. The number of other chats the user had to join in order to be eligible for the giveaway View source #chat : Tourmaline::Chat # The chat that created the giveaway View source #chat= ( chat : Tourmaline::Chat ) # The chat that created the giveaway View source #giveaway_message_id : Int32 | Int64 # Identifier of the message with the giveaway in the chat View source #giveaway_message_id= ( giveaway_message_id : Int32 | Int64 ) # Identifier of the message with the giveaway in the chat View source #only_new_members= ( only_new_members : Bool? ) # Optional. True, if only users who had joined the chats after the giveaway started were eligible to win View source #only_new_members? : Bool? # Optional. True, if only users who had joined the chats after the giveaway started were eligible to win View source #premium_subscription_month_count : Int32 | Int64 | Nil # Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source #premium_subscription_month_count= ( premium_subscription_month_count : Int32 | Int64 | Nil ) # Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source #prize_description : String? # Optional. Description of additional giveaway prize View source #prize_description= ( prize_description : String? ) # Optional. Description of additional giveaway prize View source #unclaimed_prize_count : Int32 | Int64 | Nil # Optional. Number of undistributed prizes View source #unclaimed_prize_count= ( unclaimed_prize_count : Int32 | Int64 | Nil ) # Optional. Number of undistributed prizes View source #was_refunded= ( was_refunded : Bool? ) # Optional. True, if the giveaway was canceled because the payment for it was refunded View source #was_refunded? : Bool? # Optional. True, if the giveaway was canceled because the payment for it was refunded View source #winner_count : Int32 | Int64 # Total number of winners in the giveaway View source #winner_count= ( winner_count : Int32 | Int64 ) # Total number of winners in the giveaway View source #winners : Array ( Tourmaline::User ) # List of up to 100 winners of the giveaway View source #winners= ( winners : Array ( Tourmaline::User )) # List of up to 100 winners of the giveaway View source #winners_selection_date : Time # View source #winners_selection_date= ( winners_selection_date : Time ) # View source","title":"GiveawayWinners"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners","text":"This object represents a message about the completion of a giveaway with public winners.","title":"GiveawayWinners"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners.new(chat,giveaway_message_id,winners_selection_date,winner_count,winners,additional_chat_count,premium_subscription_month_count,unclaimed_prize_count,only_new_members,was_refunded,prize_description)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#additional_chat_count","text":"Optional. The number of other chats the user had to join in order to be eligible for the giveaway View source","title":"#additional_chat_count"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#additional_chat_count=(additional_chat_count)","text":"Optional. The number of other chats the user had to join in order to be eligible for the giveaway View source","title":"#additional_chat_count="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#chat","text":"The chat that created the giveaway View source","title":"#chat"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#chat=(chat)","text":"The chat that created the giveaway View source","title":"#chat="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#giveaway_message_id","text":"Identifier of the message with the giveaway in the chat View source","title":"#giveaway_message_id"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#giveaway_message_id=(giveaway_message_id)","text":"Identifier of the message with the giveaway in the chat View source","title":"#giveaway_message_id="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#only_new_members=(only_new_members)","text":"Optional. True, if only users who had joined the chats after the giveaway started were eligible to win View source","title":"#only_new_members="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#only_new_members?","text":"Optional. True, if only users who had joined the chats after the giveaway started were eligible to win View source","title":"#only_new_members?"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#premium_subscription_month_count","text":"Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source","title":"#premium_subscription_month_count"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#premium_subscription_month_count=(premium_subscription_month_count)","text":"Optional. The number of months the Telegram Premium subscription won from the giveaway will be active for View source","title":"#premium_subscription_month_count="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#prize_description","text":"Optional. Description of additional giveaway prize View source","title":"#prize_description"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#prize_description=(prize_description)","text":"Optional. Description of additional giveaway prize View source","title":"#prize_description="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#unclaimed_prize_count","text":"Optional. Number of undistributed prizes View source","title":"#unclaimed_prize_count"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#unclaimed_prize_count=(unclaimed_prize_count)","text":"Optional. Number of undistributed prizes View source","title":"#unclaimed_prize_count="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#was_refunded=(was_refunded)","text":"Optional. True, if the giveaway was canceled because the payment for it was refunded View source","title":"#was_refunded="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#was_refunded?","text":"Optional. True, if the giveaway was canceled because the payment for it was refunded View source","title":"#was_refunded?"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#winner_count","text":"Total number of winners in the giveaway View source","title":"#winner_count"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#winner_count=(winner_count)","text":"Total number of winners in the giveaway View source","title":"#winner_count="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#winners","text":"List of up to 100 winners of the giveaway View source","title":"#winners"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#winners=(winners)","text":"List of up to 100 winners of the giveaway View source","title":"#winners="},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#winners_selection_date","text":"View source","title":"#winners_selection_date"},{"location":"api_reference/Tourmaline/GiveawayWinners/#Tourmaline::GiveawayWinners#winners_selection_date=(winners_selection_date)","text":"View source","title":"#winners_selection_date="},{"location":"api_reference/Tourmaline/HearsHandler/","text":"class Tourmaline::HearsHandler inherits Tourmaline::EventHandler # Constructors # .new ( pattern : String | Regex , proc : EventHandlerProc ) # View source .new ( pattern : String | Regex , & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #pattern : Regex # View source","title":"HearsHandler"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler","text":"","title":"HearsHandler"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler.new(pattern,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/HearsHandler/#Tourmaline::HearsHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/Helpers/","text":"module Tourmaline::Helpers # Extended modules Tourmaline::Helpers Constants # DEFAULT_EXTENSIONS = { audio : \"mp3\" , photo : \"jpg\" , sticker : \"webp\" , video : \"mp4\" , animation : \"mp4\" , video_note : \"mp4\" , voice : \"ogg\" } # Methods # #escape_html ( text ) # Escape the given html for use in a Telegram message. View source #escape_md ( text , version = 1 ) # Escape the given markdown for use in a Telegram message. View source #labeled_prices ( lp : Array ( NamedTuple ())) # Convenience method to create and Array of LabledPrice from an Array of NamedTuple(label: String, amount: Int32) . TODO: Replace with a builder of some kind View source #pad_utf16 ( text ) # Pad the given text with spaces to make it a multiple of 4 bytes. View source #random_string ( length , characters = nil ) # Return a random string of the given length. If characters is not given, it will default to 0..9, a..z, A..Z. View source #shipping_options ( options : Array ( NamedTuple ())) # Convenience method to create an Array of ShippingOption from a NamedTuple(id: String, title: String, prices: Array(LabeledPrice)) . TODO: Replace with a builder of some kind View source #unpad_utf16 ( text ) # Unpad the given text by removing spaces that were added to make it a multiple of 4 bytes. View source","title":"Helpers"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers","text":"","title":"Helpers"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers::DEFAULT_EXTENSIONS","text":"","title":"DEFAULT_EXTENSIONS"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#escape_html(text)","text":"Escape the given html for use in a Telegram message. View source","title":"#escape_html"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#escape_md(text,version)","text":"Escape the given markdown for use in a Telegram message. View source","title":"#escape_md"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#labeled_prices(lp)","text":"Convenience method to create and Array of LabledPrice from an Array of NamedTuple(label: String, amount: Int32) . TODO: Replace with a builder of some kind View source","title":"#labeled_prices"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#pad_utf16(text)","text":"Pad the given text with spaces to make it a multiple of 4 bytes. View source","title":"#pad_utf16"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#random_string(length,characters)","text":"Return a random string of the given length. If characters is not given, it will default to 0..9, a..z, A..Z. View source","title":"#random_string"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#shipping_options(options)","text":"Convenience method to create an Array of ShippingOption from a NamedTuple(id: String, title: String, prices: Array(LabeledPrice)) . TODO: Replace with a builder of some kind View source","title":"#shipping_options"},{"location":"api_reference/Tourmaline/Helpers/#Tourmaline::Helpers#unpad_utf16(text)","text":"Unpad the given text by removing spaces that were added to make it a multiple of 4 bytes. View source","title":"#unpad_utf16"},{"location":"api_reference/Tourmaline/InaccessibleMessage/","text":"class Tourmaline::InaccessibleMessage inherits Reference # This object describes a message that was deleted or is otherwise inaccessible to the bot. Included modules JSON::Serializable Constructors # .new ( chat , message_id , date ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat : Tourmaline::Chat # Chat the message belonged to View source #chat= ( chat : Tourmaline::Chat ) # Chat the message belonged to View source #date : Time # View source #date= ( date : Time ) # View source #message_id : Int32 | Int64 # Unique message identifier inside the chat View source #message_id= ( message_id : Int32 | Int64 ) # Unique message identifier inside the chat View source","title":"InaccessibleMessage"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage","text":"This object describes a message that was deleted or is otherwise inaccessible to the bot.","title":"InaccessibleMessage"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage.new(chat,message_id,date)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage#chat","text":"Chat the message belonged to View source","title":"#chat"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage#chat=(chat)","text":"Chat the message belonged to View source","title":"#chat="},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage#message_id","text":"Unique message identifier inside the chat View source","title":"#message_id"},{"location":"api_reference/Tourmaline/InaccessibleMessage/#Tourmaline::InaccessibleMessage#message_id=(message_id)","text":"Unique message identifier inside the chat View source","title":"#message_id="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/","text":"class Tourmaline::InlineKeyboardButton inherits Reference # This object represents one button of an inline keyboard. You must use exactly one of the optional fields. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text , url : String? = nil , callback_data : String? = nil , web_app : Tourmaline::WebAppInfo? = nil , login_url : Tourmaline::LoginUrl? = nil , switch_inline_query : String? = nil , switch_inline_query_current_chat : String? = nil , switch_inline_query_chosen_chat : Tourmaline::SwitchInlineQueryChosenChat? = nil , callback_game : Tourmaline::CallbackGame? = nil , pay : Bool? = nil ) # View source Methods # #callback_data : String? # Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes. Not supported for messages sent on behalf of a Telegram Business account. View source #callback_data= ( callback_data : String? ) # Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes. Not supported for messages sent on behalf of a Telegram Business account. View source #callback_game : Tourmaline::CallbackGame? # Optional. Description of the game that will be launched when the user presses the button. NOTE: This type of button must always be the first button in the first row. View source #callback_game= ( callback_game : Tourmaline::CallbackGame? ) # Optional. Description of the game that will be launched when the user presses the button. NOTE: This type of button must always be the first button in the first row. View source #login_url : Tourmaline::LoginUrl? # Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget. View source #login_url= ( login_url : Tourmaline::LoginUrl? ) # Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget. View source #pay= ( pay : Bool? ) # Optional. Specify True, to send a Pay button. NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages. View source #pay? : Bool? # Optional. Specify True, to send a Pay button. NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages. View source #switch_inline_query : String? # Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account. View source #switch_inline_query= ( switch_inline_query : String? ) # Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account. View source #switch_inline_query_chosen_chat : Tourmaline::SwitchInlineQueryChosenChat? # Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account. View source #switch_inline_query_chosen_chat= ( switch_inline_query_chosen_chat : Tourmaline::SwitchInlineQueryChosenChat? ) # Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account. View source #switch_inline_query_current_chat : String? # Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted. This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account. View source #switch_inline_query_current_chat= ( switch_inline_query_current_chat : String? ) # Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted. This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account. View source #text : String # Label text on the button View source #text= ( text : String ) # Label text on the button View source #url : String? # Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings. View source #url= ( url : String? ) # Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings. View source #web_app : Tourmaline::WebAppInfo? # Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account. View source #web_app= ( web_app : Tourmaline::WebAppInfo? ) # Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"InlineKeyboardButton"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton","text":"This object represents one button of an inline keyboard. You must use exactly one of the optional fields.","title":"InlineKeyboardButton"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_data","text":"Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#callback_data"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_data=(callback_data)","text":"Optional. Data to be sent in a callback query to the bot when button is pressed, 1-64 bytes. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#callback_data="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_game","text":"Optional. Description of the game that will be launched when the user presses the button. NOTE: This type of button must always be the first button in the first row. View source","title":"#callback_game"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#callback_game=(callback_game)","text":"Optional. Description of the game that will be launched when the user presses the button. NOTE: This type of button must always be the first button in the first row. View source","title":"#callback_game="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#login_url","text":"Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget. View source","title":"#login_url"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#login_url=(login_url)","text":"Optional. An HTTPS URL used to automatically authorize the user. Can be used as a replacement for the Telegram Login Widget. View source","title":"#login_url="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#pay=(pay)","text":"Optional. Specify True, to send a Pay button. NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages. View source","title":"#pay="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#pay?","text":"Optional. Specify True, to send a Pay button. NOTE: This type of button must always be the first button in the first row and can only be used in invoice messages. View source","title":"#pay?"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query","text":"Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#switch_inline_query"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query=(switch_inline_query)","text":"Optional. If set, pressing the button will prompt the user to select one of their chats, open that chat and insert the bot's username and the specified inline query in the input field. May be empty, in which case just the bot's username will be inserted. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#switch_inline_query="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_chosen_chat","text":"Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#switch_inline_query_chosen_chat"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_chosen_chat=(switch_inline_query_chosen_chat)","text":"Optional. If set, pressing the button will prompt the user to select one of their chats of the specified type, open that chat and insert the bot's username and the specified inline query in the input field. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#switch_inline_query_chosen_chat="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_current_chat","text":"Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted. This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account. View source","title":"#switch_inline_query_current_chat"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#switch_inline_query_current_chat=(switch_inline_query_current_chat)","text":"Optional. If set, pressing the button will insert the bot's username and the specified inline query in the current chat's input field. May be empty, in which case only the bot's username will be inserted. This offers a quick way for the user to open your bot in inline mode in the same chat - good for selecting something from multiple options. Not supported in channels and for messages sent on behalf of a Telegram Business account. View source","title":"#switch_inline_query_current_chat="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#text","text":"Label text on the button View source","title":"#text"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#text=(text)","text":"Label text on the button View source","title":"#text="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#url","text":"Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings. View source","title":"#url"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#url=(url)","text":"Optional. HTTP or tg:// URL to be opened when the button is pressed. Links tg://user?id=<user_id> can be used to mention a user by their identifier without using a username, if this is allowed by their privacy settings. View source","title":"#url="},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#web_app","text":"Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#web_app"},{"location":"api_reference/Tourmaline/InlineKeyboardButton/#Tourmaline::InlineKeyboardButton#web_app=(web_app)","text":"Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. Available only in private chats between a user and the bot. Not supported for messages sent on behalf of a Telegram Business account. View source","title":"#web_app="},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/","text":"class Tourmaline::InlineKeyboardMarkup inherits Reference # This object represents an inline keyboard that appears right next to the message it belongs to. Included modules JSON::Serializable Constructors # .new ( inline_keyboard : Array ( Array ( Tourmaline::InlineKeyboardButton )) = [] of Array ( Tourmaline :: InlineKeyboardButton )) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #<< ( row , btn : InlineKeyboardButton ) # View source #<< ( btns : Array ( InlineKeyboardButton )) # View source #inline_keyboard : Array ( Array ( Tourmaline::InlineKeyboardButton )) # Array of button rows, each represented by an Array of InlineKeyboardButton objects View source #inline_keyboard= ( inline_keyboard : Array ( Array ( Tourmaline::InlineKeyboardButton ))) # Array of button rows, each represented by an Array of InlineKeyboardButton objects View source","title":"InlineKeyboardMarkup"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup","text":"This object represents an inline keyboard that appears right next to the message it belongs to.","title":"InlineKeyboardMarkup"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup.new(inline_keyboard)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#<<(row,btn)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#inline_keyboard","text":"Array of button rows, each represented by an Array of InlineKeyboardButton objects View source","title":"#inline_keyboard"},{"location":"api_reference/Tourmaline/InlineKeyboardMarkup/#Tourmaline::InlineKeyboardMarkup#inline_keyboard=(inline_keyboard)","text":"Array of button rows, each represented by an Array of InlineKeyboardButton objects View source","title":"#inline_keyboard="},{"location":"api_reference/Tourmaline/InlineQuery/","text":"class Tourmaline::InlineQuery inherits Reference # This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results. Included modules JSON::Serializable Constructors # .new ( id , from , query , offset , chat_type : String? = nil , location : Tourmaline::Location? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat_type : String? # Optional. Type of the chat from which the inline query was sent. Can be either \"sender\" for a private chat with the inline query sender, \"private\", \"group\", \"supergroup\", or \"channel\". The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat View source #chat_type= ( chat_type : String? ) # Optional. Type of the chat from which the inline query was sent. Can be either \"sender\" for a private chat with the inline query sender, \"private\", \"group\", \"supergroup\", or \"channel\". The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat View source #from : Tourmaline::User # Sender View source #from= ( from : Tourmaline::User ) # Sender View source #id : String # Unique identifier for this query View source #id= ( id : String ) # Unique identifier for this query View source #location : Tourmaline::Location? # Optional. Sender location, only for bots that request user location View source #location= ( location : Tourmaline::Location? ) # Optional. Sender location, only for bots that request user location View source #offset : String # Offset of the results to be returned, can be controlled by the bot View source #offset= ( offset : String ) # Offset of the results to be returned, can be controlled by the bot View source #query : String # Text of the query (up to 256 characters) View source #query= ( query : String ) # Text of the query (up to 256 characters) View source","title":"InlineQuery"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery","text":"This object represents an incoming inline query. When the user sends an empty query, your bot could return some default or trending results.","title":"InlineQuery"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery.new(id,from,query,offset,chat_type,location)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#chat_type","text":"Optional. Type of the chat from which the inline query was sent. Can be either \"sender\" for a private chat with the inline query sender, \"private\", \"group\", \"supergroup\", or \"channel\". The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat View source","title":"#chat_type"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#chat_type=(chat_type)","text":"Optional. Type of the chat from which the inline query was sent. Can be either \"sender\" for a private chat with the inline query sender, \"private\", \"group\", \"supergroup\", or \"channel\". The chat type should be always known for requests sent from official clients and most third-party clients, unless the request was sent from a secret chat View source","title":"#chat_type="},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#from","text":"Sender View source","title":"#from"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#from=(from)","text":"Sender View source","title":"#from="},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#id","text":"Unique identifier for this query View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#id=(id)","text":"Unique identifier for this query View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#location","text":"Optional. Sender location, only for bots that request user location View source","title":"#location"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#location=(location)","text":"Optional. Sender location, only for bots that request user location View source","title":"#location="},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#offset","text":"Offset of the results to be returned, can be controlled by the bot View source","title":"#offset"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#offset=(offset)","text":"Offset of the results to be returned, can be controlled by the bot View source","title":"#offset="},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#query","text":"Text of the query (up to 256 characters) View source","title":"#query"},{"location":"api_reference/Tourmaline/InlineQuery/#Tourmaline::InlineQuery#query=(query)","text":"Text of the query (up to 256 characters) View source","title":"#query="},{"location":"api_reference/Tourmaline/InlineQueryHandler/","text":"class Tourmaline::InlineQueryHandler inherits Tourmaline::EventHandler # Constructors # .new ( pattern : String | Regex , proc : EventHandlerProc ) # View source .new ( pattern : String | Regex , & block : EventHandlerProc ) # View source Methods # #actions : Array ( UpdateAction ) # View source #call ( ctx : Context ) # View source #pattern : Regex # View source","title":"InlineQueryHandler"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler","text":"","title":"InlineQueryHandler"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler.new(pattern,proc)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler#actions","text":"View source","title":"#actions"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler#call(ctx)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/InlineQueryHandler/#Tourmaline::InlineQueryHandler#pattern","text":"View source","title":"#pattern"},{"location":"api_reference/Tourmaline/InlineQueryResult/","text":"alias Tourmaline::InlineQueryResult # This object represents one result of an inline query. Telegram clients currently support results of the following 20 types: - InlineQueryResultCachedAudio - InlineQueryResultCachedDocument - InlineQueryResultCachedGif - InlineQueryResultCachedMpeg4Gif - InlineQueryResultCachedPhoto - InlineQueryResultCachedSticker - InlineQueryResultCachedVideo - InlineQueryResultCachedVoice - InlineQueryResultArticle - InlineQueryResultAudio - InlineQueryResultContact - InlineQueryResultGame - InlineQueryResultDocument - InlineQueryResultGif - InlineQueryResultLocation - InlineQueryResultMpeg4Gif - InlineQueryResultPhoto - InlineQueryResultVenue - InlineQueryResultVideo - InlineQueryResultVoice Note: All URLs passed in inline query results will be available to end users and therefore must be assumed to be public. Alias definition Tourmaline::InlineQueryResultArticle | Tourmaline::InlineQueryResultAudio | Tourmaline::InlineQueryResultCachedAudio | Tourmaline::InlineQueryResultCachedDocument | Tourmaline::InlineQueryResultCachedGif | Tourmaline::InlineQueryResultCachedMpeg4Gif | Tourmaline::InlineQueryResultCachedPhoto | Tourmaline::InlineQueryResultCachedSticker | Tourmaline::InlineQueryResultCachedVideo | Tourmaline::InlineQueryResultCachedVoice | Tourmaline::InlineQueryResultContact | Tourmaline::InlineQueryResultDocument | Tourmaline::InlineQueryResultGame | Tourmaline::InlineQueryResultGif | Tourmaline::InlineQueryResultLocation | Tourmaline::InlineQueryResultMpeg4Gif | Tourmaline::InlineQueryResultPhoto | Tourmaline::InlineQueryResultVenue | Tourmaline::InlineQueryResultVideo | Tourmaline::InlineQueryResultVoice","title":"InlineQueryResult"},{"location":"api_reference/Tourmaline/InlineQueryResult/#Tourmaline::InlineQueryResult","text":"This object represents one result of an inline query. Telegram clients currently support results of the following 20 types: - InlineQueryResultCachedAudio - InlineQueryResultCachedDocument - InlineQueryResultCachedGif - InlineQueryResultCachedMpeg4Gif - InlineQueryResultCachedPhoto - InlineQueryResultCachedSticker - InlineQueryResultCachedVideo - InlineQueryResultCachedVoice - InlineQueryResultArticle - InlineQueryResultAudio - InlineQueryResultContact - InlineQueryResultGame - InlineQueryResultDocument - InlineQueryResultGif - InlineQueryResultLocation - InlineQueryResultMpeg4Gif - InlineQueryResultPhoto - InlineQueryResultVenue - InlineQueryResultVideo - InlineQueryResultVoice Note: All URLs passed in inline query results will be available to end users and therefore must be assumed to be public.","title":"InlineQueryResult"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/","text":"class Tourmaline::InlineQueryResultArticle inherits Reference # Represents a link to an article or web page. Included modules JSON::Serializable Constructors # .new ( id , title , input_message_content , type = \"article\" , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , url : String? = nil , hide_url : Bool? = nil , description : String? = nil , thumbnail_url : String? = nil , thumbnail_width : Int32 | Int64 | Nil = nil , thumbnail_height : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #description : String? # Optional. Short description of the result View source #description= ( description : String? ) # Optional. Short description of the result View source #hide_url= ( hide_url : Bool? ) # Optional. Pass True if you don't want the URL to be shown in the message View source #hide_url? : Bool? # Optional. Pass True if you don't want the URL to be shown in the message View source #id : String # Unique identifier for this result, 1-64 Bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 Bytes View source #input_message_content : Tourmaline::InputMessageContent # Content of the message to be sent View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent ) # Content of the message to be sent View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_height : Int32 | Int64 | Nil # Optional. Thumbnail height View source #thumbnail_height= ( thumbnail_height : Int32 | Int64 | Nil ) # Optional. Thumbnail height View source #thumbnail_url : String? # Optional. Url of the thumbnail for the result View source #thumbnail_url= ( thumbnail_url : String? ) # Optional. Url of the thumbnail for the result View source #thumbnail_width : Int32 | Int64 | Nil # Optional. Thumbnail width View source #thumbnail_width= ( thumbnail_width : Int32 | Int64 | Nil ) # Optional. Thumbnail width View source #title : String # Title of the result View source #title= ( title : String ) # Title of the result View source #type : String # Type of the result, must be article View source #type= ( type : String ) # Type of the result, must be article View source #url : String? # Optional. URL of the result View source #url= ( url : String? ) # Optional. URL of the result View source","title":"InlineQueryResultArticle"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle","text":"Represents a link to an article or web page.","title":"InlineQueryResultArticle"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle.new(id,title,input_message_content,type,reply_markup,url,hide_url,description,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#description","text":"Optional. Short description of the result View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#description=(description)","text":"Optional. Short description of the result View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#hide_url=(hide_url)","text":"Optional. Pass True if you don't want the URL to be shown in the message View source","title":"#hide_url="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#hide_url?","text":"Optional. Pass True if you don't want the URL to be shown in the message View source","title":"#hide_url?"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#id","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#id=(id)","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#input_message_content","text":"Content of the message to be sent View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#input_message_content=(input_message_content)","text":"Content of the message to be sent View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_height","text":"Optional. Thumbnail height View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_height=(thumbnail_height)","text":"Optional. Thumbnail height View source","title":"#thumbnail_height="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_url","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_url=(thumbnail_url)","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_width","text":"Optional. Thumbnail width View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#thumbnail_width=(thumbnail_width)","text":"Optional. Thumbnail width View source","title":"#thumbnail_width="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#title","text":"Title of the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#title=(title)","text":"Title of the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#type","text":"Type of the result, must be article View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#type=(type)","text":"Type of the result, must be article View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#url","text":"Optional. URL of the result View source","title":"#url"},{"location":"api_reference/Tourmaline/InlineQueryResultArticle/#Tourmaline::InlineQueryResultArticle#url=(url)","text":"Optional. URL of the result View source","title":"#url="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/","text":"class Tourmaline::InlineQueryResultAudio inherits Reference # Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio. Included modules JSON::Serializable Constructors # .new ( id , audio_url , title , type = \"audio\" , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , performer : String? = nil , audio_duration : Int32 | Int64 | Nil = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #audio_duration : Int32 | Int64 | Nil # Optional. Audio duration in seconds View source #audio_duration= ( audio_duration : Int32 | Int64 | Nil ) # Optional. Audio duration in seconds View source #audio_url : String # A valid URL for the audio file View source #audio_url= ( audio_url : String ) # A valid URL for the audio file View source #caption : String? # Optional. Caption, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the audio View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the audio View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source #performer : String? # Optional. Performer View source #performer= ( performer : String? ) # Optional. Performer View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String # Title View source #title= ( title : String ) # Title View source #type : String # Type of the result, must be audio View source #type= ( type : String ) # Type of the result, must be audio View source","title":"InlineQueryResultAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio","text":"Represents a link to an MP3 audio file. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.","title":"InlineQueryResultAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio.new(id,audio_url,title,type,caption,parse_mode,caption_entities,performer,audio_duration,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_duration","text":"Optional. Audio duration in seconds View source","title":"#audio_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_duration=(audio_duration)","text":"Optional. Audio duration in seconds View source","title":"#audio_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_url","text":"A valid URL for the audio file View source","title":"#audio_url"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#audio_url=(audio_url)","text":"A valid URL for the audio file View source","title":"#audio_url="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#caption","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#caption=(caption)","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#input_message_content","text":"Optional. Content of the message to be sent instead of the audio View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the audio View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#parse_mode","text":"Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#performer","text":"Optional. Performer View source","title":"#performer"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#performer=(performer)","text":"Optional. Performer View source","title":"#performer="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#title","text":"Title View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#title=(title)","text":"Title View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#type","text":"Type of the result, must be audio View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultAudio/#Tourmaline::InlineQueryResultAudio#type=(type)","text":"Type of the result, must be audio View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/","text":"class Tourmaline::InlineQueryResultCachedAudio inherits Reference # Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio. Included modules JSON::Serializable Constructors # .new ( id , audio_file_id , type = \"audio\" , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #audio_file_id : String # A valid file identifier for the audio file View source #audio_file_id= ( audio_file_id : String ) # A valid file identifier for the audio file View source #caption : String? # Optional. Caption, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the audio View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the audio View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #type : String # Type of the result, must be audio View source #type= ( type : String ) # Type of the result, must be audio View source","title":"InlineQueryResultCachedAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio","text":"Represents a link to an MP3 audio file stored on the Telegram servers. By default, this audio file will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the audio.","title":"InlineQueryResultCachedAudio"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio.new(id,audio_file_id,type,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#audio_file_id","text":"A valid file identifier for the audio file View source","title":"#audio_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#audio_file_id=(audio_file_id)","text":"A valid file identifier for the audio file View source","title":"#audio_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#caption","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#caption=(caption)","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#input_message_content","text":"Optional. Content of the message to be sent instead of the audio View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the audio View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#parse_mode","text":"Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#type","text":"Type of the result, must be audio View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedAudio/#Tourmaline::InlineQueryResultCachedAudio#type=(type)","text":"Type of the result, must be audio View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/","text":"class Tourmaline::InlineQueryResultCachedDocument inherits Reference # Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Included modules JSON::Serializable Constructors # .new ( id , title , document_file_id , type = \"document\" , description : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #description : String? # Optional. Short description of the result View source #description= ( description : String? ) # Optional. Short description of the result View source #document_file_id : String # A valid file identifier for the file View source #document_file_id= ( document_file_id : String ) # A valid file identifier for the file View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the file View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the file View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String # Title for the result View source #title= ( title : String ) # Title for the result View source #type : String # Type of the result, must be document View source #type= ( type : String ) # Type of the result, must be document View source","title":"InlineQueryResultCachedDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument","text":"Represents a link to a file stored on the Telegram servers. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file.","title":"InlineQueryResultCachedDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument.new(id,title,document_file_id,type,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption","text":"Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption=(caption)","text":"Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#description","text":"Optional. Short description of the result View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#description=(description)","text":"Optional. Short description of the result View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#document_file_id","text":"A valid file identifier for the file View source","title":"#document_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#document_file_id=(document_file_id)","text":"A valid file identifier for the file View source","title":"#document_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#input_message_content","text":"Optional. Content of the message to be sent instead of the file View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the file View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#parse_mode","text":"Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#title","text":"Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#title=(title)","text":"Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#type","text":"Type of the result, must be document View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedDocument/#Tourmaline::InlineQueryResultCachedDocument#type=(type)","text":"Type of the result, must be document View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/","text":"class Tourmaline::InlineQueryResultCachedGif inherits Reference # Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation. Included modules JSON::Serializable Constructors # .new ( id , gif_file_id , type = \"gif\" , title : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #gif_file_id : String # A valid file identifier for the GIF file View source #gif_file_id= ( gif_file_id : String ) # A valid file identifier for the GIF file View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the GIF animation View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the GIF animation View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String? # Optional. Title for the result View source #title= ( title : String? ) # Optional. Title for the result View source #type : String # Type of the result, must be gif View source #type= ( type : String ) # Type of the result, must be gif View source","title":"InlineQueryResultCachedGif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif","text":"Represents a link to an animated GIF file stored on the Telegram servers. By default, this animated GIF file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with specified content instead of the animation.","title":"InlineQueryResultCachedGif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif.new(id,gif_file_id,type,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption","text":"Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption=(caption)","text":"Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#gif_file_id","text":"A valid file identifier for the GIF file View source","title":"#gif_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#gif_file_id=(gif_file_id)","text":"A valid file identifier for the GIF file View source","title":"#gif_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#input_message_content","text":"Optional. Content of the message to be sent instead of the GIF animation View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the GIF animation View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#parse_mode","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#title","text":"Optional. Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#title=(title)","text":"Optional. Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#type","text":"Type of the result, must be gif View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedGif/#Tourmaline::InlineQueryResultCachedGif#type=(type)","text":"Type of the result, must be gif View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/","text":"class Tourmaline::InlineQueryResultCachedMpeg4Gif inherits Reference # Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation. Included modules JSON::Serializable Constructors # .new ( id , mpeg4_file_id , type = \"mpeg4_gif\" , title : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the video animation View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the video animation View source #mpeg4_file_id : String # A valid file identifier for the MPEG4 file View source #mpeg4_file_id= ( mpeg4_file_id : String ) # A valid file identifier for the MPEG4 file View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String? # Optional. Title for the result View source #title= ( title : String? ) # Optional. Title for the result View source #type : String # Type of the result, must be mpeg4_gif View source #type= ( type : String ) # Type of the result, must be mpeg4_gif View source","title":"InlineQueryResultCachedMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif","text":"Represents a link to a video animation (H.264/MPEG-4 AVC video without sound) stored on the Telegram servers. By default, this animated MPEG-4 file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.","title":"InlineQueryResultCachedMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif.new(id,mpeg4_file_id,type,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption","text":"Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption=(caption)","text":"Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#input_message_content","text":"Optional. Content of the message to be sent instead of the video animation View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the video animation View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#mpeg4_file_id","text":"A valid file identifier for the MPEG4 file View source","title":"#mpeg4_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#mpeg4_file_id=(mpeg4_file_id)","text":"A valid file identifier for the MPEG4 file View source","title":"#mpeg4_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#parse_mode","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#title","text":"Optional. Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#title=(title)","text":"Optional. Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#type","text":"Type of the result, must be mpeg4_gif View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedMpeg4Gif/#Tourmaline::InlineQueryResultCachedMpeg4Gif#type=(type)","text":"Type of the result, must be mpeg4_gif View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/","text":"class Tourmaline::InlineQueryResultCachedPhoto inherits Reference # Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo. Included modules JSON::Serializable Constructors # .new ( id , photo_file_id , type = \"photo\" , title : String? = nil , description : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #description : String? # Optional. Short description of the result View source #description= ( description : String? ) # Optional. Short description of the result View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the photo View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the photo View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source #photo_file_id : String # A valid file identifier of the photo View source #photo_file_id= ( photo_file_id : String ) # A valid file identifier of the photo View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String? # Optional. Title for the result View source #title= ( title : String? ) # Optional. Title for the result View source #type : String # Type of the result, must be photo View source #type= ( type : String ) # Type of the result, must be photo View source","title":"InlineQueryResultCachedPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto","text":"Represents a link to a photo stored on the Telegram servers. By default, this photo will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.","title":"InlineQueryResultCachedPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto.new(id,photo_file_id,type,title,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption","text":"Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption=(caption)","text":"Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#description","text":"Optional. Short description of the result View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#description=(description)","text":"Optional. Short description of the result View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#input_message_content","text":"Optional. Content of the message to be sent instead of the photo View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the photo View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#parse_mode","text":"Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#photo_file_id","text":"A valid file identifier of the photo View source","title":"#photo_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#photo_file_id=(photo_file_id)","text":"A valid file identifier of the photo View source","title":"#photo_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#title","text":"Optional. Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#title=(title)","text":"Optional. Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#type","text":"Type of the result, must be photo View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedPhoto/#Tourmaline::InlineQueryResultCachedPhoto#type=(type)","text":"Type of the result, must be photo View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/","text":"class Tourmaline::InlineQueryResultCachedSticker inherits Reference # Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker. Included modules JSON::Serializable Constructors # .new ( id , sticker_file_id , type = \"sticker\" , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the sticker View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the sticker View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #sticker_file_id : String # A valid file identifier of the sticker View source #sticker_file_id= ( sticker_file_id : String ) # A valid file identifier of the sticker View source #type : String # Type of the result, must be sticker View source #type= ( type : String ) # Type of the result, must be sticker View source","title":"InlineQueryResultCachedSticker"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker","text":"Represents a link to a sticker stored on the Telegram servers. By default, this sticker will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the sticker.","title":"InlineQueryResultCachedSticker"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker.new(id,sticker_file_id,type,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#input_message_content","text":"Optional. Content of the message to be sent instead of the sticker View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the sticker View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#sticker_file_id","text":"A valid file identifier of the sticker View source","title":"#sticker_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#sticker_file_id=(sticker_file_id)","text":"A valid file identifier of the sticker View source","title":"#sticker_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#type","text":"Type of the result, must be sticker View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedSticker/#Tourmaline::InlineQueryResultCachedSticker#type=(type)","text":"Type of the result, must be sticker View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/","text":"class Tourmaline::InlineQueryResultCachedVideo inherits Reference # Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video. Included modules JSON::Serializable Constructors # .new ( id , video_file_id , title , type = \"video\" , description : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #description : String? # Optional. Short description of the result View source #description= ( description : String? ) # Optional. Short description of the result View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the video View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the video View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String # Title for the result View source #title= ( title : String ) # Title for the result View source #type : String # Type of the result, must be video View source #type= ( type : String ) # Type of the result, must be video View source #video_file_id : String # A valid file identifier for the video file View source #video_file_id= ( video_file_id : String ) # A valid file identifier for the video file View source","title":"InlineQueryResultCachedVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo","text":"Represents a link to a video file stored on the Telegram servers. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.","title":"InlineQueryResultCachedVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo.new(id,video_file_id,title,type,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption","text":"Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption=(caption)","text":"Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#description","text":"Optional. Short description of the result View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#description=(description)","text":"Optional. Short description of the result View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#input_message_content","text":"Optional. Content of the message to be sent instead of the video View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the video View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#parse_mode","text":"Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#title","text":"Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#title=(title)","text":"Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#type","text":"Type of the result, must be video View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#type=(type)","text":"Type of the result, must be video View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#video_file_id","text":"A valid file identifier for the video file View source","title":"#video_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVideo/#Tourmaline::InlineQueryResultCachedVideo#video_file_id=(video_file_id)","text":"A valid file identifier for the video file View source","title":"#video_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/","text":"class Tourmaline::InlineQueryResultCachedVoice inherits Reference # Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message. Included modules JSON::Serializable Constructors # .new ( id , voice_file_id , title , type = \"voice\" , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the voice message View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the voice message View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String # Voice message title View source #title= ( title : String ) # Voice message title View source #type : String # Type of the result, must be voice View source #type= ( type : String ) # Type of the result, must be voice View source #voice_file_id : String # A valid file identifier for the voice message View source #voice_file_id= ( voice_file_id : String ) # A valid file identifier for the voice message View source","title":"InlineQueryResultCachedVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice","text":"Represents a link to a voice message stored on the Telegram servers. By default, this voice message will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the voice message.","title":"InlineQueryResultCachedVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice.new(id,voice_file_id,title,type,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#caption","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#caption=(caption)","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#input_message_content","text":"Optional. Content of the message to be sent instead of the voice message View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the voice message View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#parse_mode","text":"Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#title","text":"Voice message title View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#title=(title)","text":"Voice message title View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#type","text":"Type of the result, must be voice View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#type=(type)","text":"Type of the result, must be voice View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#voice_file_id","text":"A valid file identifier for the voice message View source","title":"#voice_file_id"},{"location":"api_reference/Tourmaline/InlineQueryResultCachedVoice/#Tourmaline::InlineQueryResultCachedVoice#voice_file_id=(voice_file_id)","text":"A valid file identifier for the voice message View source","title":"#voice_file_id="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/","text":"class Tourmaline::InlineQueryResultContact inherits Reference # Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact. Included modules JSON::Serializable Constructors # .new ( id , phone_number , first_name , type = \"contact\" , last_name : String? = nil , vcard : String? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil , thumbnail_url : String? = nil , thumbnail_width : Int32 | Int64 | Nil = nil , thumbnail_height : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # Contact's first name View source #first_name= ( first_name : String ) # Contact's first name View source #id : String # Unique identifier for this result, 1-64 Bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 Bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the contact View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the contact View source #last_name : String? # Optional. Contact's last name View source #last_name= ( last_name : String? ) # Optional. Contact's last name View source #phone_number : String # Contact's phone number View source #phone_number= ( phone_number : String ) # Contact's phone number View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_height : Int32 | Int64 | Nil # Optional. Thumbnail height View source #thumbnail_height= ( thumbnail_height : Int32 | Int64 | Nil ) # Optional. Thumbnail height View source #thumbnail_url : String? # Optional. Url of the thumbnail for the result View source #thumbnail_url= ( thumbnail_url : String? ) # Optional. Url of the thumbnail for the result View source #thumbnail_width : Int32 | Int64 | Nil # Optional. Thumbnail width View source #thumbnail_width= ( thumbnail_width : Int32 | Int64 | Nil ) # Optional. Thumbnail width View source #type : String # Type of the result, must be contact View source #type= ( type : String ) # Type of the result, must be contact View source #vcard : String? # Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source #vcard= ( vcard : String? ) # Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source","title":"InlineQueryResultContact"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact","text":"Represents a contact with a phone number. By default, this contact will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the contact.","title":"InlineQueryResultContact"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact.new(id,phone_number,first_name,type,last_name,vcard,reply_markup,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#first_name","text":"Contact's first name View source","title":"#first_name"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#first_name=(first_name)","text":"Contact's first name View source","title":"#first_name="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#id","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#id=(id)","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#input_message_content","text":"Optional. Content of the message to be sent instead of the contact View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the contact View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#last_name","text":"Optional. Contact's last name View source","title":"#last_name"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#last_name=(last_name)","text":"Optional. Contact's last name View source","title":"#last_name="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#phone_number","text":"Contact's phone number View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#phone_number=(phone_number)","text":"Contact's phone number View source","title":"#phone_number="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_height","text":"Optional. Thumbnail height View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_height=(thumbnail_height)","text":"Optional. Thumbnail height View source","title":"#thumbnail_height="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_url","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_url=(thumbnail_url)","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_width","text":"Optional. Thumbnail width View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#thumbnail_width=(thumbnail_width)","text":"Optional. Thumbnail width View source","title":"#thumbnail_width="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#type","text":"Type of the result, must be contact View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#type=(type)","text":"Type of the result, must be contact View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#vcard","text":"Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source","title":"#vcard"},{"location":"api_reference/Tourmaline/InlineQueryResultContact/#Tourmaline::InlineQueryResultContact#vcard=(vcard)","text":"Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source","title":"#vcard="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/","text":"class Tourmaline::InlineQueryResultDocument inherits Reference # Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method. Included modules JSON::Serializable Constructors # .new ( id , title , document_url , mime_type , type = \"document\" , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , description : String? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil , thumbnail_url : String? = nil , thumbnail_width : Int32 | Int64 | Nil = nil , thumbnail_height : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #description : String? # Optional. Short description of the result View source #description= ( description : String? ) # Optional. Short description of the result View source #document_url : String # A valid URL for the file View source #document_url= ( document_url : String ) # A valid URL for the file View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the file View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the file View source #mime_type : String # MIME type of the content of the file, either \"application/pdf\" or \"application/zip\" View source #mime_type= ( mime_type : String ) # MIME type of the content of the file, either \"application/pdf\" or \"application/zip\" View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_height : Int32 | Int64 | Nil # Optional. Thumbnail height View source #thumbnail_height= ( thumbnail_height : Int32 | Int64 | Nil ) # Optional. Thumbnail height View source #thumbnail_url : String? # Optional. URL of the thumbnail (JPEG only) for the file View source #thumbnail_url= ( thumbnail_url : String? ) # Optional. URL of the thumbnail (JPEG only) for the file View source #thumbnail_width : Int32 | Int64 | Nil # Optional. Thumbnail width View source #thumbnail_width= ( thumbnail_width : Int32 | Int64 | Nil ) # Optional. Thumbnail width View source #title : String # Title for the result View source #title= ( title : String ) # Title for the result View source #type : String # Type of the result, must be document View source #type= ( type : String ) # Type of the result, must be document View source","title":"InlineQueryResultDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument","text":"Represents a link to a file. By default, this file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the file. Currently, only .PDF and .ZIP files can be sent using this method.","title":"InlineQueryResultDocument"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument.new(id,title,document_url,mime_type,type,caption,parse_mode,caption_entities,description,reply_markup,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption","text":"Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption=(caption)","text":"Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#description","text":"Optional. Short description of the result View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#description=(description)","text":"Optional. Short description of the result View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#document_url","text":"A valid URL for the file View source","title":"#document_url"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#document_url=(document_url)","text":"A valid URL for the file View source","title":"#document_url="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#input_message_content","text":"Optional. Content of the message to be sent instead of the file View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the file View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#mime_type","text":"MIME type of the content of the file, either \"application/pdf\" or \"application/zip\" View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#mime_type=(mime_type)","text":"MIME type of the content of the file, either \"application/pdf\" or \"application/zip\" View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#parse_mode","text":"Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_height","text":"Optional. Thumbnail height View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_height=(thumbnail_height)","text":"Optional. Thumbnail height View source","title":"#thumbnail_height="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_url","text":"Optional. URL of the thumbnail (JPEG only) for the file View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_url=(thumbnail_url)","text":"Optional. URL of the thumbnail (JPEG only) for the file View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_width","text":"Optional. Thumbnail width View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#thumbnail_width=(thumbnail_width)","text":"Optional. Thumbnail width View source","title":"#thumbnail_width="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#title","text":"Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#title=(title)","text":"Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#type","text":"Type of the result, must be document View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultDocument/#Tourmaline::InlineQueryResultDocument#type=(type)","text":"Type of the result, must be document View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultGame/","text":"class Tourmaline::InlineQueryResultGame inherits Reference # Represents a Game. Included modules JSON::Serializable Constructors # .new ( id , game_short_name , type = \"game\" , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #game_short_name : String # Short name of the game View source #game_short_name= ( game_short_name : String ) # Short name of the game View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #type : String # Type of the result, must be game View source #type= ( type : String ) # Type of the result, must be game View source","title":"InlineQueryResultGame"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame","text":"Represents a Game.","title":"InlineQueryResultGame"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame.new(id,game_short_name,type,reply_markup)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#game_short_name","text":"Short name of the game View source","title":"#game_short_name"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#game_short_name=(game_short_name)","text":"Short name of the game View source","title":"#game_short_name="},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#type","text":"Type of the result, must be game View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGame/#Tourmaline::InlineQueryResultGame#type=(type)","text":"Type of the result, must be game View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/","text":"class Tourmaline::InlineQueryResultGif inherits Reference # Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation. Included modules JSON::Serializable Constructors # .new ( id , gif_url , thumbnail_url , type = \"gif\" , gif_width : Int32 | Int64 | Nil = nil , gif_height : Int32 | Int64 | Nil = nil , gif_duration : Int32 | Int64 | Nil = nil , thumbnail_mime_type : String? = nil , title : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #gif_duration : Int32 | Int64 | Nil # Optional. Duration of the GIF in seconds View source #gif_duration= ( gif_duration : Int32 | Int64 | Nil ) # Optional. Duration of the GIF in seconds View source #gif_height : Int32 | Int64 | Nil # Optional. Height of the GIF View source #gif_height= ( gif_height : Int32 | Int64 | Nil ) # Optional. Height of the GIF View source #gif_url : String # A valid URL for the GIF file. File size must not exceed 1MB View source #gif_url= ( gif_url : String ) # A valid URL for the GIF file. File size must not exceed 1MB View source #gif_width : Int32 | Int64 | Nil # Optional. Width of the GIF View source #gif_width= ( gif_width : Int32 | Int64 | Nil ) # Optional. Width of the GIF View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the GIF animation View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the GIF animation View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_mime_type : String? # Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source #thumbnail_mime_type= ( thumbnail_mime_type : String? ) # Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source #thumbnail_url : String # URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source #thumbnail_url= ( thumbnail_url : String ) # URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source #title : String? # Optional. Title for the result View source #title= ( title : String? ) # Optional. Title for the result View source #type : String # Type of the result, must be gif View source #type= ( type : String ) # Type of the result, must be gif View source","title":"InlineQueryResultGif"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif","text":"Represents a link to an animated GIF file. By default, this animated GIF file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.","title":"InlineQueryResultGif"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif.new(id,gif_url,thumbnail_url,type,gif_width,gif_height,gif_duration,thumbnail_mime_type,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption","text":"Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption=(caption)","text":"Optional. Caption of the GIF file to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_duration","text":"Optional. Duration of the GIF in seconds View source","title":"#gif_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_duration=(gif_duration)","text":"Optional. Duration of the GIF in seconds View source","title":"#gif_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_height","text":"Optional. Height of the GIF View source","title":"#gif_height"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_height=(gif_height)","text":"Optional. Height of the GIF View source","title":"#gif_height="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_url","text":"A valid URL for the GIF file. File size must not exceed 1MB View source","title":"#gif_url"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_url=(gif_url)","text":"A valid URL for the GIF file. File size must not exceed 1MB View source","title":"#gif_url="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_width","text":"Optional. Width of the GIF View source","title":"#gif_width"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#gif_width=(gif_width)","text":"Optional. Width of the GIF View source","title":"#gif_width="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#input_message_content","text":"Optional. Content of the message to be sent instead of the GIF animation View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the GIF animation View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#parse_mode","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_mime_type","text":"Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source","title":"#thumbnail_mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_mime_type=(thumbnail_mime_type)","text":"Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source","title":"#thumbnail_mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_url","text":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#thumbnail_url=(thumbnail_url)","text":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#title","text":"Optional. Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#title=(title)","text":"Optional. Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#type","text":"Type of the result, must be gif View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultGif/#Tourmaline::InlineQueryResultGif#type=(type)","text":"Type of the result, must be gif View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/","text":"class Tourmaline::InlineQueryResultLocation inherits Reference # Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location. Included modules JSON::Serializable Constructors # .new ( id , latitude , longitude , title , type = \"location\" , horizontal_accuracy : Float64? = nil , live_period : Int32 | Int64 | Nil = nil , heading : Int32 | Int64 | Nil = nil , proximity_alert_radius : Int32 | Int64 | Nil = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil , thumbnail_url : String? = nil , thumbnail_width : Int32 | Int64 | Nil = nil , thumbnail_height : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32 | Int64 | Nil # Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source #heading= ( heading : Int32 | Int64 | Nil ) # Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source #horizontal_accuracy : Float64? # Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source #horizontal_accuracy= ( horizontal_accuracy : Float64? ) # Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source #id : String # Unique identifier for this result, 1-64 Bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 Bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the location View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the location View source #latitude : Float64 # Location latitude in degrees View source #latitude= ( latitude : Float64 ) # Location latitude in degrees View source #live_period : Int32 | Int64 | Nil # Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source #live_period= ( live_period : Int32 | Int64 | Nil ) # Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source #longitude : Float64 # Location longitude in degrees View source #longitude= ( longitude : Float64 ) # Location longitude in degrees View source #proximity_alert_radius : Int32 | Int64 | Nil # Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source #proximity_alert_radius= ( proximity_alert_radius : Int32 | Int64 | Nil ) # Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_height : Int32 | Int64 | Nil # Optional. Thumbnail height View source #thumbnail_height= ( thumbnail_height : Int32 | Int64 | Nil ) # Optional. Thumbnail height View source #thumbnail_url : String? # Optional. Url of the thumbnail for the result View source #thumbnail_url= ( thumbnail_url : String? ) # Optional. Url of the thumbnail for the result View source #thumbnail_width : Int32 | Int64 | Nil # Optional. Thumbnail width View source #thumbnail_width= ( thumbnail_width : Int32 | Int64 | Nil ) # Optional. Thumbnail width View source #title : String # Location title View source #title= ( title : String ) # Location title View source #type : String # Type of the result, must be location View source #type= ( type : String ) # Type of the result, must be location View source","title":"InlineQueryResultLocation"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation","text":"Represents a location on a map. By default, the location will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the location.","title":"InlineQueryResultLocation"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation.new(id,latitude,longitude,title,type,horizontal_accuracy,live_period,heading,proximity_alert_radius,reply_markup,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#heading","text":"Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source","title":"#heading"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#heading=(heading)","text":"Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source","title":"#heading="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#horizontal_accuracy","text":"Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#horizontal_accuracy=(horizontal_accuracy)","text":"Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source","title":"#horizontal_accuracy="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#id","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#id=(id)","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#input_message_content","text":"Optional. Content of the message to be sent instead of the location View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the location View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#latitude","text":"Location latitude in degrees View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#latitude=(latitude)","text":"Location latitude in degrees View source","title":"#latitude="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#live_period","text":"Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source","title":"#live_period"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#live_period=(live_period)","text":"Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source","title":"#live_period="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#longitude","text":"Location longitude in degrees View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#longitude=(longitude)","text":"Location longitude in degrees View source","title":"#longitude="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#proximity_alert_radius","text":"Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#proximity_alert_radius=(proximity_alert_radius)","text":"Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source","title":"#proximity_alert_radius="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_height","text":"Optional. Thumbnail height View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_height=(thumbnail_height)","text":"Optional. Thumbnail height View source","title":"#thumbnail_height="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_url","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_url=(thumbnail_url)","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_width","text":"Optional. Thumbnail width View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#thumbnail_width=(thumbnail_width)","text":"Optional. Thumbnail width View source","title":"#thumbnail_width="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#title","text":"Location title View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#title=(title)","text":"Location title View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#type","text":"Type of the result, must be location View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultLocation/#Tourmaline::InlineQueryResultLocation#type=(type)","text":"Type of the result, must be location View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/","text":"class Tourmaline::InlineQueryResultMpeg4Gif inherits Reference # Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation. Included modules JSON::Serializable Constructors # .new ( id , mpeg4_url , thumbnail_url , type = \"mpeg4_gif\" , mpeg4_width : Int32 | Int64 | Nil = nil , mpeg4_height : Int32 | Int64 | Nil = nil , mpeg4_duration : Int32 | Int64 | Nil = nil , thumbnail_mime_type : String? = nil , title : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the video animation View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the video animation View source #mpeg4_duration : Int32 | Int64 | Nil # Optional. Video duration in seconds View source #mpeg4_duration= ( mpeg4_duration : Int32 | Int64 | Nil ) # Optional. Video duration in seconds View source #mpeg4_height : Int32 | Int64 | Nil # Optional. Video height View source #mpeg4_height= ( mpeg4_height : Int32 | Int64 | Nil ) # Optional. Video height View source #mpeg4_url : String # A valid URL for the MPEG4 file. File size must not exceed 1MB View source #mpeg4_url= ( mpeg4_url : String ) # A valid URL for the MPEG4 file. File size must not exceed 1MB View source #mpeg4_width : Int32 | Int64 | Nil # Optional. Video width View source #mpeg4_width= ( mpeg4_width : Int32 | Int64 | Nil ) # Optional. Video width View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_mime_type : String? # Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source #thumbnail_mime_type= ( thumbnail_mime_type : String? ) # Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source #thumbnail_url : String # URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source #thumbnail_url= ( thumbnail_url : String ) # URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source #title : String? # Optional. Title for the result View source #title= ( title : String? ) # Optional. Title for the result View source #type : String # Type of the result, must be mpeg4_gif View source #type= ( type : String ) # Type of the result, must be mpeg4_gif View source","title":"InlineQueryResultMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif","text":"Represents a link to a video animation (H.264/MPEG-4 AVC video without sound). By default, this animated MPEG-4 file will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the animation.","title":"InlineQueryResultMpeg4Gif"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif.new(id,mpeg4_url,thumbnail_url,type,mpeg4_width,mpeg4_height,mpeg4_duration,thumbnail_mime_type,title,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption","text":"Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption=(caption)","text":"Optional. Caption of the MPEG-4 file to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#input_message_content","text":"Optional. Content of the message to be sent instead of the video animation View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the video animation View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_duration","text":"Optional. Video duration in seconds View source","title":"#mpeg4_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_duration=(mpeg4_duration)","text":"Optional. Video duration in seconds View source","title":"#mpeg4_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_height","text":"Optional. Video height View source","title":"#mpeg4_height"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_height=(mpeg4_height)","text":"Optional. Video height View source","title":"#mpeg4_height="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_url","text":"A valid URL for the MPEG4 file. File size must not exceed 1MB View source","title":"#mpeg4_url"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_url=(mpeg4_url)","text":"A valid URL for the MPEG4 file. File size must not exceed 1MB View source","title":"#mpeg4_url="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_width","text":"Optional. Video width View source","title":"#mpeg4_width"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#mpeg4_width=(mpeg4_width)","text":"Optional. Video width View source","title":"#mpeg4_width="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#parse_mode","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumbnail_mime_type","text":"Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source","title":"#thumbnail_mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumbnail_mime_type=(thumbnail_mime_type)","text":"Optional. MIME type of the thumbnail, must be one of \"image/jpeg\", \"image/gif\", or \"video/mp4\". Defaults to \"image/jpeg\" View source","title":"#thumbnail_mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumbnail_url","text":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#thumbnail_url=(thumbnail_url)","text":"URL of the static (JPEG or GIF) or animated (MPEG4) thumbnail for the result View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#title","text":"Optional. Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#title=(title)","text":"Optional. Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#type","text":"Type of the result, must be mpeg4_gif View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultMpeg4Gif/#Tourmaline::InlineQueryResultMpeg4Gif#type=(type)","text":"Type of the result, must be mpeg4_gif View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/","text":"class Tourmaline::InlineQueryResultPhoto inherits Reference # Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo. Included modules JSON::Serializable Constructors # .new ( id , photo_url , thumbnail_url , type = \"photo\" , photo_width : Int32 | Int64 | Nil = nil , photo_height : Int32 | Int64 | Nil = nil , title : String? = nil , description : String? = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #description : String? # Optional. Short description of the result View source #description= ( description : String? ) # Optional. Short description of the result View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the photo View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the photo View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source #photo_height : Int32 | Int64 | Nil # Optional. Height of the photo View source #photo_height= ( photo_height : Int32 | Int64 | Nil ) # Optional. Height of the photo View source #photo_url : String # A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB View source #photo_url= ( photo_url : String ) # A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB View source #photo_width : Int32 | Int64 | Nil # Optional. Width of the photo View source #photo_width= ( photo_width : Int32 | Int64 | Nil ) # Optional. Width of the photo View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_url : String # URL of the thumbnail for the photo View source #thumbnail_url= ( thumbnail_url : String ) # URL of the thumbnail for the photo View source #title : String? # Optional. Title for the result View source #title= ( title : String? ) # Optional. Title for the result View source #type : String # Type of the result, must be photo View source #type= ( type : String ) # Type of the result, must be photo View source","title":"InlineQueryResultPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto","text":"Represents a link to a photo. By default, this photo will be sent by the user with optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the photo.","title":"InlineQueryResultPhoto"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto.new(id,photo_url,thumbnail_url,type,photo_width,photo_height,title,description,caption,parse_mode,caption_entities,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption","text":"Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption=(caption)","text":"Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#description","text":"Optional. Short description of the result View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#description=(description)","text":"Optional. Short description of the result View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#input_message_content","text":"Optional. Content of the message to be sent instead of the photo View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the photo View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#parse_mode","text":"Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_height","text":"Optional. Height of the photo View source","title":"#photo_height"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_height=(photo_height)","text":"Optional. Height of the photo View source","title":"#photo_height="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_url","text":"A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB View source","title":"#photo_url"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_url=(photo_url)","text":"A valid URL of the photo. Photo must be in JPEG format. Photo size must not exceed 5MB View source","title":"#photo_url="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_width","text":"Optional. Width of the photo View source","title":"#photo_width"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#photo_width=(photo_width)","text":"Optional. Width of the photo View source","title":"#photo_width="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#thumbnail_url","text":"URL of the thumbnail for the photo View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#thumbnail_url=(thumbnail_url)","text":"URL of the thumbnail for the photo View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#title","text":"Optional. Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#title=(title)","text":"Optional. Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#type","text":"Type of the result, must be photo View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultPhoto/#Tourmaline::InlineQueryResultPhoto#type=(type)","text":"Type of the result, must be photo View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/","text":"class Tourmaline::InlineQueryResultVenue inherits Reference # Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue. Included modules JSON::Serializable Constructors # .new ( id , latitude , longitude , title , address , type = \"venue\" , foursquare_id : String? = nil , foursquare_type : String? = nil , google_place_id : String? = nil , google_place_type : String? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil , thumbnail_url : String? = nil , thumbnail_width : Int32 | Int64 | Nil = nil , thumbnail_height : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # Address of the venue View source #address= ( address : String ) # Address of the venue View source #foursquare_id : String? # Optional. Foursquare identifier of the venue if known View source #foursquare_id= ( foursquare_id : String? ) # Optional. Foursquare identifier of the venue if known View source #foursquare_type : String? # Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source #foursquare_type= ( foursquare_type : String? ) # Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source #google_place_id : String? # Optional. Google Places identifier of the venue View source #google_place_id= ( google_place_id : String? ) # Optional. Google Places identifier of the venue View source #google_place_type : String? # Optional. Google Places type of the venue. (See supported types.) View source #google_place_type= ( google_place_type : String? ) # Optional. Google Places type of the venue. (See supported types.) View source #id : String # Unique identifier for this result, 1-64 Bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 Bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the venue View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the venue View source #latitude : Float64 # Latitude of the venue location in degrees View source #latitude= ( latitude : Float64 ) # Latitude of the venue location in degrees View source #longitude : Float64 # Longitude of the venue location in degrees View source #longitude= ( longitude : Float64 ) # Longitude of the venue location in degrees View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_height : Int32 | Int64 | Nil # Optional. Thumbnail height View source #thumbnail_height= ( thumbnail_height : Int32 | Int64 | Nil ) # Optional. Thumbnail height View source #thumbnail_url : String? # Optional. Url of the thumbnail for the result View source #thumbnail_url= ( thumbnail_url : String? ) # Optional. Url of the thumbnail for the result View source #thumbnail_width : Int32 | Int64 | Nil # Optional. Thumbnail width View source #thumbnail_width= ( thumbnail_width : Int32 | Int64 | Nil ) # Optional. Thumbnail width View source #title : String # Title of the venue View source #title= ( title : String ) # Title of the venue View source #type : String # Type of the result, must be venue View source #type= ( type : String ) # Type of the result, must be venue View source","title":"InlineQueryResultVenue"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue","text":"Represents a venue. By default, the venue will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the venue.","title":"InlineQueryResultVenue"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue.new(id,latitude,longitude,title,address,type,foursquare_id,foursquare_type,google_place_id,google_place_type,reply_markup,input_message_content,thumbnail_url,thumbnail_width,thumbnail_height)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#address","text":"Address of the venue View source","title":"#address"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#address=(address)","text":"Address of the venue View source","title":"#address="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_id","text":"Optional. Foursquare identifier of the venue if known View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_id=(foursquare_id)","text":"Optional. Foursquare identifier of the venue if known View source","title":"#foursquare_id="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_type","text":"Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#foursquare_type=(foursquare_type)","text":"Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source","title":"#foursquare_type="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_id","text":"Optional. Google Places identifier of the venue View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_id=(google_place_id)","text":"Optional. Google Places identifier of the venue View source","title":"#google_place_id="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_type","text":"Optional. Google Places type of the venue. (See supported types.) View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#google_place_type=(google_place_type)","text":"Optional. Google Places type of the venue. (See supported types.) View source","title":"#google_place_type="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#id","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#id=(id)","text":"Unique identifier for this result, 1-64 Bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#input_message_content","text":"Optional. Content of the message to be sent instead of the venue View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the venue View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#latitude","text":"Latitude of the venue location in degrees View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#latitude=(latitude)","text":"Latitude of the venue location in degrees View source","title":"#latitude="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#longitude","text":"Longitude of the venue location in degrees View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#longitude=(longitude)","text":"Longitude of the venue location in degrees View source","title":"#longitude="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_height","text":"Optional. Thumbnail height View source","title":"#thumbnail_height"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_height=(thumbnail_height)","text":"Optional. Thumbnail height View source","title":"#thumbnail_height="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_url","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_url=(thumbnail_url)","text":"Optional. Url of the thumbnail for the result View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_width","text":"Optional. Thumbnail width View source","title":"#thumbnail_width"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#thumbnail_width=(thumbnail_width)","text":"Optional. Thumbnail width View source","title":"#thumbnail_width="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#title","text":"Title of the venue View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#title=(title)","text":"Title of the venue View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#type","text":"Type of the result, must be venue View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVenue/#Tourmaline::InlineQueryResultVenue#type=(type)","text":"Type of the result, must be venue View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/","text":"class Tourmaline::InlineQueryResultVideo inherits Reference # Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video. Included modules JSON::Serializable Constructors # .new ( id , video_url , mime_type , thumbnail_url , title , type = \"video\" , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , video_width : Int32 | Int64 | Nil = nil , video_height : Int32 | Int64 | Nil = nil , video_duration : Int32 | Int64 | Nil = nil , description : String? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #description : String? # Optional. Short description of the result View source #description= ( description : String? ) # Optional. Short description of the result View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video). View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video). View source #mime_type : String # MIME type of the content of the video URL, \"text/html\" or \"video/mp4\" View source #mime_type= ( mime_type : String ) # MIME type of the content of the video URL, \"text/html\" or \"video/mp4\" View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #thumbnail_url : String # URL of the thumbnail (JPEG only) for the video View source #thumbnail_url= ( thumbnail_url : String ) # URL of the thumbnail (JPEG only) for the video View source #title : String # Title for the result View source #title= ( title : String ) # Title for the result View source #type : String # Type of the result, must be video View source #type= ( type : String ) # Type of the result, must be video View source #video_duration : Int32 | Int64 | Nil # Optional. Video duration in seconds View source #video_duration= ( video_duration : Int32 | Int64 | Nil ) # Optional. Video duration in seconds View source #video_height : Int32 | Int64 | Nil # Optional. Video height View source #video_height= ( video_height : Int32 | Int64 | Nil ) # Optional. Video height View source #video_url : String # A valid URL for the embedded video player or video file View source #video_url= ( video_url : String ) # A valid URL for the embedded video player or video file View source #video_width : Int32 | Int64 | Nil # Optional. Video width View source #video_width= ( video_width : Int32 | Int64 | Nil ) # Optional. Video width View source","title":"InlineQueryResultVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo","text":"Represents a link to a page containing an embedded video player or a video file. By default, this video file will be sent by the user with an optional caption. Alternatively, you can use input_message_content to send a message with the specified content instead of the video.","title":"InlineQueryResultVideo"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo.new(id,video_url,mime_type,thumbnail_url,title,type,caption,parse_mode,caption_entities,video_width,video_height,video_duration,description,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption","text":"Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption=(caption)","text":"Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#description","text":"Optional. Short description of the result View source","title":"#description"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#description=(description)","text":"Optional. Short description of the result View source","title":"#description="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#input_message_content","text":"Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video). View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the video. This field is required if InlineQueryResultVideo is used to send an HTML-page as a result (e.g., a YouTube video). View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#mime_type","text":"MIME type of the content of the video URL, \"text/html\" or \"video/mp4\" View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#mime_type=(mime_type)","text":"MIME type of the content of the video URL, \"text/html\" or \"video/mp4\" View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#parse_mode","text":"Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#thumbnail_url","text":"URL of the thumbnail (JPEG only) for the video View source","title":"#thumbnail_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#thumbnail_url=(thumbnail_url)","text":"URL of the thumbnail (JPEG only) for the video View source","title":"#thumbnail_url="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#title","text":"Title for the result View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#title=(title)","text":"Title for the result View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#type","text":"Type of the result, must be video View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#type=(type)","text":"Type of the result, must be video View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_duration","text":"Optional. Video duration in seconds View source","title":"#video_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_duration=(video_duration)","text":"Optional. Video duration in seconds View source","title":"#video_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_height","text":"Optional. Video height View source","title":"#video_height"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_height=(video_height)","text":"Optional. Video height View source","title":"#video_height="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_url","text":"A valid URL for the embedded video player or video file View source","title":"#video_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_url=(video_url)","text":"A valid URL for the embedded video player or video file View source","title":"#video_url="},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_width","text":"Optional. Video width View source","title":"#video_width"},{"location":"api_reference/Tourmaline/InlineQueryResultVideo/#Tourmaline::InlineQueryResultVideo#video_width=(video_width)","text":"Optional. Video width View source","title":"#video_width="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/","text":"class Tourmaline::InlineQueryResultVoice inherits Reference # Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message. Included modules JSON::Serializable Constructors # .new ( id , voice_url , title , type = \"voice\" , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , voice_duration : Int32 | Int64 | Nil = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil , input_message_content : Tourmaline::InputMessageContent? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #caption : String? # Optional. Caption, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #id : String # Unique identifier for this result, 1-64 bytes View source #id= ( id : String ) # Unique identifier for this result, 1-64 bytes View source #input_message_content : Tourmaline::InputMessageContent? # Optional. Content of the message to be sent instead of the voice recording View source #input_message_content= ( input_message_content : Tourmaline::InputMessageContent? ) # Optional. Content of the message to be sent instead of the voice recording View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message View source #title : String # Recording title View source #title= ( title : String ) # Recording title View source #type : String # Type of the result, must be voice View source #type= ( type : String ) # Type of the result, must be voice View source #voice_duration : Int32 | Int64 | Nil # Optional. Recording duration in seconds View source #voice_duration= ( voice_duration : Int32 | Int64 | Nil ) # Optional. Recording duration in seconds View source #voice_url : String # A valid URL for the voice recording View source #voice_url= ( voice_url : String ) # A valid URL for the voice recording View source","title":"InlineQueryResultVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice","text":"Represents a link to a voice recording in an .OGG container encoded with OPUS. By default, this voice recording will be sent by the user. Alternatively, you can use input_message_content to send a message with the specified content instead of the the voice message.","title":"InlineQueryResultVoice"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice.new(id,voice_url,title,type,caption,parse_mode,caption_entities,voice_duration,reply_markup,input_message_content)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption=(caption)","text":"Optional. Caption, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#id","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#id=(id)","text":"Unique identifier for this result, 1-64 bytes View source","title":"#id="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#input_message_content","text":"Optional. Content of the message to be sent instead of the voice recording View source","title":"#input_message_content"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#input_message_content=(input_message_content)","text":"Optional. Content of the message to be sent instead of the voice recording View source","title":"#input_message_content="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#parse_mode","text":"Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the voice message caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#reply_markup","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#title","text":"Recording title View source","title":"#title"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#title=(title)","text":"Recording title View source","title":"#title="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#type","text":"Type of the result, must be voice View source","title":"#type"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#type=(type)","text":"Type of the result, must be voice View source","title":"#type="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_duration","text":"Optional. Recording duration in seconds View source","title":"#voice_duration"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_duration=(voice_duration)","text":"Optional. Recording duration in seconds View source","title":"#voice_duration="},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_url","text":"A valid URL for the voice recording View source","title":"#voice_url"},{"location":"api_reference/Tourmaline/InlineQueryResultVoice/#Tourmaline::InlineQueryResultVoice#voice_url=(voice_url)","text":"A valid URL for the voice recording View source","title":"#voice_url="},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/","text":"class Tourmaline::InlineQueryResultsButton inherits Reference # This object represents a button to be shown above inline query results. You must use exactly one of the optional fields. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text , web_app : Tourmaline::WebAppInfo? = nil , start_parameter : String? = nil ) # View source Methods # #start_parameter : String? # Optional. Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed. Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities. View source #start_parameter= ( start_parameter : String? ) # Optional. Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed. Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities. View source #text : String # Label text on the button View source #text= ( text : String ) # Label text on the button View source #web_app : Tourmaline::WebAppInfo? # Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App. View source #web_app= ( web_app : Tourmaline::WebAppInfo? ) # Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App. View source","title":"InlineQueryResultsButton"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton","text":"This object represents a button to be shown above inline query results. You must use exactly one of the optional fields.","title":"InlineQueryResultsButton"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton#start_parameter","text":"Optional. Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed. Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities. View source","title":"#start_parameter"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton#start_parameter=(start_parameter)","text":"Optional. Deep-linking parameter for the /start message sent to the bot when a user presses the button. 1-64 characters, only A-Z, a-z, 0-9, _ and - are allowed. Example: An inline bot that sends YouTube videos can ask the user to connect the bot to their YouTube account to adapt search results accordingly. To do this, it displays a 'Connect your YouTube account' button above the results, or even before showing any. The user presses the button, switches to a private chat with the bot and, in doing so, passes a start parameter that instructs the bot to return an OAuth link. Once done, the bot can offer a switch_inline button so that the user can easily return to the chat where they wanted to use the bot's inline capabilities. View source","title":"#start_parameter="},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton#text","text":"Label text on the button View source","title":"#text"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton#text=(text)","text":"Label text on the button View source","title":"#text="},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton#web_app","text":"Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App. View source","title":"#web_app"},{"location":"api_reference/Tourmaline/InlineQueryResultsButton/#Tourmaline::InlineQueryResultsButton#web_app=(web_app)","text":"Optional. Description of the Web App that will be launched when the user presses the button. The Web App will be able to switch back to the inline mode using the method switchInlineQuery inside the Web App. View source","title":"#web_app="},{"location":"api_reference/Tourmaline/InputContactMessageContent/","text":"class Tourmaline::InputContactMessageContent inherits Reference # Represents the content of a contact message to be sent as the result of an inline query. Included modules JSON::Serializable Constructors # .new ( phone_number , first_name , last_name : String? = nil , vcard : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #first_name : String # Contact's first name View source #first_name= ( first_name : String ) # Contact's first name View source #last_name : String? # Optional. Contact's last name View source #last_name= ( last_name : String? ) # Optional. Contact's last name View source #phone_number : String # Contact's phone number View source #phone_number= ( phone_number : String ) # Contact's phone number View source #vcard : String? # Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source #vcard= ( vcard : String? ) # Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source","title":"InputContactMessageContent"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent","text":"Represents the content of a contact message to be sent as the result of an inline query.","title":"InputContactMessageContent"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent.new(phone_number,first_name,last_name,vcard)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#first_name","text":"Contact's first name View source","title":"#first_name"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#first_name=(first_name)","text":"Contact's first name View source","title":"#first_name="},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#last_name","text":"Optional. Contact's last name View source","title":"#last_name"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#last_name=(last_name)","text":"Optional. Contact's last name View source","title":"#last_name="},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#phone_number","text":"Contact's phone number View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#phone_number=(phone_number)","text":"Contact's phone number View source","title":"#phone_number="},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#vcard","text":"Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source","title":"#vcard"},{"location":"api_reference/Tourmaline/InputContactMessageContent/#Tourmaline::InputContactMessageContent#vcard=(vcard)","text":"Optional. Additional data about the contact in the form of a vCard, 0-2048 bytes View source","title":"#vcard="},{"location":"api_reference/Tourmaline/InputFile/","text":"class Tourmaline::InputFile inherits Reference # This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"InputFile"},{"location":"api_reference/Tourmaline/InputFile/#Tourmaline::InputFile","text":"This object represents the contents of a file to be uploaded. Must be posted using multipart/form-data in the usual way that files are uploaded via the browser.","title":"InputFile"},{"location":"api_reference/Tourmaline/InputFile/#Tourmaline::InputFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputFile/#Tourmaline::InputFile.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/","text":"class Tourmaline::InputInvoiceMessageContent inherits Reference # Represents the content of an invoice message to be sent as the result of an inline query. Included modules JSON::Serializable Constructors # .new ( title , description , payload , provider_token , currency , prices : Array ( Tourmaline::LabeledPrice ) = [] of Tourmaline :: LabeledPrice , max_tip_amount : Int32 | Int64 | Nil = nil , suggested_tip_amounts : Array ( Int32 | Int64 ) = [] of Int32 | Int64 , provider_data : String? = nil , photo_url : String? = nil , photo_size : Int32 | Int64 | Nil = nil , photo_width : Int32 | Int64 | Nil = nil , photo_height : Int32 | Int64 | Nil = nil , need_name : Bool? = nil , need_phone_number : Bool? = nil , need_email : Bool? = nil , need_shipping_address : Bool? = nil , send_phone_number_to_provider : Bool? = nil , send_email_to_provider : Bool? = nil , is_flexible : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # Three-letter ISO 4217 currency code, see more on currencies View source #currency= ( currency : String ) # Three-letter ISO 4217 currency code, see more on currencies View source #description : String # Product description, 1-255 characters View source #description= ( description : String ) # Product description, 1-255 characters View source #is_flexible= ( is_flexible : Bool? ) # Optional. Pass True if the final price depends on the shipping method View source #is_flexible? : Bool? # Optional. Pass True if the final price depends on the shipping method View source #max_tip_amount : Int32 | Int64 | Nil # Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0 View source #max_tip_amount= ( max_tip_amount : Int32 | Int64 | Nil ) # Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0 View source #need_email= ( need_email : Bool? ) # Optional. Pass True if you require the user's email address to complete the order View source #need_email? : Bool? # Optional. Pass True if you require the user's email address to complete the order View source #need_name= ( need_name : Bool? ) # Optional. Pass True if you require the user's full name to complete the order View source #need_name? : Bool? # Optional. Pass True if you require the user's full name to complete the order View source #need_phone_number= ( need_phone_number : Bool? ) # Optional. Pass True if you require the user's phone number to complete the order View source #need_phone_number? : Bool? # Optional. Pass True if you require the user's phone number to complete the order View source #need_shipping_address= ( need_shipping_address : Bool? ) # Optional. Pass True if you require the user's shipping address to complete the order View source #need_shipping_address? : Bool? # Optional. Pass True if you require the user's shipping address to complete the order View source #payload : String # Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. View source #payload= ( payload : String ) # Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. View source #photo_height : Int32 | Int64 | Nil # Optional. Photo height View source #photo_height= ( photo_height : Int32 | Int64 | Nil ) # Optional. Photo height View source #photo_size : Int32 | Int64 | Nil # Optional. Photo size in bytes View source #photo_size= ( photo_size : Int32 | Int64 | Nil ) # Optional. Photo size in bytes View source #photo_url : String? # Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. View source #photo_url= ( photo_url : String? ) # Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. View source #photo_width : Int32 | Int64 | Nil # Optional. Photo width View source #photo_width= ( photo_width : Int32 | Int64 | Nil ) # Optional. Photo width View source #prices : Array ( Tourmaline::LabeledPrice ) # Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) View source #prices= ( prices : Array ( Tourmaline::LabeledPrice )) # Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) View source #provider_data : String? # Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider. View source #provider_data= ( provider_data : String? ) # Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider. View source #provider_token : String # Payment provider token, obtained via @BotFather View source #provider_token= ( provider_token : String ) # Payment provider token, obtained via @BotFather View source #send_email_to_provider= ( send_email_to_provider : Bool? ) # Optional. Pass True if the user's email address should be sent to provider View source #send_email_to_provider? : Bool? # Optional. Pass True if the user's email address should be sent to provider View source #send_phone_number_to_provider= ( send_phone_number_to_provider : Bool? ) # Optional. Pass True if the user's phone number should be sent to provider View source #send_phone_number_to_provider? : Bool? # Optional. Pass True if the user's phone number should be sent to provider View source #suggested_tip_amounts : Array ( Int32 | Int64 ) # Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount. View source #suggested_tip_amounts= ( suggested_tip_amounts : Array ( Int32 | Int64 )) # Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount. View source #title : String # Product name, 1-32 characters View source #title= ( title : String ) # Product name, 1-32 characters View source","title":"InputInvoiceMessageContent"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent","text":"Represents the content of an invoice message to be sent as the result of an inline query.","title":"InputInvoiceMessageContent"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent.new(title,description,payload,provider_token,currency,prices,max_tip_amount,suggested_tip_amounts,provider_data,photo_url,photo_size,photo_width,photo_height,need_name,need_phone_number,need_email,need_shipping_address,send_phone_number_to_provider,send_email_to_provider,is_flexible)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#currency","text":"Three-letter ISO 4217 currency code, see more on currencies View source","title":"#currency"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#currency=(currency)","text":"Three-letter ISO 4217 currency code, see more on currencies View source","title":"#currency="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#description","text":"Product description, 1-255 characters View source","title":"#description"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#description=(description)","text":"Product description, 1-255 characters View source","title":"#description="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#is_flexible=(is_flexible)","text":"Optional. Pass True if the final price depends on the shipping method View source","title":"#is_flexible="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#is_flexible?","text":"Optional. Pass True if the final price depends on the shipping method View source","title":"#is_flexible?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#max_tip_amount","text":"Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0 View source","title":"#max_tip_amount"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#max_tip_amount=(max_tip_amount)","text":"Optional. The maximum accepted amount for tips in the smallest units of the currency (integer, not float/double). For example, for a maximum tip of US$ 1.45 pass max_tip_amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). Defaults to 0 View source","title":"#max_tip_amount="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_email=(need_email)","text":"Optional. Pass True if you require the user's email address to complete the order View source","title":"#need_email="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_email?","text":"Optional. Pass True if you require the user's email address to complete the order View source","title":"#need_email?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_name=(need_name)","text":"Optional. Pass True if you require the user's full name to complete the order View source","title":"#need_name="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_name?","text":"Optional. Pass True if you require the user's full name to complete the order View source","title":"#need_name?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_phone_number=(need_phone_number)","text":"Optional. Pass True if you require the user's phone number to complete the order View source","title":"#need_phone_number="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_phone_number?","text":"Optional. Pass True if you require the user's phone number to complete the order View source","title":"#need_phone_number?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_shipping_address=(need_shipping_address)","text":"Optional. Pass True if you require the user's shipping address to complete the order View source","title":"#need_shipping_address="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#need_shipping_address?","text":"Optional. Pass True if you require the user's shipping address to complete the order View source","title":"#need_shipping_address?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#payload","text":"Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. View source","title":"#payload"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#payload=(payload)","text":"Bot-defined invoice payload, 1-128 bytes. This will not be displayed to the user, use for your internal processes. View source","title":"#payload="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_height","text":"Optional. Photo height View source","title":"#photo_height"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_height=(photo_height)","text":"Optional. Photo height View source","title":"#photo_height="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_size","text":"Optional. Photo size in bytes View source","title":"#photo_size"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_size=(photo_size)","text":"Optional. Photo size in bytes View source","title":"#photo_size="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_url","text":"Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. View source","title":"#photo_url"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_url=(photo_url)","text":"Optional. URL of the product photo for the invoice. Can be a photo of the goods or a marketing image for a service. View source","title":"#photo_url="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_width","text":"Optional. Photo width View source","title":"#photo_width"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#photo_width=(photo_width)","text":"Optional. Photo width View source","title":"#photo_width="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#prices","text":"Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) View source","title":"#prices"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#prices=(prices)","text":"Price breakdown, a JSON-serialized list of components (e.g. product price, tax, discount, delivery cost, delivery tax, bonus, etc.) View source","title":"#prices="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_data","text":"Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider. View source","title":"#provider_data"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_data=(provider_data)","text":"Optional. A JSON-serialized object for data about the invoice, which will be shared with the payment provider. A detailed description of the required fields should be provided by the payment provider. View source","title":"#provider_data="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_token","text":"Payment provider token, obtained via @BotFather View source","title":"#provider_token"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#provider_token=(provider_token)","text":"Payment provider token, obtained via @BotFather View source","title":"#provider_token="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_email_to_provider=(send_email_to_provider)","text":"Optional. Pass True if the user's email address should be sent to provider View source","title":"#send_email_to_provider="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_email_to_provider?","text":"Optional. Pass True if the user's email address should be sent to provider View source","title":"#send_email_to_provider?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_phone_number_to_provider=(send_phone_number_to_provider)","text":"Optional. Pass True if the user's phone number should be sent to provider View source","title":"#send_phone_number_to_provider="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#send_phone_number_to_provider?","text":"Optional. Pass True if the user's phone number should be sent to provider View source","title":"#send_phone_number_to_provider?"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#suggested_tip_amounts","text":"Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount. View source","title":"#suggested_tip_amounts"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#suggested_tip_amounts=(suggested_tip_amounts)","text":"Optional. A JSON-serialized array of suggested amounts of tip in the smallest units of the currency (integer, not float/double). At most 4 suggested tip amounts can be specified. The suggested tip amounts must be positive, passed in a strictly increased order and must not exceed max_tip_amount. View source","title":"#suggested_tip_amounts="},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#title","text":"Product name, 1-32 characters View source","title":"#title"},{"location":"api_reference/Tourmaline/InputInvoiceMessageContent/#Tourmaline::InputInvoiceMessageContent#title=(title)","text":"Product name, 1-32 characters View source","title":"#title="},{"location":"api_reference/Tourmaline/InputLocationMessageContent/","text":"class Tourmaline::InputLocationMessageContent inherits Reference # Represents the content of a location message to be sent as the result of an inline query. Included modules JSON::Serializable Constructors # .new ( latitude , longitude , horizontal_accuracy : Float64? = nil , live_period : Int32 | Int64 | Nil = nil , heading : Int32 | Int64 | Nil = nil , proximity_alert_radius : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32 | Int64 | Nil # Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source #heading= ( heading : Int32 | Int64 | Nil ) # Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source #horizontal_accuracy : Float64? # Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source #horizontal_accuracy= ( horizontal_accuracy : Float64? ) # Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source #latitude : Float64 # Latitude of the location in degrees View source #latitude= ( latitude : Float64 ) # Latitude of the location in degrees View source #live_period : Int32 | Int64 | Nil # Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source #live_period= ( live_period : Int32 | Int64 | Nil ) # Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source #longitude : Float64 # Longitude of the location in degrees View source #longitude= ( longitude : Float64 ) # Longitude of the location in degrees View source #proximity_alert_radius : Int32 | Int64 | Nil # Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source #proximity_alert_radius= ( proximity_alert_radius : Int32 | Int64 | Nil ) # Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source","title":"InputLocationMessageContent"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent","text":"Represents the content of a location message to be sent as the result of an inline query.","title":"InputLocationMessageContent"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent.new(latitude,longitude,horizontal_accuracy,live_period,heading,proximity_alert_radius)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#heading","text":"Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source","title":"#heading"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#heading=(heading)","text":"Optional. For live locations, a direction in which the user is moving, in degrees. Must be between 1 and 360 if specified. View source","title":"#heading="},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#horizontal_accuracy","text":"Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#horizontal_accuracy=(horizontal_accuracy)","text":"Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source","title":"#horizontal_accuracy="},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#latitude","text":"Latitude of the location in degrees View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#latitude=(latitude)","text":"Latitude of the location in degrees View source","title":"#latitude="},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#live_period","text":"Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source","title":"#live_period"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#live_period=(live_period)","text":"Optional. Period in seconds during which the location can be updated, should be between 60 and 86400, or 0x7FFFFFFF for live locations that can be edited indefinitely. View source","title":"#live_period="},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#longitude","text":"Longitude of the location in degrees View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#longitude=(longitude)","text":"Longitude of the location in degrees View source","title":"#longitude="},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#proximity_alert_radius","text":"Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/InputLocationMessageContent/#Tourmaline::InputLocationMessageContent#proximity_alert_radius=(proximity_alert_radius)","text":"Optional. For live locations, a maximum distance for proximity alerts about approaching another chat member, in meters. Must be between 1 and 100000 if specified. View source","title":"#proximity_alert_radius="},{"location":"api_reference/Tourmaline/InputMedia/","text":"alias Tourmaline::InputMedia # This object represents the content of a media message to be sent. It should be one of - InputMediaAnimation - InputMediaDocument - InputMediaAudio - InputMediaPhoto - InputMediaVideo Alias definition Tourmaline::InputMediaAnimation | Tourmaline::InputMediaAudio | Tourmaline::InputMediaDocument | Tourmaline::InputMediaPhoto | Tourmaline::InputMediaVideo","title":"InputMedia"},{"location":"api_reference/Tourmaline/InputMedia/#Tourmaline::InputMedia","text":"This object represents the content of a media message to be sent. It should be one of - InputMediaAnimation - InputMediaDocument - InputMediaAudio - InputMediaPhoto - InputMediaVideo","title":"InputMedia"},{"location":"api_reference/Tourmaline/InputMediaAnimation/","text":"class Tourmaline::InputMediaAnimation inherits Reference # Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , type = \"animation\" , thumbnail : :: File | String | Nil = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , width : Int32 | Int64 | Nil = nil , height : Int32 | Int64 | Nil = nil , duration : Int32 | Int64 | Nil = nil , has_spoiler : Bool? = nil ) # View source Methods # #caption : String? # Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #duration : Int32 | Int64 | Nil # Optional. Animation duration in seconds View source #duration= ( duration : Int32 | Int64 | Nil ) # Optional. Animation duration in seconds View source #has_spoiler= ( has_spoiler : Bool? ) # Optional. Pass True if the animation needs to be covered with a spoiler animation View source #has_spoiler? : Bool? # Optional. Pass True if the animation needs to be covered with a spoiler animation View source #height : Int32 | Int64 | Nil # Optional. Animation height View source #height= ( height : Int32 | Int64 | Nil ) # Optional. Animation height View source #media : String # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #media= ( media : String ) # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the animation caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the animation caption. See formatting options for more details. View source #thumbnail : :: File | String | Nil # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #thumbnail= ( thumbnail : :: File | String | Nil ) # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #type : String # Type of the result, must be animation View source #type= ( type : String ) # Type of the result, must be animation View source #width : Int32 | Int64 | Nil # Optional. Animation width View source #width= ( width : Int32 | Int64 | Nil ) # Optional. Animation width View source","title":"InputMediaAnimation"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation","text":"Represents an animation file (GIF or H.264/MPEG-4 AVC video without sound) to be sent.","title":"InputMediaAnimation"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption","text":"Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption=(caption)","text":"Optional. Caption of the animation to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#duration","text":"Optional. Animation duration in seconds View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#duration=(duration)","text":"Optional. Animation duration in seconds View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#has_spoiler=(has_spoiler)","text":"Optional. Pass True if the animation needs to be covered with a spoiler animation View source","title":"#has_spoiler="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#has_spoiler?","text":"Optional. Pass True if the animation needs to be covered with a spoiler animation View source","title":"#has_spoiler?"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#height","text":"Optional. Animation height View source","title":"#height"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#height=(height)","text":"Optional. Animation height View source","title":"#height="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#media","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#media=(media)","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#parse_mode","text":"Optional. Mode for parsing entities in the animation caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the animation caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#thumbnail","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#thumbnail=(thumbnail)","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#type","text":"Type of the result, must be animation View source","title":"#type"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#type=(type)","text":"Type of the result, must be animation View source","title":"#type="},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#width","text":"Optional. Animation width View source","title":"#width"},{"location":"api_reference/Tourmaline/InputMediaAnimation/#Tourmaline::InputMediaAnimation#width=(width)","text":"Optional. Animation width View source","title":"#width="},{"location":"api_reference/Tourmaline/InputMediaAudio/","text":"class Tourmaline::InputMediaAudio inherits Reference # Represents an audio file to be treated as music to be sent. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , type = \"audio\" , thumbnail : :: File | String | Nil = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , duration : Int32 | Int64 | Nil = nil , performer : String? = nil , title : String? = nil ) # View source Methods # #caption : String? # Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #duration : Int32 | Int64 | Nil # Optional. Duration of the audio in seconds View source #duration= ( duration : Int32 | Int64 | Nil ) # Optional. Duration of the audio in seconds View source #media : String # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #media= ( media : String ) # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source #performer : String? # Optional. Performer of the audio View source #performer= ( performer : String? ) # Optional. Performer of the audio View source #thumbnail : :: File | String | Nil # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #thumbnail= ( thumbnail : :: File | String | Nil ) # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #title : String? # Optional. Title of the audio View source #title= ( title : String? ) # Optional. Title of the audio View source #type : String # Type of the result, must be audio View source #type= ( type : String ) # Type of the result, must be audio View source","title":"InputMediaAudio"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio","text":"Represents an audio file to be treated as music to be sent.","title":"InputMediaAudio"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption","text":"Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption=(caption)","text":"Optional. Caption of the audio to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#duration","text":"Optional. Duration of the audio in seconds View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#duration=(duration)","text":"Optional. Duration of the audio in seconds View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#media","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#media=(media)","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#parse_mode","text":"Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the audio caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#performer","text":"Optional. Performer of the audio View source","title":"#performer"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#performer=(performer)","text":"Optional. Performer of the audio View source","title":"#performer="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#thumbnail","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#thumbnail=(thumbnail)","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#title","text":"Optional. Title of the audio View source","title":"#title"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#title=(title)","text":"Optional. Title of the audio View source","title":"#title="},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#type","text":"Type of the result, must be audio View source","title":"#type"},{"location":"api_reference/Tourmaline/InputMediaAudio/#Tourmaline::InputMediaAudio#type=(type)","text":"Type of the result, must be audio View source","title":"#type="},{"location":"api_reference/Tourmaline/InputMediaDocument/","text":"class Tourmaline::InputMediaDocument inherits Reference # Represents a general file to be sent. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , type = \"document\" , thumbnail : :: File | String | Nil = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , disable_content_type_detection : Bool? = nil ) # View source Methods # #caption : String? # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #disable_content_type_detection= ( disable_content_type_detection : Bool? ) # Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album. View source #disable_content_type_detection? : Bool? # Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album. View source #media : String # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #media= ( media : String ) # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source #thumbnail : :: File | String | Nil # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #thumbnail= ( thumbnail : :: File | String | Nil ) # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #type : String # Type of the result, must be document View source #type= ( type : String ) # Type of the result, must be document View source","title":"InputMediaDocument"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument","text":"Represents a general file to be sent.","title":"InputMediaDocument"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption","text":"Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption=(caption)","text":"Optional. Caption of the document to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#disable_content_type_detection=(disable_content_type_detection)","text":"Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album. View source","title":"#disable_content_type_detection="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#disable_content_type_detection?","text":"Optional. Disables automatic server-side content type detection for files uploaded using multipart/form-data. Always True, if the document is sent as part of an album. View source","title":"#disable_content_type_detection?"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#media","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#media=(media)","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#parse_mode","text":"Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the document caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#thumbnail","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#thumbnail=(thumbnail)","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#type","text":"Type of the result, must be document View source","title":"#type"},{"location":"api_reference/Tourmaline/InputMediaDocument/#Tourmaline::InputMediaDocument#type=(type)","text":"Type of the result, must be document View source","title":"#type="},{"location":"api_reference/Tourmaline/InputMediaPhoto/","text":"class Tourmaline::InputMediaPhoto inherits Reference # Represents a photo to be sent. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , type = \"photo\" , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , has_spoiler : Bool? = nil ) # View source Methods # #caption : String? # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #has_spoiler= ( has_spoiler : Bool? ) # Optional. Pass True if the photo needs to be covered with a spoiler animation View source #has_spoiler? : Bool? # Optional. Pass True if the photo needs to be covered with a spoiler animation View source #media : String # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #media= ( media : String ) # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source #type : String # Type of the result, must be photo View source #type= ( type : String ) # Type of the result, must be photo View source","title":"InputMediaPhoto"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto","text":"Represents a photo to be sent.","title":"InputMediaPhoto"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption","text":"Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption=(caption)","text":"Optional. Caption of the photo to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#has_spoiler=(has_spoiler)","text":"Optional. Pass True if the photo needs to be covered with a spoiler animation View source","title":"#has_spoiler="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#has_spoiler?","text":"Optional. Pass True if the photo needs to be covered with a spoiler animation View source","title":"#has_spoiler?"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#media","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#media=(media)","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#parse_mode","text":"Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the photo caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#type","text":"Type of the result, must be photo View source","title":"#type"},{"location":"api_reference/Tourmaline/InputMediaPhoto/#Tourmaline::InputMediaPhoto#type=(type)","text":"Type of the result, must be photo View source","title":"#type="},{"location":"api_reference/Tourmaline/InputMediaVideo/","text":"class Tourmaline::InputMediaVideo inherits Reference # Represents a video to be sent. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( media , type = \"video\" , thumbnail : :: File | String | Nil = nil , caption : String? = nil , parse_mode : ParseMode = ParseMode :: Markdown , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , width : Int32 | Int64 | Nil = nil , height : Int32 | Int64 | Nil = nil , duration : Int32 | Int64 | Nil = nil , supports_streaming : Bool? = nil , has_spoiler : Bool? = nil ) # View source Methods # #caption : String? # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source #caption= ( caption : String? ) # Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source #duration : Int32 | Int64 | Nil # Optional. Video duration in seconds View source #duration= ( duration : Int32 | Int64 | Nil ) # Optional. Video duration in seconds View source #has_spoiler= ( has_spoiler : Bool? ) # Optional. Pass True if the video needs to be covered with a spoiler animation View source #has_spoiler? : Bool? # Optional. Pass True if the video needs to be covered with a spoiler animation View source #height : Int32 | Int64 | Nil # Optional. Video height View source #height= ( height : Int32 | Int64 | Nil ) # Optional. Video height View source #media : String # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #media= ( media : String ) # File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source #supports_streaming= ( supports_streaming : Bool? ) # Optional. Pass True if the uploaded video is suitable for streaming View source #supports_streaming? : Bool? # Optional. Pass True if the uploaded video is suitable for streaming View source #thumbnail : :: File | String | Nil # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #thumbnail= ( thumbnail : :: File | String | Nil ) # Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #type : String # Type of the result, must be video View source #type= ( type : String ) # Type of the result, must be video View source #width : Int32 | Int64 | Nil # Optional. Video width View source #width= ( width : Int32 | Int64 | Nil ) # Optional. Video width View source","title":"InputMediaVideo"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo","text":"Represents a video to be sent.","title":"InputMediaVideo"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption","text":"Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source","title":"#caption"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption=(caption)","text":"Optional. Caption of the video to be sent, 0-1024 characters after entities parsing View source","title":"#caption="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption_entities","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#caption_entities=(caption_entities)","text":"Optional. List of special entities that appear in the caption, which can be specified instead of parse_mode View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#duration","text":"Optional. Video duration in seconds View source","title":"#duration"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#duration=(duration)","text":"Optional. Video duration in seconds View source","title":"#duration="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#has_spoiler=(has_spoiler)","text":"Optional. Pass True if the video needs to be covered with a spoiler animation View source","title":"#has_spoiler="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#has_spoiler?","text":"Optional. Pass True if the video needs to be covered with a spoiler animation View source","title":"#has_spoiler?"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#height","text":"Optional. Video height View source","title":"#height"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#height=(height)","text":"Optional. Video height View source","title":"#height="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#media","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#media=(media)","text":"File to send. Pass a file_id to send a file that exists on the Telegram servers (recommended), pass an HTTP URL for Telegram to get a file from the Internet, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#media="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#parse_mode","text":"Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the video caption. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#supports_streaming=(supports_streaming)","text":"Optional. Pass True if the uploaded video is suitable for streaming View source","title":"#supports_streaming="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#supports_streaming?","text":"Optional. Pass True if the uploaded video is suitable for streaming View source","title":"#supports_streaming?"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#thumbnail","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#thumbnail=(thumbnail)","text":"Optional. Thumbnail of the file sent; can be ignored if thumbnail generation for the file is supported server-side. The thumbnail should be in JPEG format and less than 200 kB in size. A thumbnail's width and height should not exceed 320. Ignored if the file is not uploaded using multipart/form-data. Thumbnails can't be reused and can be only uploaded as a new file, so you can pass \"attach://<file_attach_name>\" if the thumbnail was uploaded using multipart/form-data under <file_attach_name>. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#type","text":"Type of the result, must be video View source","title":"#type"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#type=(type)","text":"Type of the result, must be video View source","title":"#type="},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#width","text":"Optional. Video width View source","title":"#width"},{"location":"api_reference/Tourmaline/InputMediaVideo/#Tourmaline::InputMediaVideo#width=(width)","text":"Optional. Video width View source","title":"#width="},{"location":"api_reference/Tourmaline/InputMessageContent/","text":"alias Tourmaline::InputMessageContent # This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types: - InputTextMessageContent - InputLocationMessageContent - InputVenueMessageContent - InputContactMessageContent - InputInvoiceMessageContent Alias definition Tourmaline::InputContactMessageContent | Tourmaline::InputInvoiceMessageContent | Tourmaline::InputLocationMessageContent | Tourmaline::InputTextMessageContent | Tourmaline::InputVenueMessageContent","title":"InputMessageContent"},{"location":"api_reference/Tourmaline/InputMessageContent/#Tourmaline::InputMessageContent","text":"This object represents the content of a message to be sent as a result of an inline query. Telegram clients currently support the following 5 types: - InputTextMessageContent - InputLocationMessageContent - InputVenueMessageContent - InputContactMessageContent - InputInvoiceMessageContent","title":"InputMessageContent"},{"location":"api_reference/Tourmaline/InputPollOption/","text":"class Tourmaline::InputPollOption inherits Reference # This object contains information about one answer option in a poll to send. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text , text_parse_mode : String? = nil , text_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity ) # View source Methods # #text : String # Option text, 1-100 characters View source #text= ( text : String ) # Option text, 1-100 characters View source #text_entities : Array ( Tourmaline::MessageEntity ) # Optional. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode View source #text_entities= ( text_entities : Array ( Tourmaline::MessageEntity )) # Optional. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode View source #text_parse_mode : String? # Optional. Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed View source #text_parse_mode= ( text_parse_mode : String? ) # Optional. Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed View source","title":"InputPollOption"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption","text":"This object contains information about one answer option in a poll to send.","title":"InputPollOption"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption#text","text":"Option text, 1-100 characters View source","title":"#text"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption#text=(text)","text":"Option text, 1-100 characters View source","title":"#text="},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption#text_entities","text":"Optional. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption#text_entities=(text_entities)","text":"Optional. A JSON-serialized list of special entities that appear in the poll option text. It can be specified instead of text_parse_mode View source","title":"#text_entities="},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption#text_parse_mode","text":"Optional. Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed View source","title":"#text_parse_mode"},{"location":"api_reference/Tourmaline/InputPollOption/#Tourmaline::InputPollOption#text_parse_mode=(text_parse_mode)","text":"Optional. Mode for parsing entities in the text. See formatting options for more details. Currently, only custom emoji entities are allowed View source","title":"#text_parse_mode="},{"location":"api_reference/Tourmaline/InputSticker/","text":"class Tourmaline::InputSticker inherits Reference # This object describes a sticker to be added to a sticker set. Included modules JSON::Serializable Constructors # .new ( sticker , format , emoji_list : Array ( String ) = [] of String , mask_position : Tourmaline::MaskPosition? = nil , keywords : Array ( String ) = [] of String ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #emoji_list : Array ( String ) # List of 1-20 emoji associated with the sticker View source #emoji_list= ( emoji_list : Array ( String )) # List of 1-20 emoji associated with the sticker View source #format : String # Format of the added sticker, must be one of \"static\" for a .WEBP or .PNG image, \"animated\" for a .TGS animation, \"video\" for a WEBM video View source #format= ( format : String ) # Format of the added sticker, must be one of \"static\" for a .WEBP or .PNG image, \"animated\" for a .TGS animation, \"video\" for a WEBM video View source #keywords : Array ( String ) # Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For \"regular\" and \"custom_emoji\" stickers only. View source #keywords= ( keywords : Array ( String )) # Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For \"regular\" and \"custom_emoji\" stickers only. View source #mask_position : Tourmaline::MaskPosition? # Optional. Position where the mask should be placed on faces. For \"mask\" stickers only. View source #mask_position= ( mask_position : Tourmaline::MaskPosition? ) # Optional. Position where the mask should be placed on faces. For \"mask\" stickers only. View source #sticker : :: File | String # The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using multipart/form-data, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. Animated and video stickers can't be uploaded via HTTP URL. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source #sticker= ( sticker : :: File | String ) # The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using multipart/form-data, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. Animated and video stickers can't be uploaded via HTTP URL. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"InputSticker"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker","text":"This object describes a sticker to be added to a sticker set.","title":"InputSticker"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker.new(sticker,format,emoji_list,mask_position,keywords)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#emoji_list","text":"List of 1-20 emoji associated with the sticker View source","title":"#emoji_list"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#emoji_list=(emoji_list)","text":"List of 1-20 emoji associated with the sticker View source","title":"#emoji_list="},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#format","text":"Format of the added sticker, must be one of \"static\" for a .WEBP or .PNG image, \"animated\" for a .TGS animation, \"video\" for a WEBM video View source","title":"#format"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#format=(format)","text":"Format of the added sticker, must be one of \"static\" for a .WEBP or .PNG image, \"animated\" for a .TGS animation, \"video\" for a WEBM video View source","title":"#format="},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#keywords","text":"Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For \"regular\" and \"custom_emoji\" stickers only. View source","title":"#keywords"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#keywords=(keywords)","text":"Optional. List of 0-20 search keywords for the sticker with total length of up to 64 characters. For \"regular\" and \"custom_emoji\" stickers only. View source","title":"#keywords="},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#mask_position","text":"Optional. Position where the mask should be placed on faces. For \"mask\" stickers only. View source","title":"#mask_position"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#mask_position=(mask_position)","text":"Optional. Position where the mask should be placed on faces. For \"mask\" stickers only. View source","title":"#mask_position="},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#sticker","text":"The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using multipart/form-data, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. Animated and video stickers can't be uploaded via HTTP URL. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#sticker"},{"location":"api_reference/Tourmaline/InputSticker/#Tourmaline::InputSticker#sticker=(sticker)","text":"The added sticker. Pass a file_id as a String to send a file that already exists on the Telegram servers, pass an HTTP URL as a String for Telegram to get a file from the Internet, upload a new one using multipart/form-data, or pass \"attach://<file_attach_name>\" to upload a new one using multipart/form-data under <file_attach_name> name. Animated and video stickers can't be uploaded via HTTP URL. More information on Sending Files: https://core.telegram.org/bots/api#sending-files View source","title":"#sticker="},{"location":"api_reference/Tourmaline/InputTextMessageContent/","text":"class Tourmaline::InputTextMessageContent inherits Reference # Represents the content of a text message to be sent as the result of an inline query. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( message_text , parse_mode : ParseMode = ParseMode :: Markdown , entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , link_preview_options : Tourmaline::LinkPreviewOptions? = nil ) # View source Methods # #entities : Array ( Tourmaline::MessageEntity ) # Optional. List of special entities that appear in message text, which can be specified instead of parse_mode View source #entities= ( entities : Array ( Tourmaline::MessageEntity )) # Optional. List of special entities that appear in message text, which can be specified instead of parse_mode View source #link_preview_options : Tourmaline::LinkPreviewOptions? # Optional. Link preview generation options for the message View source #link_preview_options= ( link_preview_options : Tourmaline::LinkPreviewOptions? ) # Optional. Link preview generation options for the message View source #message_text : String # Text of the message to be sent, 1-4096 characters View source #message_text= ( message_text : String ) # Text of the message to be sent, 1-4096 characters View source #parse_mode : ParseMode # Optional. Mode for parsing entities in the message text. See formatting options for more details. View source #parse_mode= ( parse_mode : ParseMode ) # Optional. Mode for parsing entities in the message text. See formatting options for more details. View source","title":"InputTextMessageContent"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent","text":"Represents the content of a text message to be sent as the result of an inline query.","title":"InputTextMessageContent"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#entities","text":"Optional. List of special entities that appear in message text, which can be specified instead of parse_mode View source","title":"#entities"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#entities=(entities)","text":"Optional. List of special entities that appear in message text, which can be specified instead of parse_mode View source","title":"#entities="},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#link_preview_options","text":"Optional. Link preview generation options for the message View source","title":"#link_preview_options"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#link_preview_options=(link_preview_options)","text":"Optional. Link preview generation options for the message View source","title":"#link_preview_options="},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#message_text","text":"Text of the message to be sent, 1-4096 characters View source","title":"#message_text"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#message_text=(message_text)","text":"Text of the message to be sent, 1-4096 characters View source","title":"#message_text="},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#parse_mode","text":"Optional. Mode for parsing entities in the message text. See formatting options for more details. View source","title":"#parse_mode"},{"location":"api_reference/Tourmaline/InputTextMessageContent/#Tourmaline::InputTextMessageContent#parse_mode=(parse_mode)","text":"Optional. Mode for parsing entities in the message text. See formatting options for more details. View source","title":"#parse_mode="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/","text":"class Tourmaline::InputVenueMessageContent inherits Reference # Represents the content of a venue message to be sent as the result of an inline query. Included modules JSON::Serializable Constructors # .new ( latitude , longitude , title , address , foursquare_id : String? = nil , foursquare_type : String? = nil , google_place_id : String? = nil , google_place_type : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # Address of the venue View source #address= ( address : String ) # Address of the venue View source #foursquare_id : String? # Optional. Foursquare identifier of the venue, if known View source #foursquare_id= ( foursquare_id : String? ) # Optional. Foursquare identifier of the venue, if known View source #foursquare_type : String? # Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source #foursquare_type= ( foursquare_type : String? ) # Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source #google_place_id : String? # Optional. Google Places identifier of the venue View source #google_place_id= ( google_place_id : String? ) # Optional. Google Places identifier of the venue View source #google_place_type : String? # Optional. Google Places type of the venue. (See supported types.) View source #google_place_type= ( google_place_type : String? ) # Optional. Google Places type of the venue. (See supported types.) View source #latitude : Float64 # Latitude of the venue in degrees View source #latitude= ( latitude : Float64 ) # Latitude of the venue in degrees View source #longitude : Float64 # Longitude of the venue in degrees View source #longitude= ( longitude : Float64 ) # Longitude of the venue in degrees View source #title : String # Name of the venue View source #title= ( title : String ) # Name of the venue View source","title":"InputVenueMessageContent"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent","text":"Represents the content of a venue message to be sent as the result of an inline query.","title":"InputVenueMessageContent"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent.new(latitude,longitude,title,address,foursquare_id,foursquare_type,google_place_id,google_place_type)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#address","text":"Address of the venue View source","title":"#address"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#address=(address)","text":"Address of the venue View source","title":"#address="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_id","text":"Optional. Foursquare identifier of the venue, if known View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_id=(foursquare_id)","text":"Optional. Foursquare identifier of the venue, if known View source","title":"#foursquare_id="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_type","text":"Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#foursquare_type=(foursquare_type)","text":"Optional. Foursquare type of the venue, if known. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source","title":"#foursquare_type="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_id","text":"Optional. Google Places identifier of the venue View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_id=(google_place_id)","text":"Optional. Google Places identifier of the venue View source","title":"#google_place_id="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_type","text":"Optional. Google Places type of the venue. (See supported types.) View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#google_place_type=(google_place_type)","text":"Optional. Google Places type of the venue. (See supported types.) View source","title":"#google_place_type="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#latitude","text":"Latitude of the venue in degrees View source","title":"#latitude"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#latitude=(latitude)","text":"Latitude of the venue in degrees View source","title":"#latitude="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#longitude","text":"Longitude of the venue in degrees View source","title":"#longitude"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#longitude=(longitude)","text":"Longitude of the venue in degrees View source","title":"#longitude="},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#title","text":"Name of the venue View source","title":"#title"},{"location":"api_reference/Tourmaline/InputVenueMessageContent/#Tourmaline::InputVenueMessageContent#title=(title)","text":"Name of the venue View source","title":"#title="},{"location":"api_reference/Tourmaline/Invoice/","text":"class Tourmaline::Invoice inherits Reference # This object contains basic information about an invoice. Included modules JSON::Serializable Constructors # .new ( title , description , start_parameter , currency , total_amount ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # Three-letter ISO 4217 currency code View source #currency= ( currency : String ) # Three-letter ISO 4217 currency code View source #description : String # Product description View source #description= ( description : String ) # Product description View source #start_parameter : String # Unique bot deep-linking parameter that can be used to generate this invoice View source #start_parameter= ( start_parameter : String ) # Unique bot deep-linking parameter that can be used to generate this invoice View source #title : String # Product name View source #title= ( title : String ) # Product name View source #total_amount : Int32 | Int64 # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source #total_amount= ( total_amount : Int32 | Int64 ) # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"Invoice"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice","text":"This object contains basic information about an invoice.","title":"Invoice"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice.new(title,description,start_parameter,currency,total_amount)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#currency","text":"Three-letter ISO 4217 currency code View source","title":"#currency"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#currency=(currency)","text":"Three-letter ISO 4217 currency code View source","title":"#currency="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#description","text":"Product description View source","title":"#description"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#description=(description)","text":"Product description View source","title":"#description="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#start_parameter","text":"Unique bot deep-linking parameter that can be used to generate this invoice View source","title":"#start_parameter"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#start_parameter=(start_parameter)","text":"Unique bot deep-linking parameter that can be used to generate this invoice View source","title":"#start_parameter="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#title","text":"Product name View source","title":"#title"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#title=(title)","text":"Product name View source","title":"#title="},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#total_amount","text":"Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/Invoice/#Tourmaline::Invoice#total_amount=(total_amount)","text":"Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#total_amount="},{"location":"api_reference/Tourmaline/KeyboardBuilder/","text":"abstract class Tourmaline::KeyboardBuilder(T, G) inherits Reference # Base builder class for InlineKeyboardMarkup::Builder and ReplyKeyboardMarkup::Builder . Direct known subclasses Tourmaline::Client::InlineKeyboardMarkupBuilder Tourmaline::Client::ReplyKeyboardMarkupBuilder Constructors # .new ( force_reply = false , remove_keyboard = false , selective = false , keyboard = [] of T , resize = false , one_time = false , persistent = false , input_field_placeholder = nil ) # View source Class methods # .build_keyboard ( buttons : Array ( T ), columns = 1 , wrap = nil ) # View source .buttons ( buttons , ** options ) # View source .force_reply ( value : Bool ) # View source .inline_buttons ( buttons , ** options ) # View source .one_time ( value : Bool ) # View source .remove_keyboard ( value : Bool ) # View source .resize ( value : Bool ) # View source .selective ( value : Bool ) # View source Methods # #button ( * args , ** options ) # View source #force_reply ( value ) # View source #force_reply= ( force_reply : Bool ) # View source #force_reply? : Bool # View source #input_field_placeholder : String? # View source #input_field_placeholder ( value ) # View source #input_field_placeholder= ( input_field_placeholder : String? ) # View source abstract #keyboard ( columns = nil ) : G # View source #one_time ( value ) # View source #one_time= ( one_time : Bool ) # View source #one_time? : Bool # View source #persistent= ( persistent : Bool ) # View source #persistent? : Bool # View source #remove_keyboard ( value ) # View source #remove_keyboard= ( remove_keyboard : Bool ) # View source #remove_keyboard? : Bool # View source #resize ( value ) # View source #resize= ( resize : Bool ) # View source #resize? : Bool # View source #selective ( value ) # View source #selective= ( selective : Bool ) # View source #selective? : Bool # View source","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder","text":"Base builder class for InlineKeyboardMarkup::Builder and ReplyKeyboardMarkup::Builder .","title":"KeyboardBuilder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.new(force_reply,remove_keyboard,selective,keyboard,resize,one_time,persistent,input_field_placeholder)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.build_keyboard(buttons,columns,wrap)","text":"View source","title":".build_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.buttons(buttons,**)","text":"View source","title":".buttons"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.force_reply(value)","text":"View source","title":".force_reply"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.inline_buttons(buttons,**)","text":"View source","title":".inline_buttons"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.one_time(value)","text":"View source","title":".one_time"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.remove_keyboard(value)","text":"View source","title":".remove_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.resize(value)","text":"View source","title":".resize"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder.selective(value)","text":"View source","title":".selective"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#button(*,**)","text":"View source","title":"#button"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#force_reply(value)","text":"View source","title":"#force_reply"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#force_reply=(force_reply)","text":"View source","title":"#force_reply="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#force_reply?","text":"View source","title":"#force_reply?"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#input_field_placeholder","text":"View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#input_field_placeholder=(input_field_placeholder)","text":"View source","title":"#input_field_placeholder="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#keyboard(columns)","text":"View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#one_time(value)","text":"View source","title":"#one_time"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#one_time=(one_time)","text":"View source","title":"#one_time="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#one_time?","text":"View source","title":"#one_time?"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#persistent=(persistent)","text":"View source","title":"#persistent="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#persistent?","text":"View source","title":"#persistent?"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#remove_keyboard(value)","text":"View source","title":"#remove_keyboard"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#remove_keyboard=(remove_keyboard)","text":"View source","title":"#remove_keyboard="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#remove_keyboard?","text":"View source","title":"#remove_keyboard?"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#resize(value)","text":"View source","title":"#resize"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#resize=(resize)","text":"View source","title":"#resize="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#resize?","text":"View source","title":"#resize?"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#selective(value)","text":"View source","title":"#selective"},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#selective=(selective)","text":"View source","title":"#selective="},{"location":"api_reference/Tourmaline/KeyboardBuilder/#Tourmaline::KeyboardBuilder#selective?","text":"View source","title":"#selective?"},{"location":"api_reference/Tourmaline/KeyboardButton/","text":"class Tourmaline::KeyboardButton inherits Reference # This object represents one button of the reply keyboard. For simple text buttons, String can be used instead of this object to specify the button text. The optional fields web_app, request_users, request_chat, request_contact, request_location, and request_poll are mutually exclusive. Note: request_users and request_chat options will only work in Telegram versions released after 3 February, 2023. Older clients will display unsupported message. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( text , request_users : Tourmaline::KeyboardButtonRequestUsers? = nil , request_chat : Tourmaline::KeyboardButtonRequestChat? = nil , request_contact : Bool? = nil , request_location : Bool? = nil , request_poll : Tourmaline::KeyboardButtonPollType? = nil , web_app : Tourmaline::WebAppInfo? = nil ) # View source Methods # #request_chat : Tourmaline::KeyboardButtonRequestChat? # Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a \"chat_shared\" service message. Available in private chats only. View source #request_chat= ( request_chat : Tourmaline::KeyboardButtonRequestChat? ) # Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a \"chat_shared\" service message. Available in private chats only. View source #request_contact= ( request_contact : Bool? ) # Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only. View source #request_contact? : Bool? # Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only. View source #request_location= ( request_location : Bool? ) # Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only. View source #request_location? : Bool? # Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only. View source #request_poll : Tourmaline::KeyboardButtonPollType? # Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only. View source #request_poll= ( request_poll : Tourmaline::KeyboardButtonPollType? ) # Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only. View source #request_users : Tourmaline::KeyboardButtonRequestUsers? # Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a \"users_shared\" service message. Available in private chats only. View source #request_users= ( request_users : Tourmaline::KeyboardButtonRequestUsers? ) # Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a \"users_shared\" service message. Available in private chats only. View source #text : String # Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed View source #text= ( text : String ) # Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed View source #web_app : Tourmaline::WebAppInfo? # Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a \"web_app_data\" service message. Available in private chats only. View source #web_app= ( web_app : Tourmaline::WebAppInfo? ) # Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a \"web_app_data\" service message. Available in private chats only. View source","title":"KeyboardButton"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton","text":"This object represents one button of the reply keyboard. For simple text buttons, String can be used instead of this object to specify the button text. The optional fields web_app, request_users, request_chat, request_contact, request_location, and request_poll are mutually exclusive. Note: request_users and request_chat options will only work in Telegram versions released after 3 February, 2023. Older clients will display unsupported message.","title":"KeyboardButton"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_chat","text":"Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a \"chat_shared\" service message. Available in private chats only. View source","title":"#request_chat"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_chat=(request_chat)","text":"Optional. If specified, pressing the button will open a list of suitable chats. Tapping on a chat will send its identifier to the bot in a \"chat_shared\" service message. Available in private chats only. View source","title":"#request_chat="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_contact=(request_contact)","text":"Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only. View source","title":"#request_contact="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_contact?","text":"Optional. If True, the user's phone number will be sent as a contact when the button is pressed. Available in private chats only. View source","title":"#request_contact?"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_location=(request_location)","text":"Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only. View source","title":"#request_location="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_location?","text":"Optional. If True, the user's current location will be sent when the button is pressed. Available in private chats only. View source","title":"#request_location?"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_poll","text":"Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only. View source","title":"#request_poll"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_poll=(request_poll)","text":"Optional. If specified, the user will be asked to create a poll and send it to the bot when the button is pressed. Available in private chats only. View source","title":"#request_poll="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_users","text":"Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a \"users_shared\" service message. Available in private chats only. View source","title":"#request_users"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#request_users=(request_users)","text":"Optional. If specified, pressing the button will open a list of suitable users. Identifiers of selected users will be sent to the bot in a \"users_shared\" service message. Available in private chats only. View source","title":"#request_users="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#text","text":"Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed View source","title":"#text"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#text=(text)","text":"Text of the button. If none of the optional fields are used, it will be sent as a message when the button is pressed View source","title":"#text="},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#web_app","text":"Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a \"web_app_data\" service message. Available in private chats only. View source","title":"#web_app"},{"location":"api_reference/Tourmaline/KeyboardButton/#Tourmaline::KeyboardButton#web_app=(web_app)","text":"Optional. If specified, the described Web App will be launched when the button is pressed. The Web App will be able to send a \"web_app_data\" service message. Available in private chats only. View source","title":"#web_app="},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/","text":"class Tourmaline::KeyboardButtonPollType inherits Reference # This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type : String? = nil ) # View source Methods # #type : String? # Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type. View source #type= ( type : String? ) # Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type. View source","title":"KeyboardButtonPollType"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType","text":"This object represents type of a poll, which is allowed to be created and sent when the corresponding button is pressed.","title":"KeyboardButtonPollType"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType#type","text":"Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type. View source","title":"#type"},{"location":"api_reference/Tourmaline/KeyboardButtonPollType/#Tourmaline::KeyboardButtonPollType#type=(type)","text":"Optional. If quiz is passed, the user will be allowed to create only polls in the quiz mode. If regular is passed, only regular polls will be allowed. Otherwise, the user will be allowed to create a poll of any type. View source","title":"#type="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/","text":"class Tourmaline::KeyboardButtonRequestChat inherits Reference # This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate. More about requesting chats: https://core.telegram.org/bots/features#chat-and-user-selection . Included modules JSON::Serializable Constructors # .new ( request_id , chat_is_channel , chat_is_forum : Bool? = nil , chat_has_username : Bool? = nil , chat_is_created : Bool? = nil , user_administrator_rights : Tourmaline::ChatAdministratorRights? = nil , bot_administrator_rights : Tourmaline::ChatAdministratorRights? = nil , bot_is_member : Bool? = nil , request_title : Bool? = nil , request_username : Bool? = nil , request_photo : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #bot_administrator_rights : Tourmaline::ChatAdministratorRights? # Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied. View source #bot_administrator_rights= ( bot_administrator_rights : Tourmaline::ChatAdministratorRights? ) # Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied. View source #bot_is_member= ( bot_is_member : Bool? ) # Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied. View source #bot_is_member? : Bool? # Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied. View source #chat_has_username= ( chat_has_username : Bool? ) # Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied. View source #chat_has_username? : Bool? # Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied. View source #chat_is_channel= ( chat_is_channel : Bool ) # Pass True to request a channel chat, pass False to request a group or a supergroup chat. View source #chat_is_channel? : Bool # Pass True to request a channel chat, pass False to request a group or a supergroup chat. View source #chat_is_created= ( chat_is_created : Bool? ) # Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied. View source #chat_is_created? : Bool? # Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied. View source #chat_is_forum= ( chat_is_forum : Bool? ) # Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied. View source #chat_is_forum? : Bool? # Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied. View source #request_id : Int32 | Int64 # Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message View source #request_id= ( request_id : Int32 | Int64 ) # Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message View source #request_photo= ( request_photo : Bool? ) # Optional. Pass True to request the chat's photo View source #request_photo? : Bool? # Optional. Pass True to request the chat's photo View source #request_title= ( request_title : Bool? ) # Optional. Pass True to request the chat's title View source #request_title? : Bool? # Optional. Pass True to request the chat's title View source #request_username= ( request_username : Bool? ) # Optional. Pass True to request the chat's username View source #request_username? : Bool? # Optional. Pass True to request the chat's username View source #user_administrator_rights : Tourmaline::ChatAdministratorRights? # Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied. View source #user_administrator_rights= ( user_administrator_rights : Tourmaline::ChatAdministratorRights? ) # Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied. View source","title":"KeyboardButtonRequestChat"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat","text":"This object defines the criteria used to request a suitable chat. Information about the selected chat will be shared with the bot when the corresponding button is pressed. The bot will be granted requested rights in the chat if appropriate. More about requesting chats: https://core.telegram.org/bots/features#chat-and-user-selection .","title":"KeyboardButtonRequestChat"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat.new(request_id,chat_is_channel,chat_is_forum,chat_has_username,chat_is_created,user_administrator_rights,bot_administrator_rights,bot_is_member,request_title,request_username,request_photo)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#bot_administrator_rights","text":"Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied. View source","title":"#bot_administrator_rights"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#bot_administrator_rights=(bot_administrator_rights)","text":"Optional. A JSON-serialized object listing the required administrator rights of the bot in the chat. The rights must be a subset of user_administrator_rights. If not specified, no additional restrictions are applied. View source","title":"#bot_administrator_rights="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#bot_is_member=(bot_is_member)","text":"Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied. View source","title":"#bot_is_member="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#bot_is_member?","text":"Optional. Pass True to request a chat with the bot as a member. Otherwise, no additional restrictions are applied. View source","title":"#bot_is_member?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_has_username=(chat_has_username)","text":"Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied. View source","title":"#chat_has_username="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_has_username?","text":"Optional. Pass True to request a supergroup or a channel with a username, pass False to request a chat without a username. If not specified, no additional restrictions are applied. View source","title":"#chat_has_username?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_is_channel=(chat_is_channel)","text":"Pass True to request a channel chat, pass False to request a group or a supergroup chat. View source","title":"#chat_is_channel="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_is_channel?","text":"Pass True to request a channel chat, pass False to request a group or a supergroup chat. View source","title":"#chat_is_channel?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_is_created=(chat_is_created)","text":"Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied. View source","title":"#chat_is_created="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_is_created?","text":"Optional. Pass True to request a chat owned by the user. Otherwise, no additional restrictions are applied. View source","title":"#chat_is_created?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_is_forum=(chat_is_forum)","text":"Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied. View source","title":"#chat_is_forum="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#chat_is_forum?","text":"Optional. Pass True to request a forum supergroup, pass False to request a non-forum chat. If not specified, no additional restrictions are applied. View source","title":"#chat_is_forum?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_id","text":"Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message View source","title":"#request_id"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_id=(request_id)","text":"Signed 32-bit identifier of the request, which will be received back in the ChatShared object. Must be unique within the message View source","title":"#request_id="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_photo=(request_photo)","text":"Optional. Pass True to request the chat's photo View source","title":"#request_photo="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_photo?","text":"Optional. Pass True to request the chat's photo View source","title":"#request_photo?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_title=(request_title)","text":"Optional. Pass True to request the chat's title View source","title":"#request_title="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_title?","text":"Optional. Pass True to request the chat's title View source","title":"#request_title?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_username=(request_username)","text":"Optional. Pass True to request the chat's username View source","title":"#request_username="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#request_username?","text":"Optional. Pass True to request the chat's username View source","title":"#request_username?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#user_administrator_rights","text":"Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied. View source","title":"#user_administrator_rights"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestChat/#Tourmaline::KeyboardButtonRequestChat#user_administrator_rights=(user_administrator_rights)","text":"Optional. A JSON-serialized object listing the required administrator rights of the user in the chat. The rights must be a superset of bot_administrator_rights. If not specified, no additional restrictions are applied. View source","title":"#user_administrator_rights="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/","text":"class Tourmaline::KeyboardButtonRequestUsers inherits Reference # This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed. More about requesting users: https://core.telegram.org/bots/features#chat-and-user-selection Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( request_id , user_is_bot : Bool? = nil , user_is_premium : Bool? = nil , max_quantity : Int32 | Int64 | Nil = nil , request_name : Bool? = nil , request_username : Bool? = nil , request_photo : Bool? = nil ) # View source Methods # #max_quantity : Int32 | Int64 | Nil # Optional. The maximum number of users to be selected; 1-10. Defaults to 1. View source #max_quantity= ( max_quantity : Int32 | Int64 | Nil ) # Optional. The maximum number of users to be selected; 1-10. Defaults to 1. View source #request_id : Int32 | Int64 # Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message View source #request_id= ( request_id : Int32 | Int64 ) # Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message View source #request_name= ( request_name : Bool? ) # Optional. Pass True to request the users' first and last names View source #request_name? : Bool? # Optional. Pass True to request the users' first and last names View source #request_photo= ( request_photo : Bool? ) # Optional. Pass True to request the users' photos View source #request_photo? : Bool? # Optional. Pass True to request the users' photos View source #request_username= ( request_username : Bool? ) # Optional. Pass True to request the users' usernames View source #request_username? : Bool? # Optional. Pass True to request the users' usernames View source #user_is_bot= ( user_is_bot : Bool? ) # Optional. Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied. View source #user_is_bot? : Bool? # Optional. Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied. View source #user_is_premium= ( user_is_premium : Bool? ) # Optional. Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied. View source #user_is_premium? : Bool? # Optional. Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied. View source","title":"KeyboardButtonRequestUsers"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers","text":"This object defines the criteria used to request suitable users. Information about the selected users will be shared with the bot when the corresponding button is pressed. More about requesting users: https://core.telegram.org/bots/features#chat-and-user-selection","title":"KeyboardButtonRequestUsers"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#max_quantity","text":"Optional. The maximum number of users to be selected; 1-10. Defaults to 1. View source","title":"#max_quantity"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#max_quantity=(max_quantity)","text":"Optional. The maximum number of users to be selected; 1-10. Defaults to 1. View source","title":"#max_quantity="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_id","text":"Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message View source","title":"#request_id"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_id=(request_id)","text":"Signed 32-bit identifier of the request that will be received back in the UsersShared object. Must be unique within the message View source","title":"#request_id="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_name=(request_name)","text":"Optional. Pass True to request the users' first and last names View source","title":"#request_name="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_name?","text":"Optional. Pass True to request the users' first and last names View source","title":"#request_name?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_photo=(request_photo)","text":"Optional. Pass True to request the users' photos View source","title":"#request_photo="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_photo?","text":"Optional. Pass True to request the users' photos View source","title":"#request_photo?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_username=(request_username)","text":"Optional. Pass True to request the users' usernames View source","title":"#request_username="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#request_username?","text":"Optional. Pass True to request the users' usernames View source","title":"#request_username?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#user_is_bot=(user_is_bot)","text":"Optional. Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied. View source","title":"#user_is_bot="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#user_is_bot?","text":"Optional. Pass True to request bots, pass False to request regular users. If not specified, no additional restrictions are applied. View source","title":"#user_is_bot?"},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#user_is_premium=(user_is_premium)","text":"Optional. Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied. View source","title":"#user_is_premium="},{"location":"api_reference/Tourmaline/KeyboardButtonRequestUsers/#Tourmaline::KeyboardButtonRequestUsers#user_is_premium?","text":"Optional. Pass True to request premium users, pass False to request non-premium users. If not specified, no additional restrictions are applied. View source","title":"#user_is_premium?"},{"location":"api_reference/Tourmaline/LabeledPrice/","text":"class Tourmaline::LabeledPrice inherits Reference # This object represents a portion of the price for goods or services. Included modules JSON::Serializable Constructors # .new ( label , amount ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #amount : Int32 | Int64 # Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source #amount= ( amount : Int32 | Int64 ) # Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source #label : String # Portion label View source #label= ( label : String ) # Portion label View source","title":"LabeledPrice"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice","text":"This object represents a portion of the price for goods or services.","title":"LabeledPrice"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice.new(label,amount)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#amount","text":"Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#amount"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#amount=(amount)","text":"Price of the product in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#amount="},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#label","text":"Portion label View source","title":"#label"},{"location":"api_reference/Tourmaline/LabeledPrice/#Tourmaline::LabeledPrice#label=(label)","text":"Portion label View source","title":"#label="},{"location":"api_reference/Tourmaline/LinkPreviewOptions/","text":"class Tourmaline::LinkPreviewOptions inherits Reference # Describes the options used for link preview generation. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( is_disabled : Bool? = nil , url : String? = nil , prefer_small_media : Bool? = nil , prefer_large_media : Bool? = nil , show_above_text : Bool? = nil ) # View source Methods # #is_disabled= ( is_disabled : Bool? ) # Optional. True, if the link preview is disabled View source #is_disabled? : Bool? # Optional. True, if the link preview is disabled View source #prefer_large_media= ( prefer_large_media : Bool? ) # Optional. True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source #prefer_large_media? : Bool? # Optional. True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source #prefer_small_media= ( prefer_small_media : Bool? ) # Optional. True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source #prefer_small_media? : Bool? # Optional. True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source #show_above_text= ( show_above_text : Bool? ) # Optional. True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text View source #show_above_text? : Bool? # Optional. True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text View source #url : String? # Optional. URL to use for the link preview. If empty, then the first URL found in the message text will be used View source #url= ( url : String? ) # Optional. URL to use for the link preview. If empty, then the first URL found in the message text will be used View source","title":"LinkPreviewOptions"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions","text":"Describes the options used for link preview generation.","title":"LinkPreviewOptions"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#is_disabled=(is_disabled)","text":"Optional. True, if the link preview is disabled View source","title":"#is_disabled="},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#is_disabled?","text":"Optional. True, if the link preview is disabled View source","title":"#is_disabled?"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#prefer_large_media=(prefer_large_media)","text":"Optional. True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source","title":"#prefer_large_media="},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#prefer_large_media?","text":"Optional. True, if the media in the link preview is supposed to be enlarged; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source","title":"#prefer_large_media?"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#prefer_small_media=(prefer_small_media)","text":"Optional. True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source","title":"#prefer_small_media="},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#prefer_small_media?","text":"Optional. True, if the media in the link preview is supposed to be shrunk; ignored if the URL isn't explicitly specified or media size change isn't supported for the preview View source","title":"#prefer_small_media?"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#show_above_text=(show_above_text)","text":"Optional. True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text View source","title":"#show_above_text="},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#show_above_text?","text":"Optional. True, if the link preview must be shown above the message text; otherwise, the link preview will be shown below the message text View source","title":"#show_above_text?"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#url","text":"Optional. URL to use for the link preview. If empty, then the first URL found in the message text will be used View source","title":"#url"},{"location":"api_reference/Tourmaline/LinkPreviewOptions/#Tourmaline::LinkPreviewOptions#url=(url)","text":"Optional. URL to use for the link preview. If empty, then the first URL found in the message text will be used View source","title":"#url="},{"location":"api_reference/Tourmaline/Location/","text":"class Tourmaline::Location inherits Reference # This object represents a point on the map. Included modules JSON::Serializable Constructors # .new ( longitude , latitude , horizontal_accuracy : Float64? = nil , live_period : Int32 | Int64 | Nil = nil , heading : Int32 | Int64 | Nil = nil , proximity_alert_radius : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #heading : Int32 | Int64 | Nil # Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only. View source #heading= ( heading : Int32 | Int64 | Nil ) # Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only. View source #horizontal_accuracy : Float64? # Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source #horizontal_accuracy= ( horizontal_accuracy : Float64? ) # Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source #latitude : Float64 # Latitude as defined by sender View source #latitude= ( latitude : Float64 ) # Latitude as defined by sender View source #live_period : Int32 | Int64 | Nil # Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only. View source #live_period= ( live_period : Int32 | Int64 | Nil ) # Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only. View source #longitude : Float64 # Longitude as defined by sender View source #longitude= ( longitude : Float64 ) # Longitude as defined by sender View source #proximity_alert_radius : Int32 | Int64 | Nil # Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only. View source #proximity_alert_radius= ( proximity_alert_radius : Int32 | Int64 | Nil ) # Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only. View source","title":"Location"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location","text":"This object represents a point on the map.","title":"Location"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location.new(longitude,latitude,horizontal_accuracy,live_period,heading,proximity_alert_radius)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#heading","text":"Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only. View source","title":"#heading"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#heading=(heading)","text":"Optional. The direction in which user is moving, in degrees; 1-360. For active live locations only. View source","title":"#heading="},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#horizontal_accuracy","text":"Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source","title":"#horizontal_accuracy"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#horizontal_accuracy=(horizontal_accuracy)","text":"Optional. The radius of uncertainty for the location, measured in meters; 0-1500 View source","title":"#horizontal_accuracy="},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#latitude","text":"Latitude as defined by sender View source","title":"#latitude"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#latitude=(latitude)","text":"Latitude as defined by sender View source","title":"#latitude="},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#live_period","text":"Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only. View source","title":"#live_period"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#live_period=(live_period)","text":"Optional. Time relative to the message sending date, during which the location can be updated; in seconds. For active live locations only. View source","title":"#live_period="},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#longitude","text":"Longitude as defined by sender View source","title":"#longitude"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#longitude=(longitude)","text":"Longitude as defined by sender View source","title":"#longitude="},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#proximity_alert_radius","text":"Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only. View source","title":"#proximity_alert_radius"},{"location":"api_reference/Tourmaline/Location/#Tourmaline::Location#proximity_alert_radius=(proximity_alert_radius)","text":"Optional. The maximum distance for proximity alerts about approaching another chat member, in meters. For sent live locations only. View source","title":"#proximity_alert_radius="},{"location":"api_reference/Tourmaline/LoginUrl/","text":"class Tourmaline::LoginUrl inherits Reference # This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in: Telegram apps support these buttons as of version 5.7. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( url , forward_text : String? = nil , bot_username : String? = nil , request_write_access : Bool? = nil ) # View source Methods # #bot_username : String? # Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details. View source #bot_username= ( bot_username : String? ) # Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details. View source #forward_text : String? # Optional. New text of the button in forwarded messages. View source #forward_text= ( forward_text : String? ) # Optional. New text of the button in forwarded messages. View source #request_write_access= ( request_write_access : Bool? ) # Optional. Pass True to request the permission for your bot to send messages to the user. View source #request_write_access? : Bool? # Optional. Pass True to request the permission for your bot to send messages to the user. View source #url : String # An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data. NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization. View source #url= ( url : String ) # An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data. NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization. View source","title":"LoginUrl"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl","text":"This object represents a parameter of the inline keyboard button used to automatically authorize a user. Serves as a great replacement for the Telegram Login Widget when the user is coming from Telegram. All the user needs to do is tap/click a button and confirm that they want to log in: Telegram apps support these buttons as of version 5.7.","title":"LoginUrl"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#bot_username","text":"Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details. View source","title":"#bot_username"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#bot_username=(bot_username)","text":"Optional. Username of a bot, which will be used for user authorization. See Setting up a bot for more details. If not specified, the current bot's username will be assumed. The url's domain must be the same as the domain linked with the bot. See Linking your domain to the bot for more details. View source","title":"#bot_username="},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#forward_text","text":"Optional. New text of the button in forwarded messages. View source","title":"#forward_text"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#forward_text=(forward_text)","text":"Optional. New text of the button in forwarded messages. View source","title":"#forward_text="},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#request_write_access=(request_write_access)","text":"Optional. Pass True to request the permission for your bot to send messages to the user. View source","title":"#request_write_access="},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#request_write_access?","text":"Optional. Pass True to request the permission for your bot to send messages to the user. View source","title":"#request_write_access?"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#url","text":"An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data. NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization. View source","title":"#url"},{"location":"api_reference/Tourmaline/LoginUrl/#Tourmaline::LoginUrl#url=(url)","text":"An HTTPS URL to be opened with user authorization data added to the query string when the button is pressed. If the user refuses to provide authorization data, the original URL without information about the user will be opened. The data added is the same as described in Receiving authorization data. NOTE: You must always check the hash of the received data to verify the authentication and the integrity of the data as described in Checking authorization. View source","title":"#url="},{"location":"api_reference/Tourmaline/MaskPosition/","text":"class Tourmaline::MaskPosition inherits Reference # This object describes the position on faces where a mask should be placed by default. Included modules JSON::Serializable Constructors # .new ( point , x_shift , y_shift , scale ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #point : String # The part of the face relative to which the mask should be placed. One of \"forehead\", \"eyes\", \"mouth\", or \"chin\". View source #point= ( point : String ) # The part of the face relative to which the mask should be placed. One of \"forehead\", \"eyes\", \"mouth\", or \"chin\". View source #scale : Float64 # Mask scaling coefficient. For example, 2.0 means double size. View source #scale= ( scale : Float64 ) # Mask scaling coefficient. For example, 2.0 means double size. View source #x_shift : Float64 # Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position. View source #x_shift= ( x_shift : Float64 ) # Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position. View source #y_shift : Float64 # Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position. View source #y_shift= ( y_shift : Float64 ) # Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position. View source","title":"MaskPosition"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition","text":"This object describes the position on faces where a mask should be placed by default.","title":"MaskPosition"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition.new(point,x_shift,y_shift,scale)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#point","text":"The part of the face relative to which the mask should be placed. One of \"forehead\", \"eyes\", \"mouth\", or \"chin\". View source","title":"#point"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#point=(point)","text":"The part of the face relative to which the mask should be placed. One of \"forehead\", \"eyes\", \"mouth\", or \"chin\". View source","title":"#point="},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#scale","text":"Mask scaling coefficient. For example, 2.0 means double size. View source","title":"#scale"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#scale=(scale)","text":"Mask scaling coefficient. For example, 2.0 means double size. View source","title":"#scale="},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#x_shift","text":"Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position. View source","title":"#x_shift"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#x_shift=(x_shift)","text":"Shift by X-axis measured in widths of the mask scaled to the face size, from left to right. For example, choosing -1.0 will place mask just to the left of the default mask position. View source","title":"#x_shift="},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#y_shift","text":"Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position. View source","title":"#y_shift"},{"location":"api_reference/Tourmaline/MaskPosition/#Tourmaline::MaskPosition#y_shift=(y_shift)","text":"Shift by Y-axis measured in heights of the mask scaled to the face size, from top to bottom. For example, 1.0 will place the mask just below the default mask position. View source","title":"#y_shift="},{"location":"api_reference/Tourmaline/MaybeInaccessibleMessage/","text":"alias Tourmaline::MaybeInaccessibleMessage # This object describes a message that can be inaccessible to the bot. It can be one of - Message - InaccessibleMessage Alias definition Tourmaline::InaccessibleMessage | Tourmaline::Message","title":"MaybeInaccessibleMessage"},{"location":"api_reference/Tourmaline/MaybeInaccessibleMessage/#Tourmaline::MaybeInaccessibleMessage","text":"This object describes a message that can be inaccessible to the bot. It can be one of - Message - InaccessibleMessage","title":"MaybeInaccessibleMessage"},{"location":"api_reference/Tourmaline/MenuButton/","text":"alias Tourmaline::MenuButton # This object describes the bot's menu button in a private chat. It should be one of - MenuButtonCommands - MenuButtonWebApp - MenuButtonDefault If a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands. Alias definition Tourmaline::MenuButtonCommands | Tourmaline::MenuButtonDefault | Tourmaline::MenuButtonWebApp","title":"MenuButton"},{"location":"api_reference/Tourmaline/MenuButton/#Tourmaline::MenuButton","text":"This object describes the bot's menu button in a private chat. It should be one of - MenuButtonCommands - MenuButtonWebApp - MenuButtonDefault If a menu button other than MenuButtonDefault is set for a private chat, then it is applied in the chat. Otherwise the default menu button is applied. By default, the menu button opens the list of bot commands.","title":"MenuButton"},{"location":"api_reference/Tourmaline/MenuButtonCommands/","text":"class Tourmaline::MenuButtonCommands inherits Reference # Represents a menu button, which opens the bot's list of commands. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : String # Type of the button, must be commands View source #type= ( type : String ) # Type of the button, must be commands View source","title":"MenuButtonCommands"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands","text":"Represents a menu button, which opens the bot's list of commands.","title":"MenuButtonCommands"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands#type","text":"Type of the button, must be commands View source","title":"#type"},{"location":"api_reference/Tourmaline/MenuButtonCommands/#Tourmaline::MenuButtonCommands#type=(type)","text":"Type of the button, must be commands View source","title":"#type="},{"location":"api_reference/Tourmaline/MenuButtonDefault/","text":"class Tourmaline::MenuButtonDefault inherits Reference # Describes that no specific value for the menu button was set. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( type ) # View source Methods # #type : String # Type of the button, must be default View source #type= ( type : String ) # Type of the button, must be default View source","title":"MenuButtonDefault"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault","text":"Describes that no specific value for the menu button was set.","title":"MenuButtonDefault"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault#type","text":"Type of the button, must be default View source","title":"#type"},{"location":"api_reference/Tourmaline/MenuButtonDefault/#Tourmaline::MenuButtonDefault#type=(type)","text":"Type of the button, must be default View source","title":"#type="},{"location":"api_reference/Tourmaline/MenuButtonWebApp/","text":"class Tourmaline::MenuButtonWebApp inherits Reference # Represents a menu button, which launches a Web App. Included modules JSON::Serializable Constructors # .new ( type , text , web_app ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #text : String # Text on the button View source #text= ( text : String ) # Text on the button View source #type : String # Type of the button, must be web_app View source #type= ( type : String ) # Type of the button, must be web_app View source #web_app : Tourmaline::WebAppInfo # Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. View source #web_app= ( web_app : Tourmaline::WebAppInfo ) # Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. View source","title":"MenuButtonWebApp"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp","text":"Represents a menu button, which launches a Web App.","title":"MenuButtonWebApp"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp.new(type,text,web_app)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#text","text":"Text on the button View source","title":"#text"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#text=(text)","text":"Text on the button View source","title":"#text="},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#type","text":"Type of the button, must be web_app View source","title":"#type"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#type=(type)","text":"Type of the button, must be web_app View source","title":"#type="},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#web_app","text":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. View source","title":"#web_app"},{"location":"api_reference/Tourmaline/MenuButtonWebApp/#Tourmaline::MenuButtonWebApp#web_app=(web_app)","text":"Description of the Web App that will be launched when the user presses the button. The Web App will be able to send an arbitrary message on behalf of the user using the method answerWebAppQuery. View source","title":"#web_app="},{"location":"api_reference/Tourmaline/Message/","text":"class Tourmaline::Message inherits Reference # This object represents a message. Included modules JSON::Serializable Constructors # .new ( message_id , date , chat , message_thread_id : Int32 | Int64 | Nil = nil , from : Tourmaline::User? = nil , sender_chat : Tourmaline::Chat? = nil , sender_boost_count : Int32 | Int64 | Nil = nil , sender_business_bot : Tourmaline::User? = nil , business_connection_id : String? = nil , forward_origin : Tourmaline::MessageOrigin? = nil , is_topic_message : Bool? = nil , is_automatic_forward : Bool? = nil , reply_to_message : Tourmaline::Message? = nil , external_reply : Tourmaline::ExternalReplyInfo? = nil , quote : Tourmaline::TextQuote? = nil , reply_to_story : Tourmaline::Story? = nil , via_bot : Tourmaline::User? = nil , edit_date : Int32 | Int64 | Nil = nil , has_protected_content : Bool? = nil , is_from_offline : Bool? = nil , media_group_id : String? = nil , author_signature : String? = nil , text : String? = nil , entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , link_preview_options : Tourmaline::LinkPreviewOptions? = nil , animation : Tourmaline::Animation? = nil , audio : Tourmaline::Audio? = nil , document : Tourmaline::Document? = nil , photo : Array ( Tourmaline::PhotoSize ) = [] of Tourmaline :: PhotoSize , sticker : Tourmaline::Sticker? = nil , story : Tourmaline::Story? = nil , video : Tourmaline::Video? = nil , video_note : Tourmaline::VideoNote? = nil , voice : Tourmaline::Voice? = nil , caption : String? = nil , caption_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , has_media_spoiler : Bool? = nil , contact : Tourmaline::Contact? = nil , dice : Tourmaline::Dice? = nil , game : Tourmaline::Game? = nil , poll : Tourmaline::Poll? = nil , venue : Tourmaline::Venue? = nil , location : Tourmaline::Location? = nil , new_chat_members : Array ( Tourmaline::User ) = [] of Tourmaline :: User , left_chat_member : Tourmaline::User? = nil , new_chat_title : String? = nil , new_chat_photo : Array ( Tourmaline::PhotoSize ) = [] of Tourmaline :: PhotoSize , delete_chat_photo : Bool? = nil , group_chat_created : Bool? = nil , supergroup_chat_created : Bool? = nil , channel_chat_created : Bool? = nil , message_auto_delete_timer_changed : Tourmaline::MessageAutoDeleteTimerChanged? = nil , migrate_to_chat_id : Int32 | Int64 | Nil = nil , migrate_from_chat_id : Int32 | Int64 | Nil = nil , pinned_message : Tourmaline::MaybeInaccessibleMessage? = nil , invoice : Tourmaline::Invoice? = nil , successful_payment : Tourmaline::SuccessfulPayment? = nil , users_shared : Tourmaline::UsersShared? = nil , chat_shared : Tourmaline::ChatShared? = nil , connected_website : String? = nil , write_access_allowed : Tourmaline::WriteAccessAllowed? = nil , passport_data : Tourmaline::PassportData? = nil , proximity_alert_triggered : Tourmaline::ProximityAlertTriggered? = nil , boost_added : Tourmaline::ChatBoostAdded? = nil , chat_background_set : Tourmaline::ChatBackground? = nil , forum_topic_created : Tourmaline::ForumTopicCreated? = nil , forum_topic_edited : Tourmaline::ForumTopicEdited? = nil , forum_topic_closed : Tourmaline::ForumTopicClosed? = nil , forum_topic_reopened : Tourmaline::ForumTopicReopened? = nil , general_forum_topic_hidden : Tourmaline::GeneralForumTopicHidden? = nil , general_forum_topic_unhidden : Tourmaline::GeneralForumTopicUnhidden? = nil , giveaway_created : Tourmaline::GiveawayCreated? = nil , giveaway : Tourmaline::Giveaway? = nil , giveaway_winners : Tourmaline::GiveawayWinners? = nil , giveaway_completed : Tourmaline::GiveawayCompleted? = nil , video_chat_scheduled : Tourmaline::VideoChatScheduled? = nil , video_chat_started : Tourmaline::VideoChatStarted? = nil , video_chat_ended : Tourmaline::VideoChatEnded? = nil , video_chat_participants_invited : Tourmaline::VideoChatParticipantsInvited? = nil , web_app_data : Tourmaline::WebAppData? = nil , reply_markup : Tourmaline::InlineKeyboardMarkup? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #animation : Tourmaline::Animation? # Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set View source #animation= ( animation : Tourmaline::Animation? ) # Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set View source #audio : Tourmaline::Audio? # Optional. Message is an audio file, information about the file View source #audio= ( audio : Tourmaline::Audio? ) # Optional. Message is an audio file, information about the file View source #author_signature : String? # Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator View source #author_signature= ( author_signature : String? ) # Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator View source #boost_added : Tourmaline::ChatBoostAdded? # Optional. Service message: user boosted the chat View source #boost_added= ( boost_added : Tourmaline::ChatBoostAdded? ) # Optional. Service message: user boosted the chat View source #business_connection_id : String? # Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. View source #business_connection_id= ( business_connection_id : String? ) # Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. View source #caption : String? # Optional. Caption for the animation, audio, document, photo, video or voice View source #caption= ( caption : String? ) # Optional. Caption for the animation, audio, document, photo, video or voice View source #caption_entities : Array ( Tourmaline::MessageEntity ) # Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption View source #caption_entities= ( caption_entities : Array ( Tourmaline::MessageEntity )) # Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption View source #channel_chat_created= ( channel_chat_created : Bool? ) # Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel. View source #channel_chat_created? : Bool? # Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel. View source #chat : Tourmaline::Chat # Chat the message belongs to View source #chat= ( chat : Tourmaline::Chat ) # Chat the message belongs to View source #chat_background_set : Tourmaline::ChatBackground? # Optional. Service message: chat background set View source #chat_background_set= ( chat_background_set : Tourmaline::ChatBackground? ) # Optional. Service message: chat background set View source #chat_shared : Tourmaline::ChatShared? # Optional. Service message: a chat was shared with the bot View source #chat_shared= ( chat_shared : Tourmaline::ChatShared? ) # Optional. Service message: a chat was shared with the bot View source #chats ( & block : Chat -> ) # View source #chats # View source #connected_website : String? # Optional. The domain name of the website on which the user has logged in. More about Telegram Login: https://core.telegram.org/widgets/login View source #connected_website= ( connected_website : String? ) # Optional. The domain name of the website on which the user has logged in. More about Telegram Login: https://core.telegram.org/widgets/login View source #contact : Tourmaline::Contact? # Optional. Message is a shared contact, information about the contact View source #contact= ( contact : Tourmaline::Contact? ) # Optional. Message is a shared contact, information about the contact View source #date : Time # View source #date= ( date : Time ) # View source #delete_chat_photo= ( delete_chat_photo : Bool? ) # Optional. Service message: the chat photo was deleted View source #delete_chat_photo? : Bool? # Optional. Service message: the chat photo was deleted View source #dice : Tourmaline::Dice? # Optional. Message is a dice with random value View source #dice= ( dice : Tourmaline::Dice? ) # Optional. Message is a dice with random value View source #document : Tourmaline::Document? # Optional. Message is a general file, information about the file View source #document= ( document : Tourmaline::Document? ) # Optional. Message is a general file, information about the file View source #edit_date : Time? # View source #edit_date= ( edit_date : Time? ) # View source #entities : Array ( Tourmaline::MessageEntity ) # Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text View source #entities= ( entities : Array ( Tourmaline::MessageEntity )) # Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text View source #external_reply : Tourmaline::ExternalReplyInfo? # Optional. Information about the message that is being replied to, which may come from another chat or forum topic View source #external_reply= ( external_reply : Tourmaline::ExternalReplyInfo? ) # Optional. Information about the message that is being replied to, which may come from another chat or forum topic View source #file # View source #forum_topic_closed : Tourmaline::ForumTopicClosed? # Optional. Service message: forum topic closed View source #forum_topic_closed= ( forum_topic_closed : Tourmaline::ForumTopicClosed? ) # Optional. Service message: forum topic closed View source #forum_topic_created : Tourmaline::ForumTopicCreated? # Optional. Service message: forum topic created View source #forum_topic_created= ( forum_topic_created : Tourmaline::ForumTopicCreated? ) # Optional. Service message: forum topic created View source #forum_topic_edited : Tourmaline::ForumTopicEdited? # Optional. Service message: forum topic edited View source #forum_topic_edited= ( forum_topic_edited : Tourmaline::ForumTopicEdited? ) # Optional. Service message: forum topic edited View source #forum_topic_reopened : Tourmaline::ForumTopicReopened? # Optional. Service message: forum topic reopened View source #forum_topic_reopened= ( forum_topic_reopened : Tourmaline::ForumTopicReopened? ) # Optional. Service message: forum topic reopened View source #forward_origin : Tourmaline::MessageOrigin? # Optional. Information about the original message for forwarded messages View source #forward_origin= ( forward_origin : Tourmaline::MessageOrigin? ) # Optional. Information about the original message for forwarded messages View source #from : Tourmaline::User? # Optional. Sender of the message; empty for messages sent to channels. For backward compatibility, the field contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source #from= ( from : Tourmaline::User? ) # Optional. Sender of the message; empty for messages sent to channels. For backward compatibility, the field contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source #game : Tourmaline::Game? # Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source #game= ( game : Tourmaline::Game? ) # Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source #general_forum_topic_hidden : Tourmaline::GeneralForumTopicHidden? # Optional. Service message: the 'General' forum topic hidden View source #general_forum_topic_hidden= ( general_forum_topic_hidden : Tourmaline::GeneralForumTopicHidden? ) # Optional. Service message: the 'General' forum topic hidden View source #general_forum_topic_unhidden : Tourmaline::GeneralForumTopicUnhidden? # Optional. Service message: the 'General' forum topic unhidden View source #general_forum_topic_unhidden= ( general_forum_topic_unhidden : Tourmaline::GeneralForumTopicUnhidden? ) # Optional. Service message: the 'General' forum topic unhidden View source #giveaway : Tourmaline::Giveaway? # Optional. The message is a scheduled giveaway message View source #giveaway= ( giveaway : Tourmaline::Giveaway? ) # Optional. The message is a scheduled giveaway message View source #giveaway_completed : Tourmaline::GiveawayCompleted? # Optional. Service message: a giveaway without public winners was completed View source #giveaway_completed= ( giveaway_completed : Tourmaline::GiveawayCompleted? ) # Optional. Service message: a giveaway without public winners was completed View source #giveaway_created : Tourmaline::GiveawayCreated? # Optional. Service message: a scheduled giveaway was created View source #giveaway_created= ( giveaway_created : Tourmaline::GiveawayCreated? ) # Optional. Service message: a scheduled giveaway was created View source #giveaway_winners : Tourmaline::GiveawayWinners? # Optional. A giveaway with public winners was completed View source #giveaway_winners= ( giveaway_winners : Tourmaline::GiveawayWinners? ) # Optional. A giveaway with public winners was completed View source #group_chat_created= ( group_chat_created : Bool? ) # Optional. Service message: the group has been created View source #group_chat_created? : Bool? # Optional. Service message: the group has been created View source #has_media_spoiler= ( has_media_spoiler : Bool? ) # Optional. True, if the message media is covered by a spoiler animation View source #has_media_spoiler? : Bool? # Optional. True, if the message media is covered by a spoiler animation View source #has_protected_content= ( has_protected_content : Bool? ) # Optional. True, if the message can't be forwarded View source #has_protected_content? : Bool? # Optional. True, if the message can't be forwarded View source #invoice : Tourmaline::Invoice? # Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source #invoice= ( invoice : Tourmaline::Invoice? ) # Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source #is_automatic_forward= ( is_automatic_forward : Bool? ) # Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group View source #is_automatic_forward? : Bool? # Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group View source #is_from_offline= ( is_from_offline : Bool? ) # Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message View source #is_from_offline? : Bool? # Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message View source #is_topic_message= ( is_topic_message : Bool? ) # Optional. True, if the message is sent to a forum topic View source #is_topic_message? : Bool? # Optional. True, if the message is sent to a forum topic View source #left_chat_member : Tourmaline::User? # Optional. A member was removed from the group, information about them (this member may be the bot itself) View source #left_chat_member= ( left_chat_member : Tourmaline::User? ) # Optional. A member was removed from the group, information about them (this member may be the bot itself) View source #link # View source #link_preview_options : Tourmaline::LinkPreviewOptions? # Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed View source #link_preview_options= ( link_preview_options : Tourmaline::LinkPreviewOptions? ) # Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed View source #location : Tourmaline::Location? # Optional. Message is a shared location, information about the location View source #location= ( location : Tourmaline::Location? ) # Optional. Message is a shared location, information about the location View source #media_group_id : String? # Optional. The unique identifier of a media message group this message belongs to View source #media_group_id= ( media_group_id : String? ) # Optional. The unique identifier of a media message group this message belongs to View source #message_auto_delete_timer_changed : Tourmaline::MessageAutoDeleteTimerChanged? # Optional. Service message: auto-delete timer settings changed in the chat View source #message_auto_delete_timer_changed= ( message_auto_delete_timer_changed : Tourmaline::MessageAutoDeleteTimerChanged? ) # Optional. Service message: auto-delete timer settings changed in the chat View source #message_id : Int32 | Int64 # Unique message identifier inside this chat View source #message_id= ( message_id : Int32 | Int64 ) # Unique message identifier inside this chat View source #message_thread_id : Int32 | Int64 | Nil # Optional. Unique identifier of a message thread to which the message belongs; for supergroups only View source #message_thread_id= ( message_thread_id : Int32 | Int64 | Nil ) # Optional. Unique identifier of a message thread to which the message belongs; for supergroups only View source #migrate_from_chat_id : Int32 | Int64 | Nil # Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #migrate_from_chat_id= ( migrate_from_chat_id : Int32 | Int64 | Nil ) # Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #migrate_to_chat_id : Int32 | Int64 | Nil # Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #migrate_to_chat_id= ( migrate_to_chat_id : Int32 | Int64 | Nil ) # Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #new_chat_members : Array ( Tourmaline::User ) # Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members) View source #new_chat_members= ( new_chat_members : Array ( Tourmaline::User )) # Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members) View source #new_chat_photo : Array ( Tourmaline::PhotoSize ) # Optional. A chat photo was change to this value View source #new_chat_photo= ( new_chat_photo : Array ( Tourmaline::PhotoSize )) # Optional. A chat photo was change to this value View source #new_chat_title : String? # Optional. A chat title was changed to this value View source #new_chat_title= ( new_chat_title : String? ) # Optional. A chat title was changed to this value View source #passport_data : Tourmaline::PassportData? # Optional. Telegram Passport data View source #passport_data= ( passport_data : Tourmaline::PassportData? ) # Optional. Telegram Passport data View source #photo : Array ( Tourmaline::PhotoSize ) # Optional. Message is a photo, available sizes of the photo View source #photo= ( photo : Array ( Tourmaline::PhotoSize )) # Optional. Message is a photo, available sizes of the photo View source #pinned_message : Tourmaline::MaybeInaccessibleMessage? # Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source #pinned_message= ( pinned_message : Tourmaline::MaybeInaccessibleMessage? ) # Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source #poll : Tourmaline::Poll? # Optional. Message is a native poll, information about the poll View source #poll= ( poll : Tourmaline::Poll? ) # Optional. Message is a native poll, information about the poll View source #proximity_alert_triggered : Tourmaline::ProximityAlertTriggered? # Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location. View source #proximity_alert_triggered= ( proximity_alert_triggered : Tourmaline::ProximityAlertTriggered? ) # Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location. View source #quote : Tourmaline::TextQuote? # Optional. For replies that quote part of the original message, the quoted part of the message View source #quote= ( quote : Tourmaline::TextQuote? ) # Optional. For replies that quote part of the original message, the quoted part of the message View source #reply_markup : Tourmaline::InlineKeyboardMarkup? # Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons. View source #reply_markup= ( reply_markup : Tourmaline::InlineKeyboardMarkup? ) # Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons. View source #reply_to_message : Tourmaline::Message? # Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source #reply_to_message= ( reply_to_message : Tourmaline::Message? ) # Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source #reply_to_story : Tourmaline::Story? # Optional. For replies to a story, the original story View source #reply_to_story= ( reply_to_story : Tourmaline::Story? ) # Optional. For replies to a story, the original story View source #sender_boost_count : Int32 | Int64 | Nil # Optional. If the sender of the message boosted the chat, the number of boosts added by the user View source #sender_boost_count= ( sender_boost_count : Int32 | Int64 | Nil ) # Optional. If the sender of the message boosted the chat, the number of boosts added by the user View source #sender_business_bot : Tourmaline::User? # Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account. View source #sender_business_bot= ( sender_business_bot : Tourmaline::User? ) # Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account. View source #sender_chat : Tourmaline::Chat? # Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for channel posts, the supergroup itself for messages from anonymous group administrators, the linked channel for messages automatically forwarded to the discussion group. For backward compatibility, the field from contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source #sender_chat= ( sender_chat : Tourmaline::Chat? ) # Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for channel posts, the supergroup itself for messages from anonymous group administrators, the linked channel for messages automatically forwarded to the discussion group. For backward compatibility, the field from contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source #sender_type # View source #sticker : Tourmaline::Sticker? # Optional. Message is a sticker, information about the sticker View source #sticker= ( sticker : Tourmaline::Sticker? ) # Optional. Message is a sticker, information about the sticker View source #story : Tourmaline::Story? # Optional. Message is a forwarded story View source #story= ( story : Tourmaline::Story? ) # Optional. Message is a forwarded story View source #successful_payment : Tourmaline::SuccessfulPayment? # Optional. Message is a service message about a successful payment, information about the payment. More about payments: https://core.telegram.org/bots/api#payments View source #successful_payment= ( successful_payment : Tourmaline::SuccessfulPayment? ) # Optional. Message is a service message about a successful payment, information about the payment. More about payments: https://core.telegram.org/bots/api#payments View source #supergroup_chat_created= ( supergroup_chat_created : Bool? ) # Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup. View source #supergroup_chat_created? : Bool? # Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup. View source #text : String? # Optional. For text messages, the actual UTF-8 text of the message View source #text= ( text : String? ) # Optional. For text messages, the actual UTF-8 text of the message View source #text_entities ( type : String ) # View source #text_entities # View source #users ( & block : User -> ) # View source #users # View source #users_shared : Tourmaline::UsersShared? # Optional. Service message: users were shared with the bot View source #users_shared= ( users_shared : Tourmaline::UsersShared? ) # Optional. Service message: users were shared with the bot View source #venue : Tourmaline::Venue? # Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set View source #venue= ( venue : Tourmaline::Venue? ) # Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set View source #via_bot : Tourmaline::User? # Optional. Bot through which the message was sent View source #via_bot= ( via_bot : Tourmaline::User? ) # Optional. Bot through which the message was sent View source #video : Tourmaline::Video? # Optional. Message is a video, information about the video View source #video= ( video : Tourmaline::Video? ) # Optional. Message is a video, information about the video View source #video_chat_ended : Tourmaline::VideoChatEnded? # Optional. Service message: video chat ended View source #video_chat_ended= ( video_chat_ended : Tourmaline::VideoChatEnded? ) # Optional. Service message: video chat ended View source #video_chat_participants_invited : Tourmaline::VideoChatParticipantsInvited? # Optional. Service message: new participants invited to a video chat View source #video_chat_participants_invited= ( video_chat_participants_invited : Tourmaline::VideoChatParticipantsInvited? ) # Optional. Service message: new participants invited to a video chat View source #video_chat_scheduled : Tourmaline::VideoChatScheduled? # Optional. Service message: video chat scheduled View source #video_chat_scheduled= ( video_chat_scheduled : Tourmaline::VideoChatScheduled? ) # Optional. Service message: video chat scheduled View source #video_chat_started : Tourmaline::VideoChatStarted? # Optional. Service message: video chat started View source #video_chat_started= ( video_chat_started : Tourmaline::VideoChatStarted? ) # Optional. Service message: video chat started View source #video_note : Tourmaline::VideoNote? # Optional. Message is a video note, information about the video message View source #video_note= ( video_note : Tourmaline::VideoNote? ) # Optional. Message is a video note, information about the video message View source #voice : Tourmaline::Voice? # Optional. Message is a voice message, information about the file View source #voice= ( voice : Tourmaline::Voice? ) # Optional. Message is a voice message, information about the file View source #web_app_data : Tourmaline::WebAppData? # Optional. Service message: data sent by a Web App View source #web_app_data= ( web_app_data : Tourmaline::WebAppData? ) # Optional. Service message: data sent by a Web App View source #write_access_allowed : Tourmaline::WriteAccessAllowed? # Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess View source #write_access_allowed= ( write_access_allowed : Tourmaline::WriteAccessAllowed? ) # Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess View source","title":"Message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message","text":"This object represents a message.","title":"Message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message.new(message_id,date,chat,message_thread_id,from,sender_chat,sender_boost_count,sender_business_bot,business_connection_id,forward_origin,is_topic_message,is_automatic_forward,reply_to_message,external_reply,quote,reply_to_story,via_bot,edit_date,has_protected_content,is_from_offline,media_group_id,author_signature,text,entities,link_preview_options,animation,audio,document,photo,sticker,story,video,video_note,voice,caption,caption_entities,has_media_spoiler,contact,dice,game,poll,venue,location,new_chat_members,left_chat_member,new_chat_title,new_chat_photo,delete_chat_photo,group_chat_created,supergroup_chat_created,channel_chat_created,message_auto_delete_timer_changed,migrate_to_chat_id,migrate_from_chat_id,pinned_message,invoice,successful_payment,users_shared,chat_shared,connected_website,write_access_allowed,passport_data,proximity_alert_triggered,boost_added,chat_background_set,forum_topic_created,forum_topic_edited,forum_topic_closed,forum_topic_reopened,general_forum_topic_hidden,general_forum_topic_unhidden,giveaway_created,giveaway,giveaway_winners,giveaway_completed,video_chat_scheduled,video_chat_started,video_chat_ended,video_chat_participants_invited,web_app_data,reply_markup)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#animation","text":"Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set View source","title":"#animation"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#animation=(animation)","text":"Optional. Message is an animation, information about the animation. For backward compatibility, when this field is set, the document field will also be set View source","title":"#animation="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#audio","text":"Optional. Message is an audio file, information about the file View source","title":"#audio"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#audio=(audio)","text":"Optional. Message is an audio file, information about the file View source","title":"#audio="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#author_signature","text":"Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator View source","title":"#author_signature"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#author_signature=(author_signature)","text":"Optional. Signature of the post author for messages in channels, or the custom title of an anonymous group administrator View source","title":"#author_signature="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#boost_added","text":"Optional. Service message: user boosted the chat View source","title":"#boost_added"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#boost_added=(boost_added)","text":"Optional. Service message: user boosted the chat View source","title":"#boost_added="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#business_connection_id","text":"Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. View source","title":"#business_connection_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#business_connection_id=(business_connection_id)","text":"Optional. Unique identifier of the business connection from which the message was received. If non-empty, the message belongs to a chat of the corresponding business account that is independent from any potential bot chat which might share the same identifier. View source","title":"#business_connection_id="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption","text":"Optional. Caption for the animation, audio, document, photo, video or voice View source","title":"#caption"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption=(caption)","text":"Optional. Caption for the animation, audio, document, photo, video or voice View source","title":"#caption="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption_entities","text":"Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption View source","title":"#caption_entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#caption_entities=(caption_entities)","text":"Optional. For messages with a caption, special entities like usernames, URLs, bot commands, etc. that appear in the caption View source","title":"#caption_entities="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#channel_chat_created=(channel_chat_created)","text":"Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel. View source","title":"#channel_chat_created="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#channel_chat_created?","text":"Optional. Service message: the channel has been created. This field can't be received in a message coming through updates, because bot can't be a member of a channel when it is created. It can only be found in reply_to_message if someone replies to a very first message in a channel. View source","title":"#channel_chat_created?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat","text":"Chat the message belongs to View source","title":"#chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat=(chat)","text":"Chat the message belongs to View source","title":"#chat="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat_background_set","text":"Optional. Service message: chat background set View source","title":"#chat_background_set"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat_background_set=(chat_background_set)","text":"Optional. Service message: chat background set View source","title":"#chat_background_set="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat_shared","text":"Optional. Service message: a chat was shared with the bot View source","title":"#chat_shared"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chat_shared=(chat_shared)","text":"Optional. Service message: a chat was shared with the bot View source","title":"#chat_shared="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#chats(&)","text":"View source","title":"#chats"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#connected_website","text":"Optional. The domain name of the website on which the user has logged in. More about Telegram Login: https://core.telegram.org/widgets/login View source","title":"#connected_website"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#connected_website=(connected_website)","text":"Optional. The domain name of the website on which the user has logged in. More about Telegram Login: https://core.telegram.org/widgets/login View source","title":"#connected_website="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#contact","text":"Optional. Message is a shared contact, information about the contact View source","title":"#contact"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#contact=(contact)","text":"Optional. Message is a shared contact, information about the contact View source","title":"#contact="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#delete_chat_photo=(delete_chat_photo)","text":"Optional. Service message: the chat photo was deleted View source","title":"#delete_chat_photo="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#delete_chat_photo?","text":"Optional. Service message: the chat photo was deleted View source","title":"#delete_chat_photo?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#dice","text":"Optional. Message is a dice with random value View source","title":"#dice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#dice=(dice)","text":"Optional. Message is a dice with random value View source","title":"#dice="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#document","text":"Optional. Message is a general file, information about the file View source","title":"#document"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#document=(document)","text":"Optional. Message is a general file, information about the file View source","title":"#document="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_date","text":"View source","title":"#edit_date"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#edit_date=(edit_date)","text":"View source","title":"#edit_date="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#entities","text":"Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text View source","title":"#entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#entities=(entities)","text":"Optional. For text messages, special entities like usernames, URLs, bot commands, etc. that appear in the text View source","title":"#entities="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#external_reply","text":"Optional. Information about the message that is being replied to, which may come from another chat or forum topic View source","title":"#external_reply"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#external_reply=(external_reply)","text":"Optional. Information about the message that is being replied to, which may come from another chat or forum topic View source","title":"#external_reply="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#file","text":"View source","title":"#file"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_closed","text":"Optional. Service message: forum topic closed View source","title":"#forum_topic_closed"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_closed=(forum_topic_closed)","text":"Optional. Service message: forum topic closed View source","title":"#forum_topic_closed="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_created","text":"Optional. Service message: forum topic created View source","title":"#forum_topic_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_created=(forum_topic_created)","text":"Optional. Service message: forum topic created View source","title":"#forum_topic_created="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_edited","text":"Optional. Service message: forum topic edited View source","title":"#forum_topic_edited"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_edited=(forum_topic_edited)","text":"Optional. Service message: forum topic edited View source","title":"#forum_topic_edited="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_reopened","text":"Optional. Service message: forum topic reopened View source","title":"#forum_topic_reopened"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forum_topic_reopened=(forum_topic_reopened)","text":"Optional. Service message: forum topic reopened View source","title":"#forum_topic_reopened="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_origin","text":"Optional. Information about the original message for forwarded messages View source","title":"#forward_origin"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#forward_origin=(forward_origin)","text":"Optional. Information about the original message for forwarded messages View source","title":"#forward_origin="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#from","text":"Optional. Sender of the message; empty for messages sent to channels. For backward compatibility, the field contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source","title":"#from"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#from=(from)","text":"Optional. Sender of the message; empty for messages sent to channels. For backward compatibility, the field contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source","title":"#from="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#game","text":"Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source","title":"#game"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#game=(game)","text":"Optional. Message is a game, information about the game. More about games: https://core.telegram.org/bots/api#games View source","title":"#game="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#general_forum_topic_hidden","text":"Optional. Service message: the 'General' forum topic hidden View source","title":"#general_forum_topic_hidden"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#general_forum_topic_hidden=(general_forum_topic_hidden)","text":"Optional. Service message: the 'General' forum topic hidden View source","title":"#general_forum_topic_hidden="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#general_forum_topic_unhidden","text":"Optional. Service message: the 'General' forum topic unhidden View source","title":"#general_forum_topic_unhidden"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#general_forum_topic_unhidden=(general_forum_topic_unhidden)","text":"Optional. Service message: the 'General' forum topic unhidden View source","title":"#general_forum_topic_unhidden="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway","text":"Optional. The message is a scheduled giveaway message View source","title":"#giveaway"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway=(giveaway)","text":"Optional. The message is a scheduled giveaway message View source","title":"#giveaway="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway_completed","text":"Optional. Service message: a giveaway without public winners was completed View source","title":"#giveaway_completed"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway_completed=(giveaway_completed)","text":"Optional. Service message: a giveaway without public winners was completed View source","title":"#giveaway_completed="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway_created","text":"Optional. Service message: a scheduled giveaway was created View source","title":"#giveaway_created"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway_created=(giveaway_created)","text":"Optional. Service message: a scheduled giveaway was created View source","title":"#giveaway_created="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway_winners","text":"Optional. A giveaway with public winners was completed View source","title":"#giveaway_winners"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#giveaway_winners=(giveaway_winners)","text":"Optional. A giveaway with public winners was completed View source","title":"#giveaway_winners="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#group_chat_created=(group_chat_created)","text":"Optional. Service message: the group has been created View source","title":"#group_chat_created="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#group_chat_created?","text":"Optional. Service message: the group has been created View source","title":"#group_chat_created?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#has_media_spoiler=(has_media_spoiler)","text":"Optional. True, if the message media is covered by a spoiler animation View source","title":"#has_media_spoiler="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#has_media_spoiler?","text":"Optional. True, if the message media is covered by a spoiler animation View source","title":"#has_media_spoiler?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#has_protected_content=(has_protected_content)","text":"Optional. True, if the message can't be forwarded View source","title":"#has_protected_content="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#has_protected_content?","text":"Optional. True, if the message can't be forwarded View source","title":"#has_protected_content?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#invoice","text":"Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source","title":"#invoice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#invoice=(invoice)","text":"Optional. Message is an invoice for a payment, information about the invoice. More about payments: https://core.telegram.org/bots/api#payments View source","title":"#invoice="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_automatic_forward=(is_automatic_forward)","text":"Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group View source","title":"#is_automatic_forward="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_automatic_forward?","text":"Optional. True, if the message is a channel post that was automatically forwarded to the connected discussion group View source","title":"#is_automatic_forward?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_from_offline=(is_from_offline)","text":"Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message View source","title":"#is_from_offline="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_from_offline?","text":"Optional. True, if the message was sent by an implicit action, for example, as an away or a greeting business message, or as a scheduled message View source","title":"#is_from_offline?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_topic_message=(is_topic_message)","text":"Optional. True, if the message is sent to a forum topic View source","title":"#is_topic_message="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#is_topic_message?","text":"Optional. True, if the message is sent to a forum topic View source","title":"#is_topic_message?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#left_chat_member","text":"Optional. A member was removed from the group, information about them (this member may be the bot itself) View source","title":"#left_chat_member"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#left_chat_member=(left_chat_member)","text":"Optional. A member was removed from the group, information about them (this member may be the bot itself) View source","title":"#left_chat_member="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#link","text":"View source","title":"#link"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#link_preview_options","text":"Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed View source","title":"#link_preview_options"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#link_preview_options=(link_preview_options)","text":"Optional. Options used for link preview generation for the message, if it is a text message and link preview options were changed View source","title":"#link_preview_options="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#location","text":"Optional. Message is a shared location, information about the location View source","title":"#location"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#location=(location)","text":"Optional. Message is a shared location, information about the location View source","title":"#location="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#media_group_id","text":"Optional. The unique identifier of a media message group this message belongs to View source","title":"#media_group_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#media_group_id=(media_group_id)","text":"Optional. The unique identifier of a media message group this message belongs to View source","title":"#media_group_id="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_auto_delete_timer_changed","text":"Optional. Service message: auto-delete timer settings changed in the chat View source","title":"#message_auto_delete_timer_changed"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_auto_delete_timer_changed=(message_auto_delete_timer_changed)","text":"Optional. Service message: auto-delete timer settings changed in the chat View source","title":"#message_auto_delete_timer_changed="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_id","text":"Unique message identifier inside this chat View source","title":"#message_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_id=(message_id)","text":"Unique message identifier inside this chat View source","title":"#message_id="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_thread_id","text":"Optional. Unique identifier of a message thread to which the message belongs; for supergroups only View source","title":"#message_thread_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#message_thread_id=(message_thread_id)","text":"Optional. Unique identifier of a message thread to which the message belongs; for supergroups only View source","title":"#message_thread_id="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_from_chat_id","text":"Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#migrate_from_chat_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_from_chat_id=(migrate_from_chat_id)","text":"Optional. The supergroup has been migrated from a group with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#migrate_from_chat_id="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_to_chat_id","text":"Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#migrate_to_chat_id"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#migrate_to_chat_id=(migrate_to_chat_id)","text":"Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#migrate_to_chat_id="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_members","text":"Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members) View source","title":"#new_chat_members"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_members=(new_chat_members)","text":"Optional. New members that were added to the group or supergroup and information about them (the bot itself may be one of these members) View source","title":"#new_chat_members="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_photo","text":"Optional. A chat photo was change to this value View source","title":"#new_chat_photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_photo=(new_chat_photo)","text":"Optional. A chat photo was change to this value View source","title":"#new_chat_photo="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_title","text":"Optional. A chat title was changed to this value View source","title":"#new_chat_title"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#new_chat_title=(new_chat_title)","text":"Optional. A chat title was changed to this value View source","title":"#new_chat_title="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#passport_data","text":"Optional. Telegram Passport data View source","title":"#passport_data"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#passport_data=(passport_data)","text":"Optional. Telegram Passport data View source","title":"#passport_data="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#photo","text":"Optional. Message is a photo, available sizes of the photo View source","title":"#photo"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#photo=(photo)","text":"Optional. Message is a photo, available sizes of the photo View source","title":"#photo="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#pinned_message","text":"Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source","title":"#pinned_message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#pinned_message=(pinned_message)","text":"Optional. Specified message was pinned. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source","title":"#pinned_message="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#poll","text":"Optional. Message is a native poll, information about the poll View source","title":"#poll"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#poll=(poll)","text":"Optional. Message is a native poll, information about the poll View source","title":"#poll="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#proximity_alert_triggered","text":"Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location. View source","title":"#proximity_alert_triggered"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#proximity_alert_triggered=(proximity_alert_triggered)","text":"Optional. Service message. A user in the chat triggered another user's proximity alert while sharing Live Location. View source","title":"#proximity_alert_triggered="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#quote","text":"Optional. For replies that quote part of the original message, the quoted part of the message View source","title":"#quote"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#quote=(quote)","text":"Optional. For replies that quote part of the original message, the quoted part of the message View source","title":"#quote="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_markup","text":"Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons. View source","title":"#reply_markup"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_markup=(reply_markup)","text":"Optional. Inline keyboard attached to the message. login_url buttons are represented as ordinary url buttons. View source","title":"#reply_markup="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_to_message","text":"Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source","title":"#reply_to_message"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_to_message=(reply_to_message)","text":"Optional. For replies in the same chat and message thread, the original message. Note that the Message object in this field will not contain further reply_to_message fields even if it itself is a reply. View source","title":"#reply_to_message="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_to_story","text":"Optional. For replies to a story, the original story View source","title":"#reply_to_story"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#reply_to_story=(reply_to_story)","text":"Optional. For replies to a story, the original story View source","title":"#reply_to_story="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_boost_count","text":"Optional. If the sender of the message boosted the chat, the number of boosts added by the user View source","title":"#sender_boost_count"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_boost_count=(sender_boost_count)","text":"Optional. If the sender of the message boosted the chat, the number of boosts added by the user View source","title":"#sender_boost_count="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_business_bot","text":"Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account. View source","title":"#sender_business_bot"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_business_bot=(sender_business_bot)","text":"Optional. The bot that actually sent the message on behalf of the business account. Available only for outgoing messages sent on behalf of the connected business account. View source","title":"#sender_business_bot="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_chat","text":"Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for channel posts, the supergroup itself for messages from anonymous group administrators, the linked channel for messages automatically forwarded to the discussion group. For backward compatibility, the field from contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source","title":"#sender_chat"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_chat=(sender_chat)","text":"Optional. Sender of the message, sent on behalf of a chat. For example, the channel itself for channel posts, the supergroup itself for messages from anonymous group administrators, the linked channel for messages automatically forwarded to the discussion group. For backward compatibility, the field from contains a fake sender user in non-channel chats, if the message was sent on behalf of a chat. View source","title":"#sender_chat="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sender_type","text":"View source","title":"#sender_type"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sticker","text":"Optional. Message is a sticker, information about the sticker View source","title":"#sticker"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#sticker=(sticker)","text":"Optional. Message is a sticker, information about the sticker View source","title":"#sticker="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#story","text":"Optional. Message is a forwarded story View source","title":"#story"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#story=(story)","text":"Optional. Message is a forwarded story View source","title":"#story="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#successful_payment","text":"Optional. Message is a service message about a successful payment, information about the payment. More about payments: https://core.telegram.org/bots/api#payments View source","title":"#successful_payment"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#successful_payment=(successful_payment)","text":"Optional. Message is a service message about a successful payment, information about the payment. More about payments: https://core.telegram.org/bots/api#payments View source","title":"#successful_payment="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#supergroup_chat_created=(supergroup_chat_created)","text":"Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup. View source","title":"#supergroup_chat_created="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#supergroup_chat_created?","text":"Optional. Service message: the supergroup has been created. This field can't be received in a message coming through updates, because bot can't be a member of a supergroup when it is created. It can only be found in reply_to_message if someone replies to a very first message in a directly created supergroup. View source","title":"#supergroup_chat_created?"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#text","text":"Optional. For text messages, the actual UTF-8 text of the message View source","title":"#text"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#text=(text)","text":"Optional. For text messages, the actual UTF-8 text of the message View source","title":"#text="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#text_entities(type)","text":"View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#users(&)","text":"View source","title":"#users"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#users_shared","text":"Optional. Service message: users were shared with the bot View source","title":"#users_shared"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#users_shared=(users_shared)","text":"Optional. Service message: users were shared with the bot View source","title":"#users_shared="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#venue","text":"Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set View source","title":"#venue"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#venue=(venue)","text":"Optional. Message is a venue, information about the venue. For backward compatibility, when this field is set, the location field will also be set View source","title":"#venue="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#via_bot","text":"Optional. Bot through which the message was sent View source","title":"#via_bot"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#via_bot=(via_bot)","text":"Optional. Bot through which the message was sent View source","title":"#via_bot="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video","text":"Optional. Message is a video, information about the video View source","title":"#video"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video=(video)","text":"Optional. Message is a video, information about the video View source","title":"#video="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_ended","text":"Optional. Service message: video chat ended View source","title":"#video_chat_ended"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_ended=(video_chat_ended)","text":"Optional. Service message: video chat ended View source","title":"#video_chat_ended="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_participants_invited","text":"Optional. Service message: new participants invited to a video chat View source","title":"#video_chat_participants_invited"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_participants_invited=(video_chat_participants_invited)","text":"Optional. Service message: new participants invited to a video chat View source","title":"#video_chat_participants_invited="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_scheduled","text":"Optional. Service message: video chat scheduled View source","title":"#video_chat_scheduled"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_scheduled=(video_chat_scheduled)","text":"Optional. Service message: video chat scheduled View source","title":"#video_chat_scheduled="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_started","text":"Optional. Service message: video chat started View source","title":"#video_chat_started"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_chat_started=(video_chat_started)","text":"Optional. Service message: video chat started View source","title":"#video_chat_started="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_note","text":"Optional. Message is a video note, information about the video message View source","title":"#video_note"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#video_note=(video_note)","text":"Optional. Message is a video note, information about the video message View source","title":"#video_note="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice","text":"Optional. Message is a voice message, information about the file View source","title":"#voice"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#voice=(voice)","text":"Optional. Message is a voice message, information about the file View source","title":"#voice="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#web_app_data","text":"Optional. Service message: data sent by a Web App View source","title":"#web_app_data"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#web_app_data=(web_app_data)","text":"Optional. Service message: data sent by a Web App View source","title":"#web_app_data="},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#write_access_allowed","text":"Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess View source","title":"#write_access_allowed"},{"location":"api_reference/Tourmaline/Message/#Tourmaline::Message#write_access_allowed=(write_access_allowed)","text":"Optional. Service message: the user allowed the bot to write messages after adding it to the attachment or side menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess View source","title":"#write_access_allowed="},{"location":"api_reference/Tourmaline/Message/SenderType/","text":"enum Tourmaline::Message::SenderType # Members # Bot = 0 # User = 1 # Channel = 2 # ChannelForward = 3 # AnonymousAdmin = 4 # Methods # #anonymous_admin? # View source #bot? # View source #channel? # View source #channel_forward? # View source #user? # View source","title":"SenderType"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType","text":"","title":"SenderType"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::Bot","text":"","title":"Bot"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::User","text":"","title":"User"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::Channel","text":"","title":"Channel"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::ChannelForward","text":"","title":"ChannelForward"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType::AnonymousAdmin","text":"","title":"AnonymousAdmin"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#anonymous_admin?","text":"View source","title":"#anonymous_admin?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#bot?","text":"View source","title":"#bot?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#channel?","text":"View source","title":"#channel?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#channel_forward?","text":"View source","title":"#channel_forward?"},{"location":"api_reference/Tourmaline/Message/SenderType/#Tourmaline::Message::SenderType#user?","text":"View source","title":"#user?"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/","text":"class Tourmaline::MessageAutoDeleteTimerChanged inherits Reference # This object represents a service message about a change in auto-delete timer settings. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( message_auto_delete_time ) # View source Methods # #message_auto_delete_time : Time # View source #message_auto_delete_time= ( message_auto_delete_time : Time ) # View source","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged","text":"This object represents a service message about a change in auto-delete timer settings.","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged#message_auto_delete_time","text":"View source","title":"#message_auto_delete_time"},{"location":"api_reference/Tourmaline/MessageAutoDeleteTimerChanged/#Tourmaline::MessageAutoDeleteTimerChanged#message_auto_delete_time=(message_auto_delete_time)","text":"View source","title":"#message_auto_delete_time="},{"location":"api_reference/Tourmaline/MessageEntity/","text":"class Tourmaline::MessageEntity inherits Reference # This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc. Included modules JSON::Serializable Constructors # .new ( type , offset , length , url : String? = nil , user : Tourmaline::User? = nil , language : String? = nil , custom_emoji_id : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #custom_emoji_id : String? # Optional. For \"custom_emoji\" only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker View source #custom_emoji_id= ( custom_emoji_id : String? ) # Optional. For \"custom_emoji\" only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker View source #language : String? # Optional. For \"pre\" only, the programming language of the entity text View source #language= ( language : String? ) # Optional. For \"pre\" only, the programming language of the entity text View source #length : Int32 | Int64 # Length of the entity in UTF-16 code units View source #length= ( length : Int32 | Int64 ) # Length of the entity in UTF-16 code units View source #offset : Int32 | Int64 # Offset in UTF-16 code units to the start of the entity View source #offset= ( offset : Int32 | Int64 ) # Offset in UTF-16 code units to the start of the entity View source #type : String # Type of the entity. Currently, can be \"mention\" (@username), \"hashtag\" (#hashtag), \"cashtag\" ($USD), \"bot_command\" (/start@jobs_bot), \"url\" ( https://telegram.org ), \"email\" ( do-not-reply@telegram.org ), \"phone_number\" (+1-212-555-0123), \"bold\" (bold text), \"italic\" (italic text), \"underline\" (underlined text), \"strikethrough\" (strikethrough text), \"spoiler\" (spoiler message), \"blockquote\" (block quotation), \"code\" (monowidth string), \"pre\" (monowidth block), \"text_link\" (for clickable text URLs), \"text_mention\" (for users without usernames), \"custom_emoji\" (for inline custom emoji stickers) View source #type= ( type : String ) # Type of the entity. Currently, can be \"mention\" (@username), \"hashtag\" (#hashtag), \"cashtag\" ($USD), \"bot_command\" (/start@jobs_bot), \"url\" ( https://telegram.org ), \"email\" ( do-not-reply@telegram.org ), \"phone_number\" (+1-212-555-0123), \"bold\" (bold text), \"italic\" (italic text), \"underline\" (underlined text), \"strikethrough\" (strikethrough text), \"spoiler\" (spoiler message), \"blockquote\" (block quotation), \"code\" (monowidth string), \"pre\" (monowidth block), \"text_link\" (for clickable text URLs), \"text_mention\" (for users without usernames), \"custom_emoji\" (for inline custom emoji stickers) View source #url : String? # Optional. For \"text_link\" only, URL that will be opened after user taps on the text View source #url= ( url : String? ) # Optional. For \"text_link\" only, URL that will be opened after user taps on the text View source #user : Tourmaline::User? # Optional. For \"text_mention\" only, the mentioned user View source #user= ( user : Tourmaline::User? ) # Optional. For \"text_mention\" only, the mentioned user View source","title":"MessageEntity"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity","text":"This object represents one special entity in a text message. For example, hashtags, usernames, URLs, etc.","title":"MessageEntity"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity.new(type,offset,length,url,user,language,custom_emoji_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#custom_emoji_id","text":"Optional. For \"custom_emoji\" only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker View source","title":"#custom_emoji_id"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#custom_emoji_id=(custom_emoji_id)","text":"Optional. For \"custom_emoji\" only, unique identifier of the custom emoji. Use getCustomEmojiStickers to get full information about the sticker View source","title":"#custom_emoji_id="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#language","text":"Optional. For \"pre\" only, the programming language of the entity text View source","title":"#language"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#language=(language)","text":"Optional. For \"pre\" only, the programming language of the entity text View source","title":"#language="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#length","text":"Length of the entity in UTF-16 code units View source","title":"#length"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#length=(length)","text":"Length of the entity in UTF-16 code units View source","title":"#length="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#offset","text":"Offset in UTF-16 code units to the start of the entity View source","title":"#offset"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#offset=(offset)","text":"Offset in UTF-16 code units to the start of the entity View source","title":"#offset="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#type","text":"Type of the entity. Currently, can be \"mention\" (@username), \"hashtag\" (#hashtag), \"cashtag\" ($USD), \"bot_command\" (/start@jobs_bot), \"url\" ( https://telegram.org ), \"email\" ( do-not-reply@telegram.org ), \"phone_number\" (+1-212-555-0123), \"bold\" (bold text), \"italic\" (italic text), \"underline\" (underlined text), \"strikethrough\" (strikethrough text), \"spoiler\" (spoiler message), \"blockquote\" (block quotation), \"code\" (monowidth string), \"pre\" (monowidth block), \"text_link\" (for clickable text URLs), \"text_mention\" (for users without usernames), \"custom_emoji\" (for inline custom emoji stickers) View source","title":"#type"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#type=(type)","text":"Type of the entity. Currently, can be \"mention\" (@username), \"hashtag\" (#hashtag), \"cashtag\" ($USD), \"bot_command\" (/start@jobs_bot), \"url\" ( https://telegram.org ), \"email\" ( do-not-reply@telegram.org ), \"phone_number\" (+1-212-555-0123), \"bold\" (bold text), \"italic\" (italic text), \"underline\" (underlined text), \"strikethrough\" (strikethrough text), \"spoiler\" (spoiler message), \"blockquote\" (block quotation), \"code\" (monowidth string), \"pre\" (monowidth block), \"text_link\" (for clickable text URLs), \"text_mention\" (for users without usernames), \"custom_emoji\" (for inline custom emoji stickers) View source","title":"#type="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#url","text":"Optional. For \"text_link\" only, URL that will be opened after user taps on the text View source","title":"#url"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#url=(url)","text":"Optional. For \"text_link\" only, URL that will be opened after user taps on the text View source","title":"#url="},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#user","text":"Optional. For \"text_mention\" only, the mentioned user View source","title":"#user"},{"location":"api_reference/Tourmaline/MessageEntity/#Tourmaline::MessageEntity#user=(user)","text":"Optional. For \"text_mention\" only, the mentioned user View source","title":"#user="},{"location":"api_reference/Tourmaline/MessageId/","text":"class Tourmaline::MessageId inherits Reference # This object represents a unique message identifier. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( message_id ) # View source Methods # #message_id : Int32 | Int64 # Unique message identifier View source #message_id= ( message_id : Int32 | Int64 ) # Unique message identifier View source","title":"MessageId"},{"location":"api_reference/Tourmaline/MessageId/#Tourmaline::MessageId","text":"This object represents a unique message identifier.","title":"MessageId"},{"location":"api_reference/Tourmaline/MessageId/#Tourmaline::MessageId-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageId/#Tourmaline::MessageId.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageId/#Tourmaline::MessageId-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageId/#Tourmaline::MessageId#message_id","text":"Unique message identifier View source","title":"#message_id"},{"location":"api_reference/Tourmaline/MessageId/#Tourmaline::MessageId#message_id=(message_id)","text":"Unique message identifier View source","title":"#message_id="},{"location":"api_reference/Tourmaline/MessageOrigin/","text":"alias Tourmaline::MessageOrigin # This object describes the origin of a message. It can be one of - MessageOriginUser - MessageOriginHiddenUser - MessageOriginChat - MessageOriginChannel Alias definition Tourmaline::MessageOriginChannel | Tourmaline::MessageOriginChat | Tourmaline::MessageOriginHiddenUser | Tourmaline::MessageOriginUser","title":"MessageOrigin"},{"location":"api_reference/Tourmaline/MessageOrigin/#Tourmaline::MessageOrigin","text":"This object describes the origin of a message. It can be one of - MessageOriginUser - MessageOriginHiddenUser - MessageOriginChat - MessageOriginChannel","title":"MessageOrigin"},{"location":"api_reference/Tourmaline/MessageOriginChannel/","text":"class Tourmaline::MessageOriginChannel inherits Reference # The message was originally sent to a channel chat. Included modules JSON::Serializable Constructors # .new ( type , date , chat , message_id , author_signature : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #author_signature : String? # Optional. Signature of the original post author View source #author_signature= ( author_signature : String? ) # Optional. Signature of the original post author View source #chat : Tourmaline::Chat # Channel chat to which the message was originally sent View source #chat= ( chat : Tourmaline::Chat ) # Channel chat to which the message was originally sent View source #date : Time # View source #date= ( date : Time ) # View source #message_id : Int32 | Int64 # Unique message identifier inside the chat View source #message_id= ( message_id : Int32 | Int64 ) # Unique message identifier inside the chat View source #type : String # Type of the message origin, always \"channel\" View source #type= ( type : String ) # Type of the message origin, always \"channel\" View source","title":"MessageOriginChannel"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel","text":"The message was originally sent to a channel chat.","title":"MessageOriginChannel"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel.new(type,date,chat,message_id,author_signature)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#author_signature","text":"Optional. Signature of the original post author View source","title":"#author_signature"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#author_signature=(author_signature)","text":"Optional. Signature of the original post author View source","title":"#author_signature="},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#chat","text":"Channel chat to which the message was originally sent View source","title":"#chat"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#chat=(chat)","text":"Channel chat to which the message was originally sent View source","title":"#chat="},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#message_id","text":"Unique message identifier inside the chat View source","title":"#message_id"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#message_id=(message_id)","text":"Unique message identifier inside the chat View source","title":"#message_id="},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#type","text":"Type of the message origin, always \"channel\" View source","title":"#type"},{"location":"api_reference/Tourmaline/MessageOriginChannel/#Tourmaline::MessageOriginChannel#type=(type)","text":"Type of the message origin, always \"channel\" View source","title":"#type="},{"location":"api_reference/Tourmaline/MessageOriginChat/","text":"class Tourmaline::MessageOriginChat inherits Reference # The message was originally sent on behalf of a chat to a group chat. Included modules JSON::Serializable Constructors # .new ( type , date , sender_chat , author_signature : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #author_signature : String? # Optional. For messages originally sent by an anonymous chat administrator, original message author signature View source #author_signature= ( author_signature : String? ) # Optional. For messages originally sent by an anonymous chat administrator, original message author signature View source #date : Time # View source #date= ( date : Time ) # View source #sender_chat : Tourmaline::Chat # Chat that sent the message originally View source #sender_chat= ( sender_chat : Tourmaline::Chat ) # Chat that sent the message originally View source #type : String # Type of the message origin, always \"chat\" View source #type= ( type : String ) # Type of the message origin, always \"chat\" View source","title":"MessageOriginChat"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat","text":"The message was originally sent on behalf of a chat to a group chat.","title":"MessageOriginChat"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat.new(type,date,sender_chat,author_signature)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#author_signature","text":"Optional. For messages originally sent by an anonymous chat administrator, original message author signature View source","title":"#author_signature"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#author_signature=(author_signature)","text":"Optional. For messages originally sent by an anonymous chat administrator, original message author signature View source","title":"#author_signature="},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#sender_chat","text":"Chat that sent the message originally View source","title":"#sender_chat"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#sender_chat=(sender_chat)","text":"Chat that sent the message originally View source","title":"#sender_chat="},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#type","text":"Type of the message origin, always \"chat\" View source","title":"#type"},{"location":"api_reference/Tourmaline/MessageOriginChat/#Tourmaline::MessageOriginChat#type=(type)","text":"Type of the message origin, always \"chat\" View source","title":"#type="},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/","text":"class Tourmaline::MessageOriginHiddenUser inherits Reference # The message was originally sent by an unknown user. Included modules JSON::Serializable Constructors # .new ( type , date , sender_user_name ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #date : Time # View source #date= ( date : Time ) # View source #sender_user_name : String # Name of the user that sent the message originally View source #sender_user_name= ( sender_user_name : String ) # Name of the user that sent the message originally View source #type : String # Type of the message origin, always \"hidden_user\" View source #type= ( type : String ) # Type of the message origin, always \"hidden_user\" View source","title":"MessageOriginHiddenUser"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser","text":"The message was originally sent by an unknown user.","title":"MessageOriginHiddenUser"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser.new(type,date,sender_user_name)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser#sender_user_name","text":"Name of the user that sent the message originally View source","title":"#sender_user_name"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser#sender_user_name=(sender_user_name)","text":"Name of the user that sent the message originally View source","title":"#sender_user_name="},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser#type","text":"Type of the message origin, always \"hidden_user\" View source","title":"#type"},{"location":"api_reference/Tourmaline/MessageOriginHiddenUser/#Tourmaline::MessageOriginHiddenUser#type=(type)","text":"Type of the message origin, always \"hidden_user\" View source","title":"#type="},{"location":"api_reference/Tourmaline/MessageOriginUser/","text":"class Tourmaline::MessageOriginUser inherits Reference # The message was originally sent by a known user. Included modules JSON::Serializable Constructors # .new ( type , date , sender_user ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #date : Time # View source #date= ( date : Time ) # View source #sender_user : Tourmaline::User # User that sent the message originally View source #sender_user= ( sender_user : Tourmaline::User ) # User that sent the message originally View source #type : String # Type of the message origin, always \"user\" View source #type= ( type : String ) # Type of the message origin, always \"user\" View source","title":"MessageOriginUser"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser","text":"The message was originally sent by a known user.","title":"MessageOriginUser"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser.new(type,date,sender_user)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser#sender_user","text":"User that sent the message originally View source","title":"#sender_user"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser#sender_user=(sender_user)","text":"User that sent the message originally View source","title":"#sender_user="},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser#type","text":"Type of the message origin, always \"user\" View source","title":"#type"},{"location":"api_reference/Tourmaline/MessageOriginUser/#Tourmaline::MessageOriginUser#type=(type)","text":"Type of the message origin, always \"user\" View source","title":"#type="},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/","text":"class Tourmaline::MessageReactionCountUpdated inherits Reference # This object represents reaction changes on a message with anonymous reactions. Included modules JSON::Serializable Constructors # .new ( chat , message_id , date , reactions : Array ( Tourmaline::ReactionCount ) = [] of Tourmaline :: ReactionCount ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat : Tourmaline::Chat # The chat containing the message View source #chat= ( chat : Tourmaline::Chat ) # The chat containing the message View source #date : Time # View source #date= ( date : Time ) # View source #message_id : Int32 | Int64 # Unique message identifier inside the chat View source #message_id= ( message_id : Int32 | Int64 ) # Unique message identifier inside the chat View source #reactions : Array ( Tourmaline::ReactionCount ) # List of reactions that are present on the message View source #reactions= ( reactions : Array ( Tourmaline::ReactionCount )) # List of reactions that are present on the message View source","title":"MessageReactionCountUpdated"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated","text":"This object represents reaction changes on a message with anonymous reactions.","title":"MessageReactionCountUpdated"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated.new(chat,message_id,date,reactions)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#chat","text":"The chat containing the message View source","title":"#chat"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#chat=(chat)","text":"The chat containing the message View source","title":"#chat="},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#message_id","text":"Unique message identifier inside the chat View source","title":"#message_id"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#message_id=(message_id)","text":"Unique message identifier inside the chat View source","title":"#message_id="},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#reactions","text":"List of reactions that are present on the message View source","title":"#reactions"},{"location":"api_reference/Tourmaline/MessageReactionCountUpdated/#Tourmaline::MessageReactionCountUpdated#reactions=(reactions)","text":"List of reactions that are present on the message View source","title":"#reactions="},{"location":"api_reference/Tourmaline/MessageReactionUpdated/","text":"class Tourmaline::MessageReactionUpdated inherits Reference # This object represents a change of a reaction on a message performed by a user. Included modules JSON::Serializable Constructors # .new ( chat , message_id , date , old_reaction : Array ( Tourmaline::ReactionType ) = [] of Tourmaline :: ReactionType , new_reaction : Array ( Tourmaline::ReactionType ) = [] of Tourmaline :: ReactionType , user : Tourmaline::User? = nil , actor_chat : Tourmaline::Chat? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #actor_chat : Tourmaline::Chat? # Optional. The chat on behalf of which the reaction was changed, if the user is anonymous View source #actor_chat= ( actor_chat : Tourmaline::Chat? ) # Optional. The chat on behalf of which the reaction was changed, if the user is anonymous View source #chat : Tourmaline::Chat # The chat containing the message the user reacted to View source #chat= ( chat : Tourmaline::Chat ) # The chat containing the message the user reacted to View source #date : Time # View source #date= ( date : Time ) # View source #message_id : Int32 | Int64 # Unique identifier of the message inside the chat View source #message_id= ( message_id : Int32 | Int64 ) # Unique identifier of the message inside the chat View source #new_reaction : Array ( Tourmaline::ReactionType ) # New list of reaction types that have been set by the user View source #new_reaction= ( new_reaction : Array ( Tourmaline::ReactionType )) # New list of reaction types that have been set by the user View source #old_reaction : Array ( Tourmaline::ReactionType ) # Previous list of reaction types that were set by the user View source #old_reaction= ( old_reaction : Array ( Tourmaline::ReactionType )) # Previous list of reaction types that were set by the user View source #user : Tourmaline::User? # Optional. The user that changed the reaction, if the user isn't anonymous View source #user= ( user : Tourmaline::User? ) # Optional. The user that changed the reaction, if the user isn't anonymous View source","title":"MessageReactionUpdated"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated","text":"This object represents a change of a reaction on a message performed by a user.","title":"MessageReactionUpdated"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated.new(chat,message_id,date,old_reaction,new_reaction,user,actor_chat)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#actor_chat","text":"Optional. The chat on behalf of which the reaction was changed, if the user is anonymous View source","title":"#actor_chat"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#actor_chat=(actor_chat)","text":"Optional. The chat on behalf of which the reaction was changed, if the user is anonymous View source","title":"#actor_chat="},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#chat","text":"The chat containing the message the user reacted to View source","title":"#chat"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#chat=(chat)","text":"The chat containing the message the user reacted to View source","title":"#chat="},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#date","text":"View source","title":"#date"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#date=(date)","text":"View source","title":"#date="},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#message_id","text":"Unique identifier of the message inside the chat View source","title":"#message_id"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#message_id=(message_id)","text":"Unique identifier of the message inside the chat View source","title":"#message_id="},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#new_reaction","text":"New list of reaction types that have been set by the user View source","title":"#new_reaction"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#new_reaction=(new_reaction)","text":"New list of reaction types that have been set by the user View source","title":"#new_reaction="},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#old_reaction","text":"Previous list of reaction types that were set by the user View source","title":"#old_reaction"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#old_reaction=(old_reaction)","text":"Previous list of reaction types that were set by the user View source","title":"#old_reaction="},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#user","text":"Optional. The user that changed the reaction, if the user isn't anonymous View source","title":"#user"},{"location":"api_reference/Tourmaline/MessageReactionUpdated/#Tourmaline::MessageReactionUpdated#user=(user)","text":"Optional. The user that changed the reaction, if the user isn't anonymous View source","title":"#user="},{"location":"api_reference/Tourmaline/Middleware/","text":"abstract class Tourmaline::Middleware inherits Reference # Methods # abstract #call ( context : Context ) # View source #call_internal ( context : Context ) # View source #next # View source #stop # View source","title":"Middleware"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware","text":"","title":"Middleware"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#call(context)","text":"View source","title":"#call"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#call_internal(context)","text":"View source","title":"#call_internal"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#next","text":"View source","title":"#next"},{"location":"api_reference/Tourmaline/Middleware/#Tourmaline::Middleware#stop","text":"View source","title":"#stop"},{"location":"api_reference/Tourmaline/Middleware/Stop/","text":"class Tourmaline::Middleware::Stop inherits Exception #","title":"Stop"},{"location":"api_reference/Tourmaline/Middleware/Stop/#Tourmaline::Middleware::Stop","text":"","title":"Stop"},{"location":"api_reference/Tourmaline/OrderInfo/","text":"class Tourmaline::OrderInfo inherits Reference # This object represents information about an order. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( name : String? = nil , phone_number : String? = nil , email : String? = nil , shipping_address : Tourmaline::ShippingAddress? = nil ) # View source Methods # #email : String? # Optional. User email View source #email= ( email : String? ) # Optional. User email View source #name : String? # Optional. User name View source #name= ( name : String? ) # Optional. User name View source #phone_number : String? # Optional. User's phone number View source #phone_number= ( phone_number : String? ) # Optional. User's phone number View source #shipping_address : Tourmaline::ShippingAddress? # Optional. User shipping address View source #shipping_address= ( shipping_address : Tourmaline::ShippingAddress? ) # Optional. User shipping address View source","title":"OrderInfo"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo","text":"This object represents information about an order.","title":"OrderInfo"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#email","text":"Optional. User email View source","title":"#email"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#email=(email)","text":"Optional. User email View source","title":"#email="},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#name","text":"Optional. User name View source","title":"#name"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#name=(name)","text":"Optional. User name View source","title":"#name="},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#phone_number","text":"Optional. User's phone number View source","title":"#phone_number"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#phone_number=(phone_number)","text":"Optional. User's phone number View source","title":"#phone_number="},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#shipping_address","text":"Optional. User shipping address View source","title":"#shipping_address"},{"location":"api_reference/Tourmaline/OrderInfo/#Tourmaline::OrderInfo#shipping_address=(shipping_address)","text":"Optional. User shipping address View source","title":"#shipping_address="},{"location":"api_reference/Tourmaline/ParseMode/","text":"enum Tourmaline::ParseMode # Parse mode for messages. Members # None = 0 # Markdown = 1 # MarkdownV2 = 2 # HTML = 3 # Constructors # .new ( pull : JSON :: PullParser ) # View source Methods # #html? # View source #markdown? # View source #markdown_v2? # View source #none? # View source #to_json ( json : JSON :: Builder ) # Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"ParseMode"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode","text":"Parse mode for messages.","title":"ParseMode"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::None","text":"","title":"None"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::Markdown","text":"","title":"Markdown"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::MarkdownV2","text":"","title":"MarkdownV2"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode::HTML","text":"","title":"HTML"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#html?","text":"View source","title":"#html?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#markdown?","text":"View source","title":"#markdown?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#markdown_v2?","text":"View source","title":"#markdown_v2?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#none?","text":"View source","title":"#none?"},{"location":"api_reference/Tourmaline/ParseMode/#Tourmaline::ParseMode#to_json(json)","text":"Serializes this enum member by name. For non-flags enums, the serialization is a JSON string. The value is the member name (see #to_s ) transformed with String#underscore . enum Stages INITIAL SECOND_STAGE end Stages :: INITIAL . to_json # => %(\"initial\") Stages :: SECOND_STAGE . to_json # => %(\"second_stage\") For flags enums, the serialization is a JSON array including every flagged member individually serialized in the same way as a member of a non-flags enum. None is serialized as an empty array, All as an array containing all members. @[ Flags ] enum Sides LEFT RIGHT end Sides :: LEFT . to_json # => %([\"left\"]) ( Sides :: LEFT | Sides :: RIGHT ) . to_json # => %([\"left\",\"right\"]) Sides :: All . to_json # => %([\"left\",\"right\"]) Sides :: None . to_json # => %([]) ValueConverter.to_json offers a different serialization strategy based on the member value. View source","title":"#to_json"},{"location":"api_reference/Tourmaline/PassportData/","text":"class Tourmaline::PassportData inherits Reference # Describes Telegram Passport data shared with the bot by the user. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( credentials , data : Array ( Tourmaline::EncryptedPassportElement ) = [] of Tourmaline :: EncryptedPassportElement ) # View source Methods # #credentials : Tourmaline::EncryptedCredentials # Encrypted credentials required to decrypt the data View source #credentials= ( credentials : Tourmaline::EncryptedCredentials ) # Encrypted credentials required to decrypt the data View source #data : Array ( Tourmaline::EncryptedPassportElement ) # Array with information about documents and other Telegram Passport elements that was shared with the bot View source #data= ( data : Array ( Tourmaline::EncryptedPassportElement )) # Array with information about documents and other Telegram Passport elements that was shared with the bot View source","title":"PassportData"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData","text":"Describes Telegram Passport data shared with the bot by the user.","title":"PassportData"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#credentials","text":"Encrypted credentials required to decrypt the data View source","title":"#credentials"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#credentials=(credentials)","text":"Encrypted credentials required to decrypt the data View source","title":"#credentials="},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#data","text":"Array with information about documents and other Telegram Passport elements that was shared with the bot View source","title":"#data"},{"location":"api_reference/Tourmaline/PassportData/#Tourmaline::PassportData#data=(data)","text":"Array with information about documents and other Telegram Passport elements that was shared with the bot View source","title":"#data="},{"location":"api_reference/Tourmaline/PassportElementError/","text":"alias Tourmaline::PassportElementError # This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of: - PassportElementErrorDataField - PassportElementErrorFrontSide - PassportElementErrorReverseSide - PassportElementErrorSelfie - PassportElementErrorFile - PassportElementErrorFiles - PassportElementErrorTranslationFile - PassportElementErrorTranslationFiles - PassportElementErrorUnspecified Alias definition Tourmaline::PassportElementErrorDataField | Tourmaline::PassportElementErrorFile | Tourmaline::PassportElementErrorFiles | Tourmaline::PassportElementErrorFrontSide | Tourmaline::PassportElementErrorReverseSide | Tourmaline::PassportElementErrorSelfie | Tourmaline::PassportElementErrorTranslationFile | Tourmaline::PassportElementErrorTranslationFiles | Tourmaline::PassportElementErrorUnspecified","title":"PassportElementError"},{"location":"api_reference/Tourmaline/PassportElementError/#Tourmaline::PassportElementError","text":"This object represents an error in the Telegram Passport element which was submitted that should be resolved by the user. It should be one of: - PassportElementErrorDataField - PassportElementErrorFrontSide - PassportElementErrorReverseSide - PassportElementErrorSelfie - PassportElementErrorFile - PassportElementErrorFiles - PassportElementErrorTranslationFile - PassportElementErrorTranslationFiles - PassportElementErrorUnspecified","title":"PassportElementError"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/","text":"class Tourmaline::PassportElementErrorDataField inherits Reference # Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes. Included modules JSON::Serializable Constructors # .new ( source , type , field_name , data_hash , message ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #data_hash : String # Base64-encoded data hash View source #data_hash= ( data_hash : String ) # Base64-encoded data hash View source #field_name : String # Name of the data field which has the error View source #field_name= ( field_name : String ) # Name of the data field which has the error View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be data View source #source= ( source : String ) # Error source, must be data View source #type : String # The section of the user's Telegram Passport which has the error, one of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\" View source #type= ( type : String ) # The section of the user's Telegram Passport which has the error, one of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\" View source","title":"PassportElementErrorDataField"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField","text":"Represents an issue in one of the data fields that was provided by the user. The error is considered resolved when the field's value changes.","title":"PassportElementErrorDataField"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField.new(source,type,field_name,data_hash,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#data_hash","text":"Base64-encoded data hash View source","title":"#data_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#data_hash=(data_hash)","text":"Base64-encoded data hash View source","title":"#data_hash="},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#field_name","text":"Name of the data field which has the error View source","title":"#field_name"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#field_name=(field_name)","text":"Name of the data field which has the error View source","title":"#field_name="},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#source","text":"Error source, must be data View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#source=(source)","text":"Error source, must be data View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#type","text":"The section of the user's Telegram Passport which has the error, one of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorDataField/#Tourmaline::PassportElementErrorDataField#type=(type)","text":"The section of the user's Telegram Passport which has the error, one of \"personal_details\", \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"address\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorFile/","text":"class Tourmaline::PassportElementErrorFile inherits Reference # Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes. Included modules JSON::Serializable Constructors # .new ( source , type , file_hash , message ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # Base64-encoded file hash View source #file_hash= ( file_hash : String ) # Base64-encoded file hash View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be file View source #source= ( source : String ) # Error source, must be file View source #type : String # The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source #type= ( type : String ) # The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"PassportElementErrorFile"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile","text":"Represents an issue with a document scan. The error is considered resolved when the file with the document scan changes.","title":"PassportElementErrorFile"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile.new(source,type,file_hash,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#file_hash","text":"Base64-encoded file hash View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#file_hash=(file_hash)","text":"Base64-encoded file hash View source","title":"#file_hash="},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#source","text":"Error source, must be file View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#source=(source)","text":"Error source, must be file View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#type","text":"The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorFile/#Tourmaline::PassportElementErrorFile#type=(type)","text":"The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/","text":"class Tourmaline::PassportElementErrorFiles inherits Reference # Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes. Included modules JSON::Serializable Constructors # .new ( source , type , message , file_hashes : Array ( String ) = [] of String ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_hashes : Array ( String ) # List of base64-encoded file hashes View source #file_hashes= ( file_hashes : Array ( String )) # List of base64-encoded file hashes View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be files View source #source= ( source : String ) # Error source, must be files View source #type : String # The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source #type= ( type : String ) # The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"PassportElementErrorFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles","text":"Represents an issue with a list of scans. The error is considered resolved when the list of files containing the scans changes.","title":"PassportElementErrorFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles.new(source,type,message,file_hashes)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#file_hashes","text":"List of base64-encoded file hashes View source","title":"#file_hashes"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#file_hashes=(file_hashes)","text":"List of base64-encoded file hashes View source","title":"#file_hashes="},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#source","text":"Error source, must be files View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#source=(source)","text":"Error source, must be files View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#type","text":"The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorFiles/#Tourmaline::PassportElementErrorFiles#type=(type)","text":"The section of the user's Telegram Passport which has the issue, one of \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/","text":"class Tourmaline::PassportElementErrorFrontSide inherits Reference # Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes. Included modules JSON::Serializable Constructors # .new ( source , type , file_hash , message ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # Base64-encoded hash of the file with the front side of the document View source #file_hash= ( file_hash : String ) # Base64-encoded hash of the file with the front side of the document View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be front_side View source #source= ( source : String ) # Error source, must be front_side View source #type : String # The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source #type= ( type : String ) # The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source","title":"PassportElementErrorFrontSide"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide","text":"Represents an issue with the front side of a document. The error is considered resolved when the file with the front side of the document changes.","title":"PassportElementErrorFrontSide"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide.new(source,type,file_hash,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#file_hash","text":"Base64-encoded hash of the file with the front side of the document View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#file_hash=(file_hash)","text":"Base64-encoded hash of the file with the front side of the document View source","title":"#file_hash="},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#source","text":"Error source, must be front_side View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#source=(source)","text":"Error source, must be front_side View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#type","text":"The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorFrontSide/#Tourmaline::PassportElementErrorFrontSide#type=(type)","text":"The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/","text":"class Tourmaline::PassportElementErrorReverseSide inherits Reference # Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes. Included modules JSON::Serializable Constructors # .new ( source , type , file_hash , message ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # Base64-encoded hash of the file with the reverse side of the document View source #file_hash= ( file_hash : String ) # Base64-encoded hash of the file with the reverse side of the document View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be reverse_side View source #source= ( source : String ) # Error source, must be reverse_side View source #type : String # The section of the user's Telegram Passport which has the issue, one of \"driver_license\", \"identity_card\" View source #type= ( type : String ) # The section of the user's Telegram Passport which has the issue, one of \"driver_license\", \"identity_card\" View source","title":"PassportElementErrorReverseSide"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide","text":"Represents an issue with the reverse side of a document. The error is considered resolved when the file with reverse side of the document changes.","title":"PassportElementErrorReverseSide"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide.new(source,type,file_hash,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#file_hash","text":"Base64-encoded hash of the file with the reverse side of the document View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#file_hash=(file_hash)","text":"Base64-encoded hash of the file with the reverse side of the document View source","title":"#file_hash="},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#source","text":"Error source, must be reverse_side View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#source=(source)","text":"Error source, must be reverse_side View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#type","text":"The section of the user's Telegram Passport which has the issue, one of \"driver_license\", \"identity_card\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorReverseSide/#Tourmaline::PassportElementErrorReverseSide#type=(type)","text":"The section of the user's Telegram Passport which has the issue, one of \"driver_license\", \"identity_card\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/","text":"class Tourmaline::PassportElementErrorSelfie inherits Reference # Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes. Included modules JSON::Serializable Constructors # .new ( source , type , file_hash , message ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # Base64-encoded hash of the file with the selfie View source #file_hash= ( file_hash : String ) # Base64-encoded hash of the file with the selfie View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be selfie View source #source= ( source : String ) # Error source, must be selfie View source #type : String # The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source #type= ( type : String ) # The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source","title":"PassportElementErrorSelfie"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie","text":"Represents an issue with the selfie with a document. The error is considered resolved when the file with the selfie changes.","title":"PassportElementErrorSelfie"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie.new(source,type,file_hash,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#file_hash","text":"Base64-encoded hash of the file with the selfie View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#file_hash=(file_hash)","text":"Base64-encoded hash of the file with the selfie View source","title":"#file_hash="},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#source","text":"Error source, must be selfie View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#source=(source)","text":"Error source, must be selfie View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#type","text":"The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorSelfie/#Tourmaline::PassportElementErrorSelfie#type=(type)","text":"The section of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/","text":"class Tourmaline::PassportElementErrorTranslationFile inherits Reference # Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes. Included modules JSON::Serializable Constructors # .new ( source , type , file_hash , message ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_hash : String # Base64-encoded file hash View source #file_hash= ( file_hash : String ) # Base64-encoded file hash View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be translation_file View source #source= ( source : String ) # Error source, must be translation_file View source #type : String # Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source #type= ( type : String ) # Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"PassportElementErrorTranslationFile"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile","text":"Represents an issue with one of the files that constitute the translation of a document. The error is considered resolved when the file changes.","title":"PassportElementErrorTranslationFile"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile.new(source,type,file_hash,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#file_hash","text":"Base64-encoded file hash View source","title":"#file_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#file_hash=(file_hash)","text":"Base64-encoded file hash View source","title":"#file_hash="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#source","text":"Error source, must be translation_file View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#source=(source)","text":"Error source, must be translation_file View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#type","text":"Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFile/#Tourmaline::PassportElementErrorTranslationFile#type=(type)","text":"Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/","text":"class Tourmaline::PassportElementErrorTranslationFiles inherits Reference # Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change. Included modules JSON::Serializable Constructors # .new ( source , type , message , file_hashes : Array ( String ) = [] of String ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_hashes : Array ( String ) # List of base64-encoded file hashes View source #file_hashes= ( file_hashes : Array ( String )) # List of base64-encoded file hashes View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be translation_files View source #source= ( source : String ) # Error source, must be translation_files View source #type : String # Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source #type= ( type : String ) # Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"PassportElementErrorTranslationFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles","text":"Represents an issue with the translated version of a document. The error is considered resolved when a file with the document translation change.","title":"PassportElementErrorTranslationFiles"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles.new(source,type,message,file_hashes)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#file_hashes","text":"List of base64-encoded file hashes View source","title":"#file_hashes"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#file_hashes=(file_hashes)","text":"List of base64-encoded file hashes View source","title":"#file_hashes="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#source","text":"Error source, must be translation_files View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#source=(source)","text":"Error source, must be translation_files View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#type","text":"Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorTranslationFiles/#Tourmaline::PassportElementErrorTranslationFiles#type=(type)","text":"Type of element of the user's Telegram Passport which has the issue, one of \"passport\", \"driver_license\", \"identity_card\", \"internal_passport\", \"utility_bill\", \"bank_statement\", \"rental_agreement\", \"passport_registration\", \"temporary_registration\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/","text":"class Tourmaline::PassportElementErrorUnspecified inherits Reference # Represents an issue in an unspecified place. The error is considered resolved when new data is added. Included modules JSON::Serializable Constructors # .new ( source , type , element_hash , message ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #element_hash : String # Base64-encoded element hash View source #element_hash= ( element_hash : String ) # Base64-encoded element hash View source #message : String # Error message View source #message= ( message : String ) # Error message View source #source : String # Error source, must be unspecified View source #source= ( source : String ) # Error source, must be unspecified View source #type : String # Type of element of the user's Telegram Passport which has the issue View source #type= ( type : String ) # Type of element of the user's Telegram Passport which has the issue View source","title":"PassportElementErrorUnspecified"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified","text":"Represents an issue in an unspecified place. The error is considered resolved when new data is added.","title":"PassportElementErrorUnspecified"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified.new(source,type,element_hash,message)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#element_hash","text":"Base64-encoded element hash View source","title":"#element_hash"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#element_hash=(element_hash)","text":"Base64-encoded element hash View source","title":"#element_hash="},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#message","text":"Error message View source","title":"#message"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#message=(message)","text":"Error message View source","title":"#message="},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#source","text":"Error source, must be unspecified View source","title":"#source"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#source=(source)","text":"Error source, must be unspecified View source","title":"#source="},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#type","text":"Type of element of the user's Telegram Passport which has the issue View source","title":"#type"},{"location":"api_reference/Tourmaline/PassportElementErrorUnspecified/#Tourmaline::PassportElementErrorUnspecified#type=(type)","text":"Type of element of the user's Telegram Passport which has the issue View source","title":"#type="},{"location":"api_reference/Tourmaline/PassportFile/","text":"class Tourmaline::PassportFile inherits Reference # This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB. Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , file_size , file_date ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_date : Time # View source #file_date= ( file_date : Time ) # View source #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_size : Int32 | Int64 # File size in bytes View source #file_size= ( file_size : Int32 | Int64 ) # File size in bytes View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"PassportFile"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile","text":"This object represents a file uploaded to Telegram Passport. Currently all Telegram Passport files are in JPEG format when decrypted and don't exceed 10MB.","title":"PassportFile"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile.new(file_id,file_unique_id,file_size,file_date)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_date","text":"View source","title":"#file_date"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_date=(file_date)","text":"View source","title":"#file_date="},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_size","text":"File size in bytes View source","title":"#file_size"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_size=(file_size)","text":"File size in bytes View source","title":"#file_size="},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/PassportFile/#Tourmaline::PassportFile#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/PhotoSize/","text":"class Tourmaline::PhotoSize inherits Reference # This object represents one size of a photo or a file / sticker thumbnail. Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , width , height , file_size : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #height : Int32 | Int64 # Photo height View source #height= ( height : Int32 | Int64 ) # Photo height View source #width : Int32 | Int64 # Photo width View source #width= ( width : Int32 | Int64 ) # Photo width View source","title":"PhotoSize"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize","text":"This object represents one size of a photo or a file / sticker thumbnail.","title":"PhotoSize"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize.new(file_id,file_unique_id,width,height,file_size)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_size","text":"Optional. File size in bytes View source","title":"#file_size"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_size=(file_size)","text":"Optional. File size in bytes View source","title":"#file_size="},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#height","text":"Photo height View source","title":"#height"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#height=(height)","text":"Photo height View source","title":"#height="},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#width","text":"Photo width View source","title":"#width"},{"location":"api_reference/Tourmaline/PhotoSize/#Tourmaline::PhotoSize#width=(width)","text":"Photo width View source","title":"#width="},{"location":"api_reference/Tourmaline/Poll/","text":"class Tourmaline::Poll inherits Reference # This object contains information about a poll. Included modules JSON::Serializable Constructors # .new ( id , question , total_voter_count , is_closed , is_anonymous , type , allows_multiple_answers , options : Array ( Tourmaline::PollOption ) = [] of Tourmaline :: PollOption , question_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , correct_option_id : Int32 | Int64 | Nil = nil , explanation : String? = nil , explanation_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , open_period : Int32 | Int64 | Nil = nil , close_date : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #allows_multiple_answers= ( allows_multiple_answers : Bool ) # True, if the poll allows multiple answers View source #allows_multiple_answers? : Bool # True, if the poll allows multiple answers View source #close_date : Time? # View source #close_date= ( close_date : Time? ) # View source #correct_option_id : Int32 | Int64 | Nil # Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot. View source #correct_option_id= ( correct_option_id : Int32 | Int64 | Nil ) # Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot. View source #explanation : String? # Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters View source #explanation= ( explanation : String? ) # Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters View source #explanation_entities : Array ( Tourmaline::MessageEntity ) # Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation View source #explanation_entities= ( explanation_entities : Array ( Tourmaline::MessageEntity )) # Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation View source #id : String # Unique poll identifier View source #id= ( id : String ) # Unique poll identifier View source #is_anonymous= ( is_anonymous : Bool ) # True, if the poll is anonymous View source #is_anonymous? : Bool # True, if the poll is anonymous View source #is_closed= ( is_closed : Bool ) # True, if the poll is closed View source #is_closed? : Bool # True, if the poll is closed View source #open_period : Int32 | Int64 | Nil # Optional. Amount of time in seconds the poll will be active after creation View source #open_period= ( open_period : Int32 | Int64 | Nil ) # Optional. Amount of time in seconds the poll will be active after creation View source #options : Array ( Tourmaline::PollOption ) # List of poll options View source #options= ( options : Array ( Tourmaline::PollOption )) # List of poll options View source #question : String # Poll question, 1-300 characters View source #question= ( question : String ) # Poll question, 1-300 characters View source #question_entities : Array ( Tourmaline::MessageEntity ) # Optional. Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions View source #question_entities= ( question_entities : Array ( Tourmaline::MessageEntity )) # Optional. Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions View source #total_voter_count : Int32 | Int64 # Total number of users that voted in the poll View source #total_voter_count= ( total_voter_count : Int32 | Int64 ) # Total number of users that voted in the poll View source #type : String # Poll type, currently can be \"regular\" or \"quiz\" View source #type= ( type : String ) # Poll type, currently can be \"regular\" or \"quiz\" View source","title":"Poll"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll","text":"This object contains information about a poll.","title":"Poll"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll.new(id,question,total_voter_count,is_closed,is_anonymous,type,allows_multiple_answers,options,question_entities,correct_option_id,explanation,explanation_entities,open_period,close_date)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#allows_multiple_answers=(allows_multiple_answers)","text":"True, if the poll allows multiple answers View source","title":"#allows_multiple_answers="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#allows_multiple_answers?","text":"True, if the poll allows multiple answers View source","title":"#allows_multiple_answers?"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#close_date","text":"View source","title":"#close_date"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#close_date=(close_date)","text":"View source","title":"#close_date="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#correct_option_id","text":"Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot. View source","title":"#correct_option_id"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#correct_option_id=(correct_option_id)","text":"Optional. 0-based identifier of the correct answer option. Available only for polls in the quiz mode, which are closed, or was sent (not forwarded) by the bot or to the private chat with the bot. View source","title":"#correct_option_id="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#explanation","text":"Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters View source","title":"#explanation"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#explanation=(explanation)","text":"Optional. Text that is shown when a user chooses an incorrect answer or taps on the lamp icon in a quiz-style poll, 0-200 characters View source","title":"#explanation="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#explanation_entities","text":"Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation View source","title":"#explanation_entities"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#explanation_entities=(explanation_entities)","text":"Optional. Special entities like usernames, URLs, bot commands, etc. that appear in the explanation View source","title":"#explanation_entities="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#id","text":"Unique poll identifier View source","title":"#id"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#id=(id)","text":"Unique poll identifier View source","title":"#id="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#is_anonymous=(is_anonymous)","text":"True, if the poll is anonymous View source","title":"#is_anonymous="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#is_anonymous?","text":"True, if the poll is anonymous View source","title":"#is_anonymous?"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#is_closed=(is_closed)","text":"True, if the poll is closed View source","title":"#is_closed="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#is_closed?","text":"True, if the poll is closed View source","title":"#is_closed?"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#open_period","text":"Optional. Amount of time in seconds the poll will be active after creation View source","title":"#open_period"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#open_period=(open_period)","text":"Optional. Amount of time in seconds the poll will be active after creation View source","title":"#open_period="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#options","text":"List of poll options View source","title":"#options"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#options=(options)","text":"List of poll options View source","title":"#options="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#question","text":"Poll question, 1-300 characters View source","title":"#question"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#question=(question)","text":"Poll question, 1-300 characters View source","title":"#question="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#question_entities","text":"Optional. Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions View source","title":"#question_entities"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#question_entities=(question_entities)","text":"Optional. Special entities that appear in the question. Currently, only custom emoji entities are allowed in poll questions View source","title":"#question_entities="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#total_voter_count","text":"Total number of users that voted in the poll View source","title":"#total_voter_count"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#total_voter_count=(total_voter_count)","text":"Total number of users that voted in the poll View source","title":"#total_voter_count="},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#type","text":"Poll type, currently can be \"regular\" or \"quiz\" View source","title":"#type"},{"location":"api_reference/Tourmaline/Poll/#Tourmaline::Poll#type=(type)","text":"Poll type, currently can be \"regular\" or \"quiz\" View source","title":"#type="},{"location":"api_reference/Tourmaline/PollAnswer/","text":"class Tourmaline::PollAnswer inherits Reference # This object represents an answer of a user in a non-anonymous poll. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( poll_id , option_ids : Array ( Int32 | Int64 ) = [] of Int32 | Int64 , voter_chat : Tourmaline::Chat? = nil , user : Tourmaline::User? = nil ) # View source Methods # #option_ids : Array ( Int32 | Int64 ) # 0-based identifiers of chosen answer options. May be empty if the vote was retracted. View source #option_ids= ( option_ids : Array ( Int32 | Int64 )) # 0-based identifiers of chosen answer options. May be empty if the vote was retracted. View source #poll_id : String # Unique poll identifier View source #poll_id= ( poll_id : String ) # Unique poll identifier View source #user : Tourmaline::User? # Optional. The user that changed the answer to the poll, if the voter isn't anonymous View source #user= ( user : Tourmaline::User? ) # Optional. The user that changed the answer to the poll, if the voter isn't anonymous View source #voter_chat : Tourmaline::Chat? # Optional. The chat that changed the answer to the poll, if the voter is anonymous View source #voter_chat= ( voter_chat : Tourmaline::Chat? ) # Optional. The chat that changed the answer to the poll, if the voter is anonymous View source","title":"PollAnswer"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer","text":"This object represents an answer of a user in a non-anonymous poll.","title":"PollAnswer"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#option_ids","text":"0-based identifiers of chosen answer options. May be empty if the vote was retracted. View source","title":"#option_ids"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#option_ids=(option_ids)","text":"0-based identifiers of chosen answer options. May be empty if the vote was retracted. View source","title":"#option_ids="},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#poll_id","text":"Unique poll identifier View source","title":"#poll_id"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#poll_id=(poll_id)","text":"Unique poll identifier View source","title":"#poll_id="},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#user","text":"Optional. The user that changed the answer to the poll, if the voter isn't anonymous View source","title":"#user"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#user=(user)","text":"Optional. The user that changed the answer to the poll, if the voter isn't anonymous View source","title":"#user="},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#voter_chat","text":"Optional. The chat that changed the answer to the poll, if the voter is anonymous View source","title":"#voter_chat"},{"location":"api_reference/Tourmaline/PollAnswer/#Tourmaline::PollAnswer#voter_chat=(voter_chat)","text":"Optional. The chat that changed the answer to the poll, if the voter is anonymous View source","title":"#voter_chat="},{"location":"api_reference/Tourmaline/PollOption/","text":"class Tourmaline::PollOption inherits Reference # This object contains information about one answer option in a poll. Included modules JSON::Serializable Constructors # .new ( text , voter_count , text_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #text : String # Option text, 1-100 characters View source #text= ( text : String ) # Option text, 1-100 characters View source #text_entities : Array ( Tourmaline::MessageEntity ) # Optional. Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts View source #text_entities= ( text_entities : Array ( Tourmaline::MessageEntity )) # Optional. Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts View source #voter_count : Int32 | Int64 # Number of users that voted for this option View source #voter_count= ( voter_count : Int32 | Int64 ) # Number of users that voted for this option View source","title":"PollOption"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption","text":"This object contains information about one answer option in a poll.","title":"PollOption"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption.new(text,voter_count,text_entities)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#text","text":"Option text, 1-100 characters View source","title":"#text"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#text=(text)","text":"Option text, 1-100 characters View source","title":"#text="},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#text_entities","text":"Optional. Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts View source","title":"#text_entities"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#text_entities=(text_entities)","text":"Optional. Special entities that appear in the option text. Currently, only custom emoji entities are allowed in poll option texts View source","title":"#text_entities="},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#voter_count","text":"Number of users that voted for this option View source","title":"#voter_count"},{"location":"api_reference/Tourmaline/PollOption/#Tourmaline::PollOption#voter_count=(voter_count)","text":"Number of users that voted for this option View source","title":"#voter_count="},{"location":"api_reference/Tourmaline/Poller/","text":"class Tourmaline::Poller inherits Reference # The Poller class is responsible for polling Telegram's API for updates, and then passing them to the Dispatcher for processing. Constants # Log = :: Log . for ( self ) # Constructors # .new ( client : Tourmaline::Client ) # View source Methods # #get_updates # View source #offset : Int64 # View source #poll_and_dispatch # View source #start # Starts polling Telegram's API for updates. View source #stop # View source","title":"Poller"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller","text":"The Poller class is responsible for polling Telegram's API for updates, and then passing them to the Dispatcher for processing.","title":"Poller"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller-constants","text":"","title":"Constants"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller::Log","text":"","title":"Log"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller.new(client)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#get_updates","text":"View source","title":"#get_updates"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#offset","text":"View source","title":"#offset"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#poll_and_dispatch","text":"View source","title":"#poll_and_dispatch"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#start","text":"Starts polling Telegram's API for updates. View source","title":"#start"},{"location":"api_reference/Tourmaline/Poller/#Tourmaline::Poller#stop","text":"View source","title":"#stop"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/","text":"class Tourmaline::PreCheckoutQuery inherits Reference # This object contains information about an incoming pre-checkout query. Included modules JSON::Serializable Constructors # .new ( id , from , currency , total_amount , invoice_payload , shipping_option_id : String? = nil , order_info : Tourmaline::OrderInfo? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # Three-letter ISO 4217 currency code View source #currency= ( currency : String ) # Three-letter ISO 4217 currency code View source #from : Tourmaline::User # User who sent the query View source #from= ( from : Tourmaline::User ) # User who sent the query View source #id : String # Unique query identifier View source #id= ( id : String ) # Unique query identifier View source #invoice_payload : String # Bot specified invoice payload View source #invoice_payload= ( invoice_payload : String ) # Bot specified invoice payload View source #order_info : Tourmaline::OrderInfo? # Optional. Order information provided by the user View source #order_info= ( order_info : Tourmaline::OrderInfo? ) # Optional. Order information provided by the user View source #shipping_option_id : String? # Optional. Identifier of the shipping option chosen by the user View source #shipping_option_id= ( shipping_option_id : String? ) # Optional. Identifier of the shipping option chosen by the user View source #total_amount : Int32 | Int64 # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source #total_amount= ( total_amount : Int32 | Int64 ) # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery","text":"This object contains information about an incoming pre-checkout query.","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery.new(id,from,currency,total_amount,invoice_payload,shipping_option_id,order_info)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#currency","text":"Three-letter ISO 4217 currency code View source","title":"#currency"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#currency=(currency)","text":"Three-letter ISO 4217 currency code View source","title":"#currency="},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#from","text":"User who sent the query View source","title":"#from"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#from=(from)","text":"User who sent the query View source","title":"#from="},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#id","text":"Unique query identifier View source","title":"#id"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#id=(id)","text":"Unique query identifier View source","title":"#id="},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#invoice_payload","text":"Bot specified invoice payload View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#invoice_payload=(invoice_payload)","text":"Bot specified invoice payload View source","title":"#invoice_payload="},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#order_info","text":"Optional. Order information provided by the user View source","title":"#order_info"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#order_info=(order_info)","text":"Optional. Order information provided by the user View source","title":"#order_info="},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#shipping_option_id","text":"Optional. Identifier of the shipping option chosen by the user View source","title":"#shipping_option_id"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#shipping_option_id=(shipping_option_id)","text":"Optional. Identifier of the shipping option chosen by the user View source","title":"#shipping_option_id="},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#total_amount","text":"Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/PreCheckoutQuery/#Tourmaline::PreCheckoutQuery#total_amount=(total_amount)","text":"Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#total_amount="},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/","text":"class Tourmaline::ProximityAlertTriggered inherits Reference # This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user. Included modules JSON::Serializable Constructors # .new ( traveler , watcher , distance ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #distance : Int32 | Int64 # The distance between the users View source #distance= ( distance : Int32 | Int64 ) # The distance between the users View source #traveler : Tourmaline::User # User that triggered the alert View source #traveler= ( traveler : Tourmaline::User ) # User that triggered the alert View source #watcher : Tourmaline::User # User that set the alert View source #watcher= ( watcher : Tourmaline::User ) # User that set the alert View source","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered","text":"This object represents the content of a service message, sent whenever a user in the chat triggers a proximity alert set by another user.","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered.new(traveler,watcher,distance)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#distance","text":"The distance between the users View source","title":"#distance"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#distance=(distance)","text":"The distance between the users View source","title":"#distance="},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#traveler","text":"User that triggered the alert View source","title":"#traveler"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#traveler=(traveler)","text":"User that triggered the alert View source","title":"#traveler="},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#watcher","text":"User that set the alert View source","title":"#watcher"},{"location":"api_reference/Tourmaline/ProximityAlertTriggered/#Tourmaline::ProximityAlertTriggered#watcher=(watcher)","text":"User that set the alert View source","title":"#watcher="},{"location":"api_reference/Tourmaline/ReactionCount/","text":"class Tourmaline::ReactionCount inherits Reference # Represents a reaction added to a message along with the number of times it was added. Included modules JSON::Serializable Constructors # .new ( type , total_count ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #total_count : Int32 | Int64 # Number of times the reaction was added View source #total_count= ( total_count : Int32 | Int64 ) # Number of times the reaction was added View source #type : Tourmaline::ReactionType # Type of the reaction View source #type= ( type : Tourmaline::ReactionType ) # Type of the reaction View source","title":"ReactionCount"},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount","text":"Represents a reaction added to a message along with the number of times it was added.","title":"ReactionCount"},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount.new(type,total_count)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount#total_count","text":"Number of times the reaction was added View source","title":"#total_count"},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount#total_count=(total_count)","text":"Number of times the reaction was added View source","title":"#total_count="},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount#type","text":"Type of the reaction View source","title":"#type"},{"location":"api_reference/Tourmaline/ReactionCount/#Tourmaline::ReactionCount#type=(type)","text":"Type of the reaction View source","title":"#type="},{"location":"api_reference/Tourmaline/ReactionType/","text":"alias Tourmaline::ReactionType # This object describes the type of a reaction. Currently, it can be one of - ReactionTypeEmoji - ReactionTypeCustomEmoji Alias definition Tourmaline::ReactionTypeCustomEmoji | Tourmaline::ReactionTypeEmoji","title":"ReactionType"},{"location":"api_reference/Tourmaline/ReactionType/#Tourmaline::ReactionType","text":"This object describes the type of a reaction. Currently, it can be one of - ReactionTypeEmoji - ReactionTypeCustomEmoji","title":"ReactionType"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/","text":"class Tourmaline::ReactionTypeCustomEmoji inherits Reference # The reaction is based on a custom emoji. Included modules JSON::Serializable Constructors # .new ( type , custom_emoji_id ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #custom_emoji_id : String # Custom emoji identifier View source #custom_emoji_id= ( custom_emoji_id : String ) # Custom emoji identifier View source #type : String # Type of the reaction, always \"custom_emoji\" View source #type= ( type : String ) # Type of the reaction, always \"custom_emoji\" View source","title":"ReactionTypeCustomEmoji"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji","text":"The reaction is based on a custom emoji.","title":"ReactionTypeCustomEmoji"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji.new(type,custom_emoji_id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji#custom_emoji_id","text":"Custom emoji identifier View source","title":"#custom_emoji_id"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji#custom_emoji_id=(custom_emoji_id)","text":"Custom emoji identifier View source","title":"#custom_emoji_id="},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji#type","text":"Type of the reaction, always \"custom_emoji\" View source","title":"#type"},{"location":"api_reference/Tourmaline/ReactionTypeCustomEmoji/#Tourmaline::ReactionTypeCustomEmoji#type=(type)","text":"Type of the reaction, always \"custom_emoji\" View source","title":"#type="},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/","text":"class Tourmaline::ReactionTypeEmoji inherits Reference # The reaction is based on an emoji. Included modules JSON::Serializable Constructors # .new ( type , emoji ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #emoji : String # Reaction emoji. Currently, it can be one of \"\ud83d\udc4d\", \"\ud83d\udc4e\", \"\u2764\", \"\ud83d\udd25\", \"\ud83e\udd70\", \"\ud83d\udc4f\", \"\ud83d\ude01\", \"\ud83e\udd14\", \"\ud83e\udd2f\", \"\ud83d\ude31\", \"\ud83e\udd2c\", \"\ud83d\ude22\", \"\ud83c\udf89\", \"\ud83e\udd29\", \"\ud83e\udd2e\", \"\ud83d\udca9\", \"\ud83d\ude4f\", \"\ud83d\udc4c\", \"\ud83d\udd4a\", \"\ud83e\udd21\", \"\ud83e\udd71\", \"\ud83e\udd74\", \"\ud83d\ude0d\", \"\ud83d\udc33\", \"\u2764\u200d\ud83d\udd25\", \"\ud83c\udf1a\", \"\ud83c\udf2d\", \"\ud83d\udcaf\", \"\ud83e\udd23\", \"\u26a1\", \"\ud83c\udf4c\", \"\ud83c\udfc6\", \"\ud83d\udc94\", \"\ud83e\udd28\", \"\ud83d\ude10\", \"\ud83c\udf53\", \"\ud83c\udf7e\", \"\ud83d\udc8b\", \"\ud83d\udd95\", \"\ud83d\ude08\", \"\ud83d\ude34\", \"\ud83d\ude2d\", \"\ud83e\udd13\", \"\ud83d\udc7b\", \"\ud83d\udc68\u200d\ud83d\udcbb\", \"\ud83d\udc40\", \"\ud83c\udf83\", \"\ud83d\ude48\", \"\ud83d\ude07\", \"\ud83d\ude28\", \"\ud83e\udd1d\", \"\u270d\", \"\ud83e\udd17\", \"\ud83e\udee1\", \"\ud83c\udf85\", \"\ud83c\udf84\", \"\u2603\", \"\ud83d\udc85\", \"\ud83e\udd2a\", \"\ud83d\uddff\", \"\ud83c\udd92\", \"\ud83d\udc98\", \"\ud83d\ude49\", \"\ud83e\udd84\", \"\ud83d\ude18\", \"\ud83d\udc8a\", \"\ud83d\ude4a\", \"\ud83d\ude0e\", \"\ud83d\udc7e\", \"\ud83e\udd37\u200d\u2642\", \"\ud83e\udd37\", \"\ud83e\udd37\u200d\u2640\", \"\ud83d\ude21\" View source #emoji= ( emoji : String ) # Reaction emoji. Currently, it can be one of \"\ud83d\udc4d\", \"\ud83d\udc4e\", \"\u2764\", \"\ud83d\udd25\", \"\ud83e\udd70\", \"\ud83d\udc4f\", \"\ud83d\ude01\", \"\ud83e\udd14\", \"\ud83e\udd2f\", \"\ud83d\ude31\", \"\ud83e\udd2c\", \"\ud83d\ude22\", \"\ud83c\udf89\", \"\ud83e\udd29\", \"\ud83e\udd2e\", \"\ud83d\udca9\", \"\ud83d\ude4f\", \"\ud83d\udc4c\", \"\ud83d\udd4a\", \"\ud83e\udd21\", \"\ud83e\udd71\", \"\ud83e\udd74\", \"\ud83d\ude0d\", \"\ud83d\udc33\", \"\u2764\u200d\ud83d\udd25\", \"\ud83c\udf1a\", \"\ud83c\udf2d\", \"\ud83d\udcaf\", \"\ud83e\udd23\", \"\u26a1\", \"\ud83c\udf4c\", \"\ud83c\udfc6\", \"\ud83d\udc94\", \"\ud83e\udd28\", \"\ud83d\ude10\", \"\ud83c\udf53\", \"\ud83c\udf7e\", \"\ud83d\udc8b\", \"\ud83d\udd95\", \"\ud83d\ude08\", \"\ud83d\ude34\", \"\ud83d\ude2d\", \"\ud83e\udd13\", \"\ud83d\udc7b\", \"\ud83d\udc68\u200d\ud83d\udcbb\", \"\ud83d\udc40\", \"\ud83c\udf83\", \"\ud83d\ude48\", \"\ud83d\ude07\", \"\ud83d\ude28\", \"\ud83e\udd1d\", \"\u270d\", \"\ud83e\udd17\", \"\ud83e\udee1\", \"\ud83c\udf85\", \"\ud83c\udf84\", \"\u2603\", \"\ud83d\udc85\", \"\ud83e\udd2a\", \"\ud83d\uddff\", \"\ud83c\udd92\", \"\ud83d\udc98\", \"\ud83d\ude49\", \"\ud83e\udd84\", \"\ud83d\ude18\", \"\ud83d\udc8a\", \"\ud83d\ude4a\", \"\ud83d\ude0e\", \"\ud83d\udc7e\", \"\ud83e\udd37\u200d\u2642\", \"\ud83e\udd37\", \"\ud83e\udd37\u200d\u2640\", \"\ud83d\ude21\" View source #type : String # Type of the reaction, always \"emoji\" View source #type= ( type : String ) # Type of the reaction, always \"emoji\" View source","title":"ReactionTypeEmoji"},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji","text":"The reaction is based on an emoji.","title":"ReactionTypeEmoji"},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji.new(type,emoji)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji#emoji","text":"Reaction emoji. Currently, it can be one of \"\ud83d\udc4d\", \"\ud83d\udc4e\", \"\u2764\", \"\ud83d\udd25\", \"\ud83e\udd70\", \"\ud83d\udc4f\", \"\ud83d\ude01\", \"\ud83e\udd14\", \"\ud83e\udd2f\", \"\ud83d\ude31\", \"\ud83e\udd2c\", \"\ud83d\ude22\", \"\ud83c\udf89\", \"\ud83e\udd29\", \"\ud83e\udd2e\", \"\ud83d\udca9\", \"\ud83d\ude4f\", \"\ud83d\udc4c\", \"\ud83d\udd4a\", \"\ud83e\udd21\", \"\ud83e\udd71\", \"\ud83e\udd74\", \"\ud83d\ude0d\", \"\ud83d\udc33\", \"\u2764\u200d\ud83d\udd25\", \"\ud83c\udf1a\", \"\ud83c\udf2d\", \"\ud83d\udcaf\", \"\ud83e\udd23\", \"\u26a1\", \"\ud83c\udf4c\", \"\ud83c\udfc6\", \"\ud83d\udc94\", \"\ud83e\udd28\", \"\ud83d\ude10\", \"\ud83c\udf53\", \"\ud83c\udf7e\", \"\ud83d\udc8b\", \"\ud83d\udd95\", \"\ud83d\ude08\", \"\ud83d\ude34\", \"\ud83d\ude2d\", \"\ud83e\udd13\", \"\ud83d\udc7b\", \"\ud83d\udc68\u200d\ud83d\udcbb\", \"\ud83d\udc40\", \"\ud83c\udf83\", \"\ud83d\ude48\", \"\ud83d\ude07\", \"\ud83d\ude28\", \"\ud83e\udd1d\", \"\u270d\", \"\ud83e\udd17\", \"\ud83e\udee1\", \"\ud83c\udf85\", \"\ud83c\udf84\", \"\u2603\", \"\ud83d\udc85\", \"\ud83e\udd2a\", \"\ud83d\uddff\", \"\ud83c\udd92\", \"\ud83d\udc98\", \"\ud83d\ude49\", \"\ud83e\udd84\", \"\ud83d\ude18\", \"\ud83d\udc8a\", \"\ud83d\ude4a\", \"\ud83d\ude0e\", \"\ud83d\udc7e\", \"\ud83e\udd37\u200d\u2642\", \"\ud83e\udd37\", \"\ud83e\udd37\u200d\u2640\", \"\ud83d\ude21\" View source","title":"#emoji"},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji#emoji=(emoji)","text":"Reaction emoji. Currently, it can be one of \"\ud83d\udc4d\", \"\ud83d\udc4e\", \"\u2764\", \"\ud83d\udd25\", \"\ud83e\udd70\", \"\ud83d\udc4f\", \"\ud83d\ude01\", \"\ud83e\udd14\", \"\ud83e\udd2f\", \"\ud83d\ude31\", \"\ud83e\udd2c\", \"\ud83d\ude22\", \"\ud83c\udf89\", \"\ud83e\udd29\", \"\ud83e\udd2e\", \"\ud83d\udca9\", \"\ud83d\ude4f\", \"\ud83d\udc4c\", \"\ud83d\udd4a\", \"\ud83e\udd21\", \"\ud83e\udd71\", \"\ud83e\udd74\", \"\ud83d\ude0d\", \"\ud83d\udc33\", \"\u2764\u200d\ud83d\udd25\", \"\ud83c\udf1a\", \"\ud83c\udf2d\", \"\ud83d\udcaf\", \"\ud83e\udd23\", \"\u26a1\", \"\ud83c\udf4c\", \"\ud83c\udfc6\", \"\ud83d\udc94\", \"\ud83e\udd28\", \"\ud83d\ude10\", \"\ud83c\udf53\", \"\ud83c\udf7e\", \"\ud83d\udc8b\", \"\ud83d\udd95\", \"\ud83d\ude08\", \"\ud83d\ude34\", \"\ud83d\ude2d\", \"\ud83e\udd13\", \"\ud83d\udc7b\", \"\ud83d\udc68\u200d\ud83d\udcbb\", \"\ud83d\udc40\", \"\ud83c\udf83\", \"\ud83d\ude48\", \"\ud83d\ude07\", \"\ud83d\ude28\", \"\ud83e\udd1d\", \"\u270d\", \"\ud83e\udd17\", \"\ud83e\udee1\", \"\ud83c\udf85\", \"\ud83c\udf84\", \"\u2603\", \"\ud83d\udc85\", \"\ud83e\udd2a\", \"\ud83d\uddff\", \"\ud83c\udd92\", \"\ud83d\udc98\", \"\ud83d\ude49\", \"\ud83e\udd84\", \"\ud83d\ude18\", \"\ud83d\udc8a\", \"\ud83d\ude4a\", \"\ud83d\ude0e\", \"\ud83d\udc7e\", \"\ud83e\udd37\u200d\u2642\", \"\ud83e\udd37\", \"\ud83e\udd37\u200d\u2640\", \"\ud83d\ude21\" View source","title":"#emoji="},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji#type","text":"Type of the reaction, always \"emoji\" View source","title":"#type"},{"location":"api_reference/Tourmaline/ReactionTypeEmoji/#Tourmaline::ReactionTypeEmoji#type=(type)","text":"Type of the reaction, always \"emoji\" View source","title":"#type="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/","text":"class Tourmaline::ReplyKeyboardMarkup inherits Reference # This object represents a custom keyboard with reply options (see Introduction to bots for details and examples). Not supported in channels and for messages sent on behalf of a Telegram Business account. Included modules JSON::Serializable Constructors # .new ( keyboard : Array ( Array ( Tourmaline::KeyboardButton )) = [] of Array ( Tourmaline :: KeyboardButton ), is_persistent : Bool? = nil , resize_keyboard : Bool? = nil , one_time_keyboard : Bool? = nil , input_field_placeholder : String? = nil , selective : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #<< ( keys : Array ( KeyboardButton )) # View source #<< ( row : Int32 , key : KeyboardButton ) # View source #delete_row ( row ) # View source #input_field_placeholder : String? # Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters View source #input_field_placeholder= ( input_field_placeholder : String? ) # Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters View source #is_persistent= ( is_persistent : Bool? ) # Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon. View source #is_persistent? : Bool? # Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon. View source #keyboard : Array ( Array ( Tourmaline::KeyboardButton )) # Array of button rows, each represented by an Array of KeyboardButton objects View source #keyboard= ( keyboard : Array ( Array ( Tourmaline::KeyboardButton ))) # Array of button rows, each represented by an Array of KeyboardButton objects View source #one_time_keyboard= ( one_time_keyboard : Bool? ) # Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false. View source #one_time_keyboard? : Bool? # Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false. View source #resize_keyboard= ( resize_keyboard : Bool? ) # Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard. View source #resize_keyboard? : Bool? # Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard. View source #selective= ( selective : Bool? ) # Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. View source #selective? : Bool? # Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. View source #size # View source #swap_row ( row : Int32 , keys : Array ( KeyboardButton )) # View source","title":"ReplyKeyboardMarkup"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup","text":"This object represents a custom keyboard with reply options (see Introduction to bots for details and examples). Not supported in channels and for messages sent on behalf of a Telegram Business account.","title":"ReplyKeyboardMarkup"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup.new(keyboard,is_persistent,resize_keyboard,one_time_keyboard,input_field_placeholder,selective)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#<<(keys)","text":"View source","title":"#&lt;&lt;"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#delete_row(row)","text":"View source","title":"#delete_row"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#input_field_placeholder","text":"Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters View source","title":"#input_field_placeholder"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#input_field_placeholder=(input_field_placeholder)","text":"Optional. The placeholder to be shown in the input field when the keyboard is active; 1-64 characters View source","title":"#input_field_placeholder="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#is_persistent=(is_persistent)","text":"Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon. View source","title":"#is_persistent="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#is_persistent?","text":"Optional. Requests clients to always show the keyboard when the regular keyboard is hidden. Defaults to false, in which case the custom keyboard can be hidden and opened with a keyboard icon. View source","title":"#is_persistent?"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#keyboard","text":"Array of button rows, each represented by an Array of KeyboardButton objects View source","title":"#keyboard"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#keyboard=(keyboard)","text":"Array of button rows, each represented by an Array of KeyboardButton objects View source","title":"#keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#one_time_keyboard=(one_time_keyboard)","text":"Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false. View source","title":"#one_time_keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#one_time_keyboard?","text":"Optional. Requests clients to hide the keyboard as soon as it's been used. The keyboard will still be available, but clients will automatically display the usual letter-keyboard in the chat - the user can press a special button in the input field to see the custom keyboard again. Defaults to false. View source","title":"#one_time_keyboard?"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#resize_keyboard=(resize_keyboard)","text":"Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard. View source","title":"#resize_keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#resize_keyboard?","text":"Optional. Requests clients to resize the keyboard vertically for optimal fit (e.g., make the keyboard smaller if there are just two rows of buttons). Defaults to false, in which case the custom keyboard is always of the same height as the app's standard keyboard. View source","title":"#resize_keyboard?"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#selective=(selective)","text":"Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. View source","title":"#selective="},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#selective?","text":"Optional. Use this parameter if you want to show the keyboard to specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user requests to change the bot's language, bot replies to the request with a keyboard to select the new language. Other users in the group don't see the keyboard. View source","title":"#selective?"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#size","text":"View source","title":"#size"},{"location":"api_reference/Tourmaline/ReplyKeyboardMarkup/#Tourmaline::ReplyKeyboardMarkup#swap_row(row,keys)","text":"View source","title":"#swap_row"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/","text":"class Tourmaline::ReplyKeyboardRemove inherits Reference # Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup). Not supported in channels and for messages sent on behalf of a Telegram Business account. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( remove_keyboard , selective : Bool? = nil ) # View source Methods # #remove_keyboard= ( remove_keyboard : Bool ) # Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup) View source #remove_keyboard? : Bool # Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup) View source #selective= ( selective : Bool? ) # Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet. View source #selective? : Bool? # Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet. View source","title":"ReplyKeyboardRemove"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove","text":"Upon receiving a message with this object, Telegram clients will remove the current custom keyboard and display the default letter-keyboard. By default, custom keyboards are displayed until a new keyboard is sent by a bot. An exception is made for one-time keyboards that are hidden immediately after the user presses a button (see ReplyKeyboardMarkup). Not supported in channels and for messages sent on behalf of a Telegram Business account.","title":"ReplyKeyboardRemove"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#remove_keyboard=(remove_keyboard)","text":"Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup) View source","title":"#remove_keyboard="},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#remove_keyboard?","text":"Requests clients to remove the custom keyboard (user will not be able to summon this keyboard; if you want to hide the keyboard from sight but keep it accessible, use one_time_keyboard in ReplyKeyboardMarkup) View source","title":"#remove_keyboard?"},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#selective=(selective)","text":"Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet. View source","title":"#selective="},{"location":"api_reference/Tourmaline/ReplyKeyboardRemove/#Tourmaline::ReplyKeyboardRemove#selective?","text":"Optional. Use this parameter if you want to remove the keyboard for specific users only. Targets: 1) users that are @mentioned in the text of the Message object; 2) if the bot's message is a reply to a message in the same chat and forum topic, sender of the original message. Example: A user votes in a poll, bot returns confirmation message in reply to the vote and removes the keyboard for that user, while still showing the keyboard with poll options to users who haven't voted yet. View source","title":"#selective?"},{"location":"api_reference/Tourmaline/ReplyParameters/","text":"class Tourmaline::ReplyParameters inherits Reference # Describes reply parameters for the message that is being sent. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( message_id , chat_id : Int32 | Int64 | String | Nil = nil , allow_sending_without_reply : Bool? = nil , quote : String? = nil , quote_parse_mode : String? = nil , quote_entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , quote_position : Int32 | Int64 | Nil = nil ) # View source Methods # #allow_sending_without_reply= ( allow_sending_without_reply : Bool? ) # Optional. Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account. View source #allow_sending_without_reply? : Bool? # Optional. Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account. View source #chat_id : Int32 | Int64 | String | Nil # Optional. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account. View source #chat_id= ( chat_id : Int32 | Int64 | String | Nil ) # Optional. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account. View source #message_id : Int32 | Int64 # Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified View source #message_id= ( message_id : Int32 | Int64 ) # Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified View source #quote : String? # Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message. View source #quote= ( quote : String? ) # Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message. View source #quote_entities : Array ( Tourmaline::MessageEntity ) # Optional. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode. View source #quote_entities= ( quote_entities : Array ( Tourmaline::MessageEntity )) # Optional. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode. View source #quote_parse_mode : String? # Optional. Mode for parsing entities in the quote. See formatting options for more details. View source #quote_parse_mode= ( quote_parse_mode : String? ) # Optional. Mode for parsing entities in the quote. See formatting options for more details. View source #quote_position : Int32 | Int64 | Nil # Optional. Position of the quote in the original message in UTF-16 code units View source #quote_position= ( quote_position : Int32 | Int64 | Nil ) # Optional. Position of the quote in the original message in UTF-16 code units View source","title":"ReplyParameters"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters","text":"Describes reply parameters for the message that is being sent.","title":"ReplyParameters"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#allow_sending_without_reply=(allow_sending_without_reply)","text":"Optional. Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account. View source","title":"#allow_sending_without_reply="},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#allow_sending_without_reply?","text":"Optional. Pass True if the message should be sent even if the specified message to be replied to is not found. Always False for replies in another chat or forum topic. Always True for messages sent on behalf of a business account. View source","title":"#allow_sending_without_reply?"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#chat_id","text":"Optional. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account. View source","title":"#chat_id"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#chat_id=(chat_id)","text":"Optional. If the message to be replied to is from a different chat, unique identifier for the chat or username of the channel (in the format @channelusername). Not supported for messages sent on behalf of a business account. View source","title":"#chat_id="},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#message_id","text":"Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified View source","title":"#message_id"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#message_id=(message_id)","text":"Identifier of the message that will be replied to in the current chat, or in the chat chat_id if it is specified View source","title":"#message_id="},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote","text":"Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message. View source","title":"#quote"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote=(quote)","text":"Optional. Quoted part of the message to be replied to; 0-1024 characters after entities parsing. The quote must be an exact substring of the message to be replied to, including bold, italic, underline, strikethrough, spoiler, and custom_emoji entities. The message will fail to send if the quote isn't found in the original message. View source","title":"#quote="},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote_entities","text":"Optional. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode. View source","title":"#quote_entities"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote_entities=(quote_entities)","text":"Optional. A JSON-serialized list of special entities that appear in the quote. It can be specified instead of quote_parse_mode. View source","title":"#quote_entities="},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote_parse_mode","text":"Optional. Mode for parsing entities in the quote. See formatting options for more details. View source","title":"#quote_parse_mode"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote_parse_mode=(quote_parse_mode)","text":"Optional. Mode for parsing entities in the quote. See formatting options for more details. View source","title":"#quote_parse_mode="},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote_position","text":"Optional. Position of the quote in the original message in UTF-16 code units View source","title":"#quote_position"},{"location":"api_reference/Tourmaline/ReplyParameters/#Tourmaline::ReplyParameters#quote_position=(quote_position)","text":"Optional. Position of the quote in the original message in UTF-16 code units View source","title":"#quote_position="},{"location":"api_reference/Tourmaline/ResponseParameters/","text":"class Tourmaline::ResponseParameters inherits Reference # Describes why a request was unsuccessful. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( migrate_to_chat_id : Int32 | Int64 | Nil = nil , retry_after : Int32 | Int64 | Nil = nil ) # View source Methods # #migrate_to_chat_id : Int32 | Int64 | Nil # Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #migrate_to_chat_id= ( migrate_to_chat_id : Int32 | Int64 | Nil ) # Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source #retry_after : Int32 | Int64 | Nil # Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated View source #retry_after= ( retry_after : Int32 | Int64 | Nil ) # Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated View source","title":"ResponseParameters"},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters","text":"Describes why a request was unsuccessful.","title":"ResponseParameters"},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters#migrate_to_chat_id","text":"Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#migrate_to_chat_id"},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters#migrate_to_chat_id=(migrate_to_chat_id)","text":"Optional. The group has been migrated to a supergroup with the specified identifier. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#migrate_to_chat_id="},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters#retry_after","text":"Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated View source","title":"#retry_after"},{"location":"api_reference/Tourmaline/ResponseParameters/#Tourmaline::ResponseParameters#retry_after=(retry_after)","text":"Optional. In case of exceeding flood control, the number of seconds left to wait before the request can be repeated View source","title":"#retry_after="},{"location":"api_reference/Tourmaline/SentWebAppMessage/","text":"class Tourmaline::SentWebAppMessage inherits Reference # Describes an inline message sent by a Web App on behalf of a user. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( inline_message_id : String? = nil ) # View source Methods # #inline_message_id : String? # Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. View source #inline_message_id= ( inline_message_id : String? ) # Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. View source","title":"SentWebAppMessage"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage","text":"Describes an inline message sent by a Web App on behalf of a user.","title":"SentWebAppMessage"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage#inline_message_id","text":"Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. View source","title":"#inline_message_id"},{"location":"api_reference/Tourmaline/SentWebAppMessage/#Tourmaline::SentWebAppMessage#inline_message_id=(inline_message_id)","text":"Optional. Identifier of the sent inline message. Available only if there is an inline keyboard attached to the message. View source","title":"#inline_message_id="},{"location":"api_reference/Tourmaline/Server/","text":"class Tourmaline::Server inherits Reference # The Server class is a basic webhook server for receiving updates from the Telegram API. Constructors # .new ( client : Tourmaline::Client ) # View source Methods # #serve ( host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil , no_middleware_check = false , & block : HTTP :: Server :: Context -> ) # Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. View source #serve ( path = \"/\" , host = \"127.0.0.1\" , port = 8081 , ssl_certificate_path = nil , ssl_key_path = nil , no_middleware_check = false ) # Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. View source #stop_serving # Stops the webhook HTTP server View source","title":"Server"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server","text":"The Server class is a basic webhook server for receiving updates from the Telegram API.","title":"Server"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server.new(client)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server#serve(host,port,ssl_certificate_path,ssl_key_path,no_middleware_check,&)","text":"Start an HTTP server at the specified host and port that listens for updates using Telegram's webhooks. View source","title":"#serve"},{"location":"api_reference/Tourmaline/Server/#Tourmaline::Server#stop_serving","text":"Stops the webhook HTTP server View source","title":"#stop_serving"},{"location":"api_reference/Tourmaline/SharedUser/","text":"class Tourmaline::SharedUser inherits Reference # This object contains information about a user that was shared with the bot using a KeyboardButtonRequestUsers button. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( user_id , first_name : String? = nil , last_name : String? = nil , username : String? = nil , photo : Array ( Tourmaline::PhotoSize ) = [] of Tourmaline :: PhotoSize ) # View source Methods # #first_name : String? # Optional. First name of the user, if the name was requested by the bot View source #first_name= ( first_name : String? ) # Optional. First name of the user, if the name was requested by the bot View source #last_name : String? # Optional. Last name of the user, if the name was requested by the bot View source #last_name= ( last_name : String? ) # Optional. Last name of the user, if the name was requested by the bot View source #photo : Array ( Tourmaline::PhotoSize ) # Optional. Available sizes of the chat photo, if the photo was requested by the bot View source #photo= ( photo : Array ( Tourmaline::PhotoSize )) # Optional. Available sizes of the chat photo, if the photo was requested by the bot View source #user_id : Int32 | Int64 # Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means. View source #user_id= ( user_id : Int32 | Int64 ) # Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means. View source #username : String? # Optional. Username of the user, if the username was requested by the bot View source #username= ( username : String? ) # Optional. Username of the user, if the username was requested by the bot View source","title":"SharedUser"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser","text":"This object contains information about a user that was shared with the bot using a KeyboardButtonRequestUsers button.","title":"SharedUser"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#first_name","text":"Optional. First name of the user, if the name was requested by the bot View source","title":"#first_name"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#first_name=(first_name)","text":"Optional. First name of the user, if the name was requested by the bot View source","title":"#first_name="},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#last_name","text":"Optional. Last name of the user, if the name was requested by the bot View source","title":"#last_name"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#last_name=(last_name)","text":"Optional. Last name of the user, if the name was requested by the bot View source","title":"#last_name="},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#photo","text":"Optional. Available sizes of the chat photo, if the photo was requested by the bot View source","title":"#photo"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#photo=(photo)","text":"Optional. Available sizes of the chat photo, if the photo was requested by the bot View source","title":"#photo="},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#user_id","text":"Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means. View source","title":"#user_id"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#user_id=(user_id)","text":"Identifier of the shared user. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so 64-bit integers or double-precision float types are safe for storing these identifiers. The bot may not have access to the user and could be unable to use this identifier, unless the user is already known to the bot by some other means. View source","title":"#user_id="},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#username","text":"Optional. Username of the user, if the username was requested by the bot View source","title":"#username"},{"location":"api_reference/Tourmaline/SharedUser/#Tourmaline::SharedUser#username=(username)","text":"Optional. Username of the user, if the username was requested by the bot View source","title":"#username="},{"location":"api_reference/Tourmaline/ShippingAddress/","text":"class Tourmaline::ShippingAddress inherits Reference # This object represents a shipping address. Included modules JSON::Serializable Constructors # .new ( country_code , state , city , street_line1 , street_line2 , post_code ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #city : String # City View source #city= ( city : String ) # City View source #country_code : String # Two-letter ISO 3166-1 alpha-2 country code View source #country_code= ( country_code : String ) # Two-letter ISO 3166-1 alpha-2 country code View source #post_code : String # Address post code View source #post_code= ( post_code : String ) # Address post code View source #state : String # State, if applicable View source #state= ( state : String ) # State, if applicable View source #street_line1 : String # First line for the address View source #street_line1= ( street_line1 : String ) # First line for the address View source #street_line2 : String # Second line for the address View source #street_line2= ( street_line2 : String ) # Second line for the address View source","title":"ShippingAddress"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress","text":"This object represents a shipping address.","title":"ShippingAddress"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress.new(country_code,state,city,street_line1,street_line2,post_code)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#city","text":"City View source","title":"#city"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#city=(city)","text":"City View source","title":"#city="},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#country_code","text":"Two-letter ISO 3166-1 alpha-2 country code View source","title":"#country_code"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#country_code=(country_code)","text":"Two-letter ISO 3166-1 alpha-2 country code View source","title":"#country_code="},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#post_code","text":"Address post code View source","title":"#post_code"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#post_code=(post_code)","text":"Address post code View source","title":"#post_code="},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#state","text":"State, if applicable View source","title":"#state"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#state=(state)","text":"State, if applicable View source","title":"#state="},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line1","text":"First line for the address View source","title":"#street_line1"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line1=(street_line1)","text":"First line for the address View source","title":"#street_line1="},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line2","text":"Second line for the address View source","title":"#street_line2"},{"location":"api_reference/Tourmaline/ShippingAddress/#Tourmaline::ShippingAddress#street_line2=(street_line2)","text":"Second line for the address View source","title":"#street_line2="},{"location":"api_reference/Tourmaline/ShippingOption/","text":"class Tourmaline::ShippingOption inherits Reference # This object represents one shipping option. Included modules JSON::Serializable Constructors # .new ( id , title , prices : Array ( Tourmaline::LabeledPrice ) = [] of Tourmaline :: LabeledPrice ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #id : String # Shipping option identifier View source #id= ( id : String ) # Shipping option identifier View source #prices : Array ( Tourmaline::LabeledPrice ) # List of price portions View source #prices= ( prices : Array ( Tourmaline::LabeledPrice )) # List of price portions View source #title : String # Option title View source #title= ( title : String ) # Option title View source","title":"ShippingOption"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption","text":"This object represents one shipping option.","title":"ShippingOption"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption.new(id,title,prices)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#id","text":"Shipping option identifier View source","title":"#id"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#id=(id)","text":"Shipping option identifier View source","title":"#id="},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#prices","text":"List of price portions View source","title":"#prices"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#prices=(prices)","text":"List of price portions View source","title":"#prices="},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#title","text":"Option title View source","title":"#title"},{"location":"api_reference/Tourmaline/ShippingOption/#Tourmaline::ShippingOption#title=(title)","text":"Option title View source","title":"#title="},{"location":"api_reference/Tourmaline/ShippingQuery/","text":"class Tourmaline::ShippingQuery inherits Reference # This object contains information about an incoming shipping query. Included modules JSON::Serializable Constructors # .new ( id , from , invoice_payload , shipping_address ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #from : Tourmaline::User # User who sent the query View source #from= ( from : Tourmaline::User ) # User who sent the query View source #id : String # Unique query identifier View source #id= ( id : String ) # Unique query identifier View source #invoice_payload : String # Bot specified invoice payload View source #invoice_payload= ( invoice_payload : String ) # Bot specified invoice payload View source #shipping_address : Tourmaline::ShippingAddress # User specified shipping address View source #shipping_address= ( shipping_address : Tourmaline::ShippingAddress ) # User specified shipping address View source","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery","text":"This object contains information about an incoming shipping query.","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery.new(id,from,invoice_payload,shipping_address)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#from","text":"User who sent the query View source","title":"#from"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#from=(from)","text":"User who sent the query View source","title":"#from="},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#id","text":"Unique query identifier View source","title":"#id"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#id=(id)","text":"Unique query identifier View source","title":"#id="},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#invoice_payload","text":"Bot specified invoice payload View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#invoice_payload=(invoice_payload)","text":"Bot specified invoice payload View source","title":"#invoice_payload="},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#shipping_address","text":"User specified shipping address View source","title":"#shipping_address"},{"location":"api_reference/Tourmaline/ShippingQuery/#Tourmaline::ShippingQuery#shipping_address=(shipping_address)","text":"User specified shipping address View source","title":"#shipping_address="},{"location":"api_reference/Tourmaline/Sticker/","text":"class Tourmaline::Sticker inherits Reference # This object represents a sticker. Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , type , width , height , is_animated , is_video , thumbnail : Tourmaline::PhotoSize? = nil , emoji : String? = nil , set_name : String? = nil , premium_animation : Tourmaline::File? = nil , mask_position : Tourmaline::MaskPosition? = nil , custom_emoji_id : String? = nil , needs_repainting : Bool? = nil , file_size : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #custom_emoji_id : String? # Optional. For custom emoji stickers, unique identifier of the custom emoji View source #custom_emoji_id= ( custom_emoji_id : String? ) # Optional. For custom emoji stickers, unique identifier of the custom emoji View source #emoji : String? # Optional. Emoji associated with the sticker View source #emoji= ( emoji : String? ) # Optional. Emoji associated with the sticker View source #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #height : Int32 | Int64 # Sticker height View source #height= ( height : Int32 | Int64 ) # Sticker height View source #is_animated= ( is_animated : Bool ) # True, if the sticker is animated View source #is_animated? : Bool # True, if the sticker is animated View source #is_video= ( is_video : Bool ) # True, if the sticker is a video sticker View source #is_video? : Bool # True, if the sticker is a video sticker View source #mask_position : Tourmaline::MaskPosition? # Optional. For mask stickers, the position where the mask should be placed View source #mask_position= ( mask_position : Tourmaline::MaskPosition? ) # Optional. For mask stickers, the position where the mask should be placed View source #needs_repainting= ( needs_repainting : Bool? ) # Optional. True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places View source #needs_repainting? : Bool? # Optional. True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places View source #premium_animation : Tourmaline::File? # Optional. For premium regular stickers, premium animation for the sticker View source #premium_animation= ( premium_animation : Tourmaline::File? ) # Optional. For premium regular stickers, premium animation for the sticker View source #set_name : String? # Optional. Name of the sticker set to which the sticker belongs View source #set_name= ( set_name : String? ) # Optional. Name of the sticker set to which the sticker belongs View source #thumbnail : Tourmaline::PhotoSize? # Optional. Sticker thumbnail in the .WEBP or .JPG format View source #thumbnail= ( thumbnail : Tourmaline::PhotoSize? ) # Optional. Sticker thumbnail in the .WEBP or .JPG format View source #type : String # Type of the sticker, currently one of \"regular\", \"mask\", \"custom_emoji\". The type of the sticker is independent from its format, which is determined by the fields is_animated and is_video. View source #type= ( type : String ) # Type of the sticker, currently one of \"regular\", \"mask\", \"custom_emoji\". The type of the sticker is independent from its format, which is determined by the fields is_animated and is_video. View source #width : Int32 | Int64 # Sticker width View source #width= ( width : Int32 | Int64 ) # Sticker width View source","title":"Sticker"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker","text":"This object represents a sticker.","title":"Sticker"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker.new(file_id,file_unique_id,type,width,height,is_animated,is_video,thumbnail,emoji,set_name,premium_animation,mask_position,custom_emoji_id,needs_repainting,file_size)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#custom_emoji_id","text":"Optional. For custom emoji stickers, unique identifier of the custom emoji View source","title":"#custom_emoji_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#custom_emoji_id=(custom_emoji_id)","text":"Optional. For custom emoji stickers, unique identifier of the custom emoji View source","title":"#custom_emoji_id="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#emoji","text":"Optional. Emoji associated with the sticker View source","title":"#emoji"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#emoji=(emoji)","text":"Optional. Emoji associated with the sticker View source","title":"#emoji="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_size","text":"Optional. File size in bytes View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_size=(file_size)","text":"Optional. File size in bytes View source","title":"#file_size="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#height","text":"Sticker height View source","title":"#height"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#height=(height)","text":"Sticker height View source","title":"#height="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#is_animated=(is_animated)","text":"True, if the sticker is animated View source","title":"#is_animated="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#is_animated?","text":"True, if the sticker is animated View source","title":"#is_animated?"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#is_video=(is_video)","text":"True, if the sticker is a video sticker View source","title":"#is_video="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#is_video?","text":"True, if the sticker is a video sticker View source","title":"#is_video?"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#mask_position","text":"Optional. For mask stickers, the position where the mask should be placed View source","title":"#mask_position"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#mask_position=(mask_position)","text":"Optional. For mask stickers, the position where the mask should be placed View source","title":"#mask_position="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#needs_repainting=(needs_repainting)","text":"Optional. True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places View source","title":"#needs_repainting="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#needs_repainting?","text":"Optional. True, if the sticker must be repainted to a text color in messages, the color of the Telegram Premium badge in emoji status, white color on chat photos, or another appropriate color in other places View source","title":"#needs_repainting?"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#premium_animation","text":"Optional. For premium regular stickers, premium animation for the sticker View source","title":"#premium_animation"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#premium_animation=(premium_animation)","text":"Optional. For premium regular stickers, premium animation for the sticker View source","title":"#premium_animation="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#set_name","text":"Optional. Name of the sticker set to which the sticker belongs View source","title":"#set_name"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#set_name=(set_name)","text":"Optional. Name of the sticker set to which the sticker belongs View source","title":"#set_name="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#thumbnail","text":"Optional. Sticker thumbnail in the .WEBP or .JPG format View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#thumbnail=(thumbnail)","text":"Optional. Sticker thumbnail in the .WEBP or .JPG format View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#type","text":"Type of the sticker, currently one of \"regular\", \"mask\", \"custom_emoji\". The type of the sticker is independent from its format, which is determined by the fields is_animated and is_video. View source","title":"#type"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#type=(type)","text":"Type of the sticker, currently one of \"regular\", \"mask\", \"custom_emoji\". The type of the sticker is independent from its format, which is determined by the fields is_animated and is_video. View source","title":"#type="},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#width","text":"Sticker width View source","title":"#width"},{"location":"api_reference/Tourmaline/Sticker/#Tourmaline::Sticker#width=(width)","text":"Sticker width View source","title":"#width="},{"location":"api_reference/Tourmaline/StickerSet/","text":"class Tourmaline::StickerSet inherits Reference # This object represents a sticker set. Included modules JSON::Serializable Constructors # .new ( name , title , sticker_type , stickers : Array ( Tourmaline::Sticker ) = [] of Tourmaline :: Sticker , thumbnail : Tourmaline::PhotoSize? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #name : String # Sticker set name View source #name= ( name : String ) # Sticker set name View source #sticker_type : String # Type of stickers in the set, currently one of \"regular\", \"mask\", \"custom_emoji\" View source #sticker_type= ( sticker_type : String ) # Type of stickers in the set, currently one of \"regular\", \"mask\", \"custom_emoji\" View source #stickers : Array ( Tourmaline::Sticker ) # List of all set stickers View source #stickers= ( stickers : Array ( Tourmaline::Sticker )) # List of all set stickers View source #thumbnail : Tourmaline::PhotoSize? # Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format View source #thumbnail= ( thumbnail : Tourmaline::PhotoSize? ) # Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format View source #title : String # Sticker set title View source #title= ( title : String ) # Sticker set title View source","title":"StickerSet"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet","text":"This object represents a sticker set.","title":"StickerSet"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet.new(name,title,sticker_type,stickers,thumbnail)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#name","text":"Sticker set name View source","title":"#name"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#name=(name)","text":"Sticker set name View source","title":"#name="},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#sticker_type","text":"Type of stickers in the set, currently one of \"regular\", \"mask\", \"custom_emoji\" View source","title":"#sticker_type"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#sticker_type=(sticker_type)","text":"Type of stickers in the set, currently one of \"regular\", \"mask\", \"custom_emoji\" View source","title":"#sticker_type="},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#stickers","text":"List of all set stickers View source","title":"#stickers"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#stickers=(stickers)","text":"List of all set stickers View source","title":"#stickers="},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#thumbnail","text":"Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#thumbnail=(thumbnail)","text":"Optional. Sticker set thumbnail in the .WEBP, .TGS, or .WEBM format View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#title","text":"Sticker set title View source","title":"#title"},{"location":"api_reference/Tourmaline/StickerSet/#Tourmaline::StickerSet#title=(title)","text":"Sticker set title View source","title":"#title="},{"location":"api_reference/Tourmaline/Story/","text":"class Tourmaline::Story inherits Reference # This object represents a story. Included modules JSON::Serializable Constructors # .new ( chat , id ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #chat : Tourmaline::Chat # Chat that posted the story View source #chat= ( chat : Tourmaline::Chat ) # Chat that posted the story View source #id : Int32 | Int64 # Unique identifier for the story in the chat View source #id= ( id : Int32 | Int64 ) # Unique identifier for the story in the chat View source","title":"Story"},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story","text":"This object represents a story.","title":"Story"},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story.new(chat,id)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story#chat","text":"Chat that posted the story View source","title":"#chat"},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story#chat=(chat)","text":"Chat that posted the story View source","title":"#chat="},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story#id","text":"Unique identifier for the story in the chat View source","title":"#id"},{"location":"api_reference/Tourmaline/Story/#Tourmaline::Story#id=(id)","text":"Unique identifier for the story in the chat View source","title":"#id="},{"location":"api_reference/Tourmaline/SuccessfulPayment/","text":"class Tourmaline::SuccessfulPayment inherits Reference # This object contains basic information about a successful payment. Included modules JSON::Serializable Constructors # .new ( currency , total_amount , invoice_payload , telegram_payment_charge_id , provider_payment_charge_id , shipping_option_id : String? = nil , order_info : Tourmaline::OrderInfo? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #currency : String # Three-letter ISO 4217 currency code View source #currency= ( currency : String ) # Three-letter ISO 4217 currency code View source #invoice_payload : String # Bot specified invoice payload View source #invoice_payload= ( invoice_payload : String ) # Bot specified invoice payload View source #order_info : Tourmaline::OrderInfo? # Optional. Order information provided by the user View source #order_info= ( order_info : Tourmaline::OrderInfo? ) # Optional. Order information provided by the user View source #provider_payment_charge_id : String # Provider payment identifier View source #provider_payment_charge_id= ( provider_payment_charge_id : String ) # Provider payment identifier View source #shipping_option_id : String? # Optional. Identifier of the shipping option chosen by the user View source #shipping_option_id= ( shipping_option_id : String? ) # Optional. Identifier of the shipping option chosen by the user View source #telegram_payment_charge_id : String # Telegram payment identifier View source #telegram_payment_charge_id= ( telegram_payment_charge_id : String ) # Telegram payment identifier View source #total_amount : Int32 | Int64 # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source #total_amount= ( total_amount : Int32 | Int64 ) # Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment","text":"This object contains basic information about a successful payment.","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment.new(currency,total_amount,invoice_payload,telegram_payment_charge_id,provider_payment_charge_id,shipping_option_id,order_info)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#currency","text":"Three-letter ISO 4217 currency code View source","title":"#currency"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#currency=(currency)","text":"Three-letter ISO 4217 currency code View source","title":"#currency="},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#invoice_payload","text":"Bot specified invoice payload View source","title":"#invoice_payload"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#invoice_payload=(invoice_payload)","text":"Bot specified invoice payload View source","title":"#invoice_payload="},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#order_info","text":"Optional. Order information provided by the user View source","title":"#order_info"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#order_info=(order_info)","text":"Optional. Order information provided by the user View source","title":"#order_info="},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#provider_payment_charge_id","text":"Provider payment identifier View source","title":"#provider_payment_charge_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#provider_payment_charge_id=(provider_payment_charge_id)","text":"Provider payment identifier View source","title":"#provider_payment_charge_id="},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#shipping_option_id","text":"Optional. Identifier of the shipping option chosen by the user View source","title":"#shipping_option_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#shipping_option_id=(shipping_option_id)","text":"Optional. Identifier of the shipping option chosen by the user View source","title":"#shipping_option_id="},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#telegram_payment_charge_id","text":"Telegram payment identifier View source","title":"#telegram_payment_charge_id"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#telegram_payment_charge_id=(telegram_payment_charge_id)","text":"Telegram payment identifier View source","title":"#telegram_payment_charge_id="},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#total_amount","text":"Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#total_amount"},{"location":"api_reference/Tourmaline/SuccessfulPayment/#Tourmaline::SuccessfulPayment#total_amount=(total_amount)","text":"Total price in the smallest units of the currency (integer, not float/double). For example, for a price of US$ 1.45 pass amount = 145. See the exp parameter in currencies.json, it shows the number of digits past the decimal point for each currency (2 for the majority of currencies). View source","title":"#total_amount="},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/","text":"class Tourmaline::SwitchInlineQueryChosenChat inherits Reference # This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( query : String? = nil , allow_user_chats : Bool? = nil , allow_bot_chats : Bool? = nil , allow_group_chats : Bool? = nil , allow_channel_chats : Bool? = nil ) # View source Methods # #allow_bot_chats= ( allow_bot_chats : Bool? ) # Optional. True, if private chats with bots can be chosen View source #allow_bot_chats? : Bool? # Optional. True, if private chats with bots can be chosen View source #allow_channel_chats= ( allow_channel_chats : Bool? ) # Optional. True, if channel chats can be chosen View source #allow_channel_chats? : Bool? # Optional. True, if channel chats can be chosen View source #allow_group_chats= ( allow_group_chats : Bool? ) # Optional. True, if group and supergroup chats can be chosen View source #allow_group_chats? : Bool? # Optional. True, if group and supergroup chats can be chosen View source #allow_user_chats= ( allow_user_chats : Bool? ) # Optional. True, if private chats with users can be chosen View source #allow_user_chats? : Bool? # Optional. True, if private chats with users can be chosen View source #query : String? # Optional. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted View source #query= ( query : String? ) # Optional. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted View source","title":"SwitchInlineQueryChosenChat"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat","text":"This object represents an inline button that switches the current user to inline mode in a chosen chat, with an optional default inline query.","title":"SwitchInlineQueryChosenChat"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_bot_chats=(allow_bot_chats)","text":"Optional. True, if private chats with bots can be chosen View source","title":"#allow_bot_chats="},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_bot_chats?","text":"Optional. True, if private chats with bots can be chosen View source","title":"#allow_bot_chats?"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_channel_chats=(allow_channel_chats)","text":"Optional. True, if channel chats can be chosen View source","title":"#allow_channel_chats="},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_channel_chats?","text":"Optional. True, if channel chats can be chosen View source","title":"#allow_channel_chats?"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_group_chats=(allow_group_chats)","text":"Optional. True, if group and supergroup chats can be chosen View source","title":"#allow_group_chats="},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_group_chats?","text":"Optional. True, if group and supergroup chats can be chosen View source","title":"#allow_group_chats?"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_user_chats=(allow_user_chats)","text":"Optional. True, if private chats with users can be chosen View source","title":"#allow_user_chats="},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#allow_user_chats?","text":"Optional. True, if private chats with users can be chosen View source","title":"#allow_user_chats?"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#query","text":"Optional. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted View source","title":"#query"},{"location":"api_reference/Tourmaline/SwitchInlineQueryChosenChat/#Tourmaline::SwitchInlineQueryChosenChat#query=(query)","text":"Optional. The default inline query to be inserted in the input field. If left empty, only the bot's username will be inserted View source","title":"#query="},{"location":"api_reference/Tourmaline/TextQuote/","text":"class Tourmaline::TextQuote inherits Reference # This object contains information about the quoted part of a message that is replied to by the given message. Included modules JSON::Serializable Constructors # .new ( text , position , entities : Array ( Tourmaline::MessageEntity ) = [] of Tourmaline :: MessageEntity , is_manual : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #entities : Array ( Tourmaline::MessageEntity ) # Optional. Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes. View source #entities= ( entities : Array ( Tourmaline::MessageEntity )) # Optional. Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes. View source #is_manual= ( is_manual : Bool? ) # Optional. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server. View source #is_manual? : Bool? # Optional. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server. View source #position : Int32 | Int64 # Approximate quote position in the original message in UTF-16 code units as specified by the sender View source #position= ( position : Int32 | Int64 ) # Approximate quote position in the original message in UTF-16 code units as specified by the sender View source #text : String # Text of the quoted part of a message that is replied to by the given message View source #text= ( text : String ) # Text of the quoted part of a message that is replied to by the given message View source","title":"TextQuote"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote","text":"This object contains information about the quoted part of a message that is replied to by the given message.","title":"TextQuote"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote.new(text,position,entities,is_manual)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#entities","text":"Optional. Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes. View source","title":"#entities"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#entities=(entities)","text":"Optional. Special entities that appear in the quote. Currently, only bold, italic, underline, strikethrough, spoiler, and custom_emoji entities are kept in quotes. View source","title":"#entities="},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#is_manual=(is_manual)","text":"Optional. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server. View source","title":"#is_manual="},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#is_manual?","text":"Optional. True, if the quote was chosen manually by the message sender. Otherwise, the quote was added automatically by the server. View source","title":"#is_manual?"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#position","text":"Approximate quote position in the original message in UTF-16 code units as specified by the sender View source","title":"#position"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#position=(position)","text":"Approximate quote position in the original message in UTF-16 code units as specified by the sender View source","title":"#position="},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#text","text":"Text of the quoted part of a message that is replied to by the given message View source","title":"#text"},{"location":"api_reference/Tourmaline/TextQuote/#Tourmaline::TextQuote#text=(text)","text":"Text of the quoted part of a message that is replied to by the given message View source","title":"#text="},{"location":"api_reference/Tourmaline/Update/","text":"class Tourmaline::Update inherits Reference # This object represents an incoming update. At most one of the optional parameters can be present in any given update. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( update_id , message : Tourmaline::Message? = nil , edited_message : Tourmaline::Message? = nil , channel_post : Tourmaline::Message? = nil , edited_channel_post : Tourmaline::Message? = nil , business_connection : Tourmaline::BusinessConnection? = nil , business_message : Tourmaline::Message? = nil , edited_business_message : Tourmaline::Message? = nil , deleted_business_messages : Tourmaline::BusinessMessagesDeleted? = nil , message_reaction : Tourmaline::MessageReactionUpdated? = nil , message_reaction_count : Tourmaline::MessageReactionCountUpdated? = nil , inline_query : Tourmaline::InlineQuery? = nil , chosen_inline_result : Tourmaline::ChosenInlineResult? = nil , callback_query : Tourmaline::CallbackQuery? = nil , shipping_query : Tourmaline::ShippingQuery? = nil , pre_checkout_query : Tourmaline::PreCheckoutQuery? = nil , poll : Tourmaline::Poll? = nil , poll_answer : Tourmaline::PollAnswer? = nil , my_chat_member : Tourmaline::ChatMemberUpdated? = nil , chat_member : Tourmaline::ChatMemberUpdated? = nil , chat_join_request : Tourmaline::ChatJoinRequest? = nil , chat_boost : Tourmaline::ChatBoostUpdated? = nil , removed_chat_boost : Tourmaline::ChatBoostRemoved? = nil ) # View source Methods # #animation? # View source #anonymous_admin_message? # View source #audio? # View source #basketball? # View source #bold_entity? # View source #bot_command_entity? # View source #bot_message? # View source #bowling? # View source #business_connection : Tourmaline::BusinessConnection? # Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot View source #business_connection= ( business_connection : Tourmaline::BusinessConnection? ) # Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot View source #business_message : Tourmaline::Message? # Optional. New non-service message from a connected business account View source #business_message= ( business_message : Tourmaline::Message? ) # Optional. New non-service message from a connected business account View source #callback_query : Tourmaline::CallbackQuery? # Optional. New incoming callback query View source #callback_query= ( callback_query : Tourmaline::CallbackQuery? ) # Optional. New incoming callback query View source #callback_query? # View source #caption? # View source #cashtag_entity? # View source #channel_chat_created? # View source #channel_forward_message? # View source #channel_message? # View source #channel_post : Tourmaline::Message? # Optional. New incoming channel post of any kind - text, photo, sticker, etc. View source #channel_post= ( channel_post : Tourmaline::Message? ) # Optional. New incoming channel post of any kind - text, photo, sticker, etc. View source #channel_post? # View source #chat_boost : Tourmaline::ChatBoostUpdated? # Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates. View source #chat_boost= ( chat_boost : Tourmaline::ChatBoostUpdated? ) # Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates. View source #chat_join_request : Tourmaline::ChatJoinRequest? # Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates. View source #chat_join_request= ( chat_join_request : Tourmaline::ChatJoinRequest? ) # Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates. View source #chat_member : Tourmaline::ChatMemberUpdated? # Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates. View source #chat_member= ( chat_member : Tourmaline::ChatMemberUpdated? ) # Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates. View source #chat_member? # View source #chat_shared? # View source #chats ( & block : Chat -> ) # Yields each unique chat in this update to the block. View source #chats # Returns all unique chats included in this update View source #chosen_inline_result : Tourmaline::ChosenInlineResult? # Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source #chosen_inline_result= ( chosen_inline_result : Tourmaline::ChosenInlineResult? ) # Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source #chosen_inline_result? # View source #code_entity? # View source #connected_website? # View source #contact? # View source #dart? # View source #delete_chat_photo? # View source #deleted_business_messages : Tourmaline::BusinessMessagesDeleted? # Optional. Messages were deleted from a connected business account View source #deleted_business_messages= ( deleted_business_messages : Tourmaline::BusinessMessagesDeleted? ) # Optional. Messages were deleted from a connected business account View source #dice? # View source #document? # View source #edited_business_message : Tourmaline::Message? # Optional. New version of a message from a connected business account View source #edited_business_message= ( edited_business_message : Tourmaline::Message? ) # Optional. New version of a message from a connected business account View source #edited_channel_post : Tourmaline::Message? # Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source #edited_channel_post= ( edited_channel_post : Tourmaline::Message? ) # Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source #edited_channel_post? # View source #edited_message : Tourmaline::Message? # Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source #edited_message= ( edited_message : Tourmaline::Message? ) # Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source #edited_message? # View source #email_entity? # View source #football? # View source #forum_topic_closed? # View source #forum_topic_created? # View source #forum_topic_edited? # View source #forum_topic_reopened? # View source #forwarded_message? # View source #game? # View source #general_forum_topic_hidden? # View source #general_forum_topic_unhidden? # View source #group_chat_created? # View source #hashtag_entity? # View source #inline_query : Tourmaline::InlineQuery? # Optional. New incoming inline query View source #inline_query= ( inline_query : Tourmaline::InlineQuery? ) # Optional. New incoming inline query View source #inline_query? # View source #invoice? # View source #italic_entity? # View source #left_chat_member? # View source #location? # View source #media_group? # View source #mention_entity? # View source #message : Tourmaline::Message? # Optional. New incoming message of any kind - text, photo, sticker, etc. View source #message= ( message : Tourmaline::Message? ) # Optional. New incoming message of any kind - text, photo, sticker, etc. View source #message? # View source #message_auto_delete_timer_changed? # View source #message_reaction : Tourmaline::MessageReactionUpdated? # Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots. View source #message_reaction= ( message_reaction : Tourmaline::MessageReactionUpdated? ) # Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots. View source #message_reaction_count : Tourmaline::MessageReactionCountUpdated? # Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes. View source #message_reaction_count= ( message_reaction_count : Tourmaline::MessageReactionCountUpdated? ) # Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes. View source #migrate_from_chat_id? # View source #migrate_to_chat_id? # View source #my_chat_member : Tourmaline::ChatMemberUpdated? # Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source #my_chat_member= ( my_chat_member : Tourmaline::ChatMemberUpdated? ) # Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source #my_chat_member? # View source #new_chat_members? # View source #new_chat_photo? # View source #new_chat_title? # View source #passport_data? # View source #phone_number_entity? # View source #photo? # View source #pinned_message? # View source #poll : Tourmaline::Poll? # Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot View source #poll= ( poll : Tourmaline::Poll? ) # Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot View source #poll? # View source #poll_answer : Tourmaline::PollAnswer? # Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source #poll_answer= ( poll_answer : Tourmaline::PollAnswer? ) # Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source #poll_answer? # View source #pre_checkout_query : Tourmaline::PreCheckoutQuery? # Optional. New incoming pre-checkout query. Contains full information about checkout View source #pre_checkout_query= ( pre_checkout_query : Tourmaline::PreCheckoutQuery? ) # Optional. New incoming pre-checkout query. Contains full information about checkout View source #pre_checkout_query? # View source #pre_entity? # View source #proximity_alert_triggered? # View source #removed_chat_boost : Tourmaline::ChatBoostRemoved? # Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates. View source #removed_chat_boost= ( removed_chat_boost : Tourmaline::ChatBoostRemoved? ) # Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates. View source #reply_markup? # View source #reply_message? # View source #shipping_query : Tourmaline::ShippingQuery? # Optional. New incoming shipping query. Only for invoices with flexible price View source #shipping_query= ( shipping_query : Tourmaline::ShippingQuery? ) # Optional. New incoming shipping query. Only for invoices with flexible price View source #shipping_query? # View source #slot_machine? # View source #soccerball? # View source #spoiler_entity? # View source #sticker? # View source #strikethrough_entity? # View source #successful_payment? # View source #supergroup_chat_created? # View source #text? # View source #text_link_entity? # View source #text_mention_entity? # View source #thread_message? # View source #underline_entity? # View source #update? # View source #update_actions : Array ( UpdateAction ) # View source #update_id : Int32 | Int64 # The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source #update_id= ( update_id : Int32 | Int64 ) # The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source #url_entity? # View source #user_message? # View source #user_shared? # View source #users ( & block : User -> ) # Yields each unique user in this update to the block. View source #users # Returns all users included in this update as a Set View source #venue? # View source #via_bot? # View source #video? # View source #video_chat_ended? # View source #video_chat_participants_invited? # View source #video_chat_scheduled? # View source #video_chat_started? # View source #video_note? # View source #voice? # View source #web_app_data? # View source","title":"Update"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update","text":"This object represents an incoming update. At most one of the optional parameters can be present in any given update.","title":"Update"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#animation?","text":"View source","title":"#animation?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#anonymous_admin_message?","text":"View source","title":"#anonymous_admin_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#audio?","text":"View source","title":"#audio?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#basketball?","text":"View source","title":"#basketball?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bold_entity?","text":"View source","title":"#bold_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bot_command_entity?","text":"View source","title":"#bot_command_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bot_message?","text":"View source","title":"#bot_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#bowling?","text":"View source","title":"#bowling?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#business_connection","text":"Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot View source","title":"#business_connection"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#business_connection=(business_connection)","text":"Optional. The bot was connected to or disconnected from a business account, or a user edited an existing connection with the bot View source","title":"#business_connection="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#business_message","text":"Optional. New non-service message from a connected business account View source","title":"#business_message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#business_message=(business_message)","text":"Optional. New non-service message from a connected business account View source","title":"#business_message="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#callback_query","text":"Optional. New incoming callback query View source","title":"#callback_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#callback_query=(callback_query)","text":"Optional. New incoming callback query View source","title":"#callback_query="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#callback_query?","text":"View source","title":"#callback_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#caption?","text":"View source","title":"#caption?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#cashtag_entity?","text":"View source","title":"#cashtag_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_chat_created?","text":"View source","title":"#channel_chat_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_forward_message?","text":"View source","title":"#channel_forward_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_message?","text":"View source","title":"#channel_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_post","text":"Optional. New incoming channel post of any kind - text, photo, sticker, etc. View source","title":"#channel_post"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_post=(channel_post)","text":"Optional. New incoming channel post of any kind - text, photo, sticker, etc. View source","title":"#channel_post="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#channel_post?","text":"View source","title":"#channel_post?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_boost","text":"Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates. View source","title":"#chat_boost"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_boost=(chat_boost)","text":"Optional. A chat boost was added or changed. The bot must be an administrator in the chat to receive these updates. View source","title":"#chat_boost="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_join_request","text":"Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates. View source","title":"#chat_join_request"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_join_request=(chat_join_request)","text":"Optional. A request to join the chat has been sent. The bot must have the can_invite_users administrator right in the chat to receive these updates. View source","title":"#chat_join_request="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_member","text":"Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates. View source","title":"#chat_member"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_member=(chat_member)","text":"Optional. A chat member's status was updated in a chat. The bot must be an administrator in the chat and must explicitly specify \"chat_member\" in the list of allowed_updates to receive these updates. View source","title":"#chat_member="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_member?","text":"View source","title":"#chat_member?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chat_shared?","text":"View source","title":"#chat_shared?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chats(&)","text":"Yields each unique chat in this update to the block. View source","title":"#chats"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chosen_inline_result","text":"Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source","title":"#chosen_inline_result"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chosen_inline_result=(chosen_inline_result)","text":"Optional. The result of an inline query that was chosen by a user and sent to their chat partner. Please see our documentation on the feedback collecting for details on how to enable these updates for your bot. View source","title":"#chosen_inline_result="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#chosen_inline_result?","text":"View source","title":"#chosen_inline_result?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#code_entity?","text":"View source","title":"#code_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#connected_website?","text":"View source","title":"#connected_website?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#contact?","text":"View source","title":"#contact?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#dart?","text":"View source","title":"#dart?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#delete_chat_photo?","text":"View source","title":"#delete_chat_photo?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#deleted_business_messages","text":"Optional. Messages were deleted from a connected business account View source","title":"#deleted_business_messages"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#deleted_business_messages=(deleted_business_messages)","text":"Optional. Messages were deleted from a connected business account View source","title":"#deleted_business_messages="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#dice?","text":"View source","title":"#dice?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#document?","text":"View source","title":"#document?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_business_message","text":"Optional. New version of a message from a connected business account View source","title":"#edited_business_message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_business_message=(edited_business_message)","text":"Optional. New version of a message from a connected business account View source","title":"#edited_business_message="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_channel_post","text":"Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source","title":"#edited_channel_post"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_channel_post=(edited_channel_post)","text":"Optional. New version of a channel post that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source","title":"#edited_channel_post="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_channel_post?","text":"View source","title":"#edited_channel_post?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_message","text":"Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source","title":"#edited_message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_message=(edited_message)","text":"Optional. New version of a message that is known to the bot and was edited. This update may at times be triggered by changes to message fields that are either unavailable or not actively used by your bot. View source","title":"#edited_message="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#edited_message?","text":"View source","title":"#edited_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#email_entity?","text":"View source","title":"#email_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#football?","text":"View source","title":"#football?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forum_topic_closed?","text":"View source","title":"#forum_topic_closed?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forum_topic_created?","text":"View source","title":"#forum_topic_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forum_topic_edited?","text":"View source","title":"#forum_topic_edited?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forum_topic_reopened?","text":"View source","title":"#forum_topic_reopened?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#forwarded_message?","text":"View source","title":"#forwarded_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#game?","text":"View source","title":"#game?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#general_forum_topic_hidden?","text":"View source","title":"#general_forum_topic_hidden?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#general_forum_topic_unhidden?","text":"View source","title":"#general_forum_topic_unhidden?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#group_chat_created?","text":"View source","title":"#group_chat_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#hashtag_entity?","text":"View source","title":"#hashtag_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#inline_query","text":"Optional. New incoming inline query View source","title":"#inline_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#inline_query=(inline_query)","text":"Optional. New incoming inline query View source","title":"#inline_query="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#inline_query?","text":"View source","title":"#inline_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#invoice?","text":"View source","title":"#invoice?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#italic_entity?","text":"View source","title":"#italic_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#left_chat_member?","text":"View source","title":"#left_chat_member?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#location?","text":"View source","title":"#location?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#media_group?","text":"View source","title":"#media_group?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#mention_entity?","text":"View source","title":"#mention_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message","text":"Optional. New incoming message of any kind - text, photo, sticker, etc. View source","title":"#message"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message=(message)","text":"Optional. New incoming message of any kind - text, photo, sticker, etc. View source","title":"#message="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message?","text":"View source","title":"#message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message_auto_delete_timer_changed?","text":"View source","title":"#message_auto_delete_timer_changed?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message_reaction","text":"Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots. View source","title":"#message_reaction"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message_reaction=(message_reaction)","text":"Optional. A reaction to a message was changed by a user. The bot must be an administrator in the chat and must explicitly specify \"message_reaction\" in the list of allowed_updates to receive these updates. The update isn't received for reactions set by bots. View source","title":"#message_reaction="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message_reaction_count","text":"Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes. View source","title":"#message_reaction_count"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#message_reaction_count=(message_reaction_count)","text":"Optional. Reactions to a message with anonymous reactions were changed. The bot must be an administrator in the chat and must explicitly specify \"message_reaction_count\" in the list of allowed_updates to receive these updates. The updates are grouped and can be sent with delay up to a few minutes. View source","title":"#message_reaction_count="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#migrate_from_chat_id?","text":"View source","title":"#migrate_from_chat_id?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#migrate_to_chat_id?","text":"View source","title":"#migrate_to_chat_id?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#my_chat_member","text":"Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source","title":"#my_chat_member"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#my_chat_member=(my_chat_member)","text":"Optional. The bot's chat member status was updated in a chat. For private chats, this update is received only when the bot is blocked or unblocked by the user. View source","title":"#my_chat_member="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#my_chat_member?","text":"View source","title":"#my_chat_member?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#new_chat_members?","text":"View source","title":"#new_chat_members?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#new_chat_photo?","text":"View source","title":"#new_chat_photo?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#new_chat_title?","text":"View source","title":"#new_chat_title?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#passport_data?","text":"View source","title":"#passport_data?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#phone_number_entity?","text":"View source","title":"#phone_number_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#photo?","text":"View source","title":"#photo?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pinned_message?","text":"View source","title":"#pinned_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll","text":"Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot View source","title":"#poll"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll=(poll)","text":"Optional. New poll state. Bots receive only updates about manually stopped polls and polls, which are sent by the bot View source","title":"#poll="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll?","text":"View source","title":"#poll?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll_answer","text":"Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source","title":"#poll_answer"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll_answer=(poll_answer)","text":"Optional. A user changed their answer in a non-anonymous poll. Bots receive new votes only in polls that were sent by the bot itself. View source","title":"#poll_answer="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#poll_answer?","text":"View source","title":"#poll_answer?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_checkout_query","text":"Optional. New incoming pre-checkout query. Contains full information about checkout View source","title":"#pre_checkout_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_checkout_query=(pre_checkout_query)","text":"Optional. New incoming pre-checkout query. Contains full information about checkout View source","title":"#pre_checkout_query="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_checkout_query?","text":"View source","title":"#pre_checkout_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#pre_entity?","text":"View source","title":"#pre_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#proximity_alert_triggered?","text":"View source","title":"#proximity_alert_triggered?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#removed_chat_boost","text":"Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates. View source","title":"#removed_chat_boost"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#removed_chat_boost=(removed_chat_boost)","text":"Optional. A boost was removed from a chat. The bot must be an administrator in the chat to receive these updates. View source","title":"#removed_chat_boost="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#reply_markup?","text":"View source","title":"#reply_markup?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#reply_message?","text":"View source","title":"#reply_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#shipping_query","text":"Optional. New incoming shipping query. Only for invoices with flexible price View source","title":"#shipping_query"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#shipping_query=(shipping_query)","text":"Optional. New incoming shipping query. Only for invoices with flexible price View source","title":"#shipping_query="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#shipping_query?","text":"View source","title":"#shipping_query?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#slot_machine?","text":"View source","title":"#slot_machine?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#soccerball?","text":"View source","title":"#soccerball?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#spoiler_entity?","text":"View source","title":"#spoiler_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#sticker?","text":"View source","title":"#sticker?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#strikethrough_entity?","text":"View source","title":"#strikethrough_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#successful_payment?","text":"View source","title":"#successful_payment?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#supergroup_chat_created?","text":"View source","title":"#supergroup_chat_created?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#text?","text":"View source","title":"#text?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#text_link_entity?","text":"View source","title":"#text_link_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#text_mention_entity?","text":"View source","title":"#text_mention_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#thread_message?","text":"View source","title":"#thread_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#underline_entity?","text":"View source","title":"#underline_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update?","text":"View source","title":"#update?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update_actions","text":"View source","title":"#update_actions"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update_id","text":"The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source","title":"#update_id"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#update_id=(update_id)","text":"The update's unique identifier. Update identifiers start from a certain positive number and increase sequentially. This identifier becomes especially handy if you're using webhooks, since it allows you to ignore repeated updates or to restore the correct update sequence, should they get out of order. If there are no new updates for at least a week, then identifier of the next update will be chosen randomly instead of sequentially. View source","title":"#update_id="},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#url_entity?","text":"View source","title":"#url_entity?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#user_message?","text":"View source","title":"#user_message?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#user_shared?","text":"View source","title":"#user_shared?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#users(&)","text":"Yields each unique user in this update to the block. View source","title":"#users"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#venue?","text":"View source","title":"#venue?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#via_bot?","text":"View source","title":"#via_bot?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_ended?","text":"View source","title":"#video_chat_ended?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_participants_invited?","text":"View source","title":"#video_chat_participants_invited?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_scheduled?","text":"View source","title":"#video_chat_scheduled?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_chat_started?","text":"View source","title":"#video_chat_started?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#video_note?","text":"View source","title":"#video_note?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#voice?","text":"View source","title":"#voice?"},{"location":"api_reference/Tourmaline/Update/#Tourmaline::Update#web_app_data?","text":"View source","title":"#web_app_data?"},{"location":"api_reference/Tourmaline/UpdateAction/","text":"enum Tourmaline::UpdateAction # The available event types for EventHandler . Members # Update = 0 # Message = 1 # ThreadMessage = 2 # ReplyMessage = 3 # EditedMessage = 4 # ForwardedMessage = 5 # CallbackQuery = 6 # InlineQuery = 7 # ShippingQuery = 8 # PreCheckoutQuery = 9 # ChosenInlineResult = 10 # ChannelPost = 11 # EditedChannelPost = 12 # MyChatMember = 13 # ChatMember = 14 # ViaBot = 15 # Text = 16 # Caption = 17 # Animation = 18 # Audio = 19 # Document = 20 # Photo = 21 # Sticker = 22 # Video = 23 # Voice = 24 # Contact = 25 # Location = 26 # Venue = 27 # MediaGroup = 28 # NewChatMembers = 29 # LeftChatMember = 30 # NewChatTitle = 31 # NewChatPhoto = 32 # DeleteChatPhoto = 33 # GroupChatCreated = 34 # MessageAutoDeleteTimerChanged = 35 # MigrateToChatId = 36 # SupergroupChatCreated = 37 # ChannelChatCreated = 38 # MigrateFromChatId = 39 # PinnedMessage = 40 # Game = 41 # Poll = 42 # VideoNote = 43 # Invoice = 44 # SuccessfulPayment = 45 # UserShared = 46 # ChatShared = 47 # ConnectedWebsite = 48 # PassportData = 49 # PollAnswer = 50 # ProximityAlertTriggered = 51 # ForumTopicCreated = 52 # ForumTopicEdited = 53 # ForumTopicClosed = 54 # ForumTopicReopened = 55 # GeneralForumTopicHidden = 56 # GeneralForumTopicUnhidden = 57 # VideoChatScheduled = 58 # VideoChatStarted = 59 # VideoChatEnded = 60 # VideoChatParticipantsInvited = 61 # WebAppData = 62 # ReplyMarkup = 63 # Dice = 64 # Dart = 65 # \ud83c\udfb2 Basketball = 66 # \ud83c\udfaf Football = 67 # \ud83c\udfc0 Soccerball = 68 # \u26bd\ufe0f SlotMachine = 69 # \u26bd\ufe0f but American Bowling = 70 # \ud83c\udfb0 BotMessage = 71 # UserMessage = 72 # ChannelMessage = 73 # ChannelForwardMessage = 74 # AnonymousAdminMessage = 75 # MentionEntity = 76 # TextMentionEntity = 77 # HashtagEntity = 78 # CashtagEntity = 79 # BotCommandEntity = 80 # UrlEntity = 81 # EmailEntity = 82 # PhoneNumberEntity = 83 # BoldEntity = 84 # ItalicEntity = 85 # CodeEntity = 86 # PreEntity = 87 # TextLinkEntity = 88 # UnderlineEntity = 89 # StrikethroughEntity = 90 # SpoilerEntity = 91 # Class methods # .from_update ( update : Tourmaline::Update ) # Takes an Update and returns an array of update actions. View source .to_a # View source Methods # #animation? # View source #anonymous_admin_message? # View source #audio? # View source #basketball? # View source #bold_entity? # View source #bot_command_entity? # View source #bot_message? # View source #bowling? # View source #callback_query? # View source #caption? # View source #cashtag_entity? # View source #channel_chat_created? # View source #channel_forward_message? # View source #channel_message? # View source #channel_post? # View source #chat_member? # View source #chat_shared? # View source #chosen_inline_result? # View source #code_entity? # View source #connected_website? # View source #contact? # View source #dart? # View source #delete_chat_photo? # View source #dice? # View source #document? # View source #edited_channel_post? # View source #edited_message? # View source #email_entity? # View source #football? # View source #forum_topic_closed? # View source #forum_topic_created? # View source #forum_topic_edited? # View source #forum_topic_reopened? # View source #forwarded_message? # View source #game? # View source #general_forum_topic_hidden? # View source #general_forum_topic_unhidden? # View source #group_chat_created? # View source #hashtag_entity? # View source #inline_query? # View source #invoice? # View source #italic_entity? # View source #left_chat_member? # View source #location? # View source #media_group? # View source #mention_entity? # View source #message? # View source #message_auto_delete_timer_changed? # View source #migrate_from_chat_id? # View source #migrate_to_chat_id? # View source #my_chat_member? # View source #new_chat_members? # View source #new_chat_photo? # View source #new_chat_title? # View source #passport_data? # View source #phone_number_entity? # View source #photo? # View source #pinned_message? # View source #poll? # View source #poll_answer? # View source #pre_checkout_query? # View source #pre_entity? # View source #proximity_alert_triggered? # View source #reply_markup? # View source #reply_message? # View source #shipping_query? # View source #slot_machine? # View source #soccerball? # View source #spoiler_entity? # View source #sticker? # View source #strikethrough_entity? # View source #successful_payment? # View source #supergroup_chat_created? # View source #text? # View source #text_link_entity? # View source #text_mention_entity? # View source #thread_message? # View source #to_s # Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source #underline_entity? # View source #update? # View source #url_entity? # View source #user_message? # View source #user_shared? # View source #venue? # View source #via_bot? # View source #video? # View source #video_chat_ended? # View source #video_chat_participants_invited? # View source #video_chat_scheduled? # View source #video_chat_started? # View source #video_note? # View source #voice? # View source #web_app_data? # View source","title":"UpdateAction"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction","text":"The available event types for EventHandler .","title":"UpdateAction"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-members","text":"","title":"Members"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Update","text":"","title":"Update"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Message","text":"","title":"Message"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ThreadMessage","text":"","title":"ThreadMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ReplyMessage","text":"","title":"ReplyMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EditedMessage","text":"","title":"EditedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForwardedMessage","text":"","title":"ForwardedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CallbackQuery","text":"","title":"CallbackQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::InlineQuery","text":"","title":"InlineQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ShippingQuery","text":"","title":"ShippingQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PreCheckoutQuery","text":"","title":"PreCheckoutQuery"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChosenInlineResult","text":"","title":"ChosenInlineResult"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelPost","text":"","title":"ChannelPost"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EditedChannelPost","text":"","title":"EditedChannelPost"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MyChatMember","text":"","title":"MyChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChatMember","text":"","title":"ChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ViaBot","text":"","title":"ViaBot"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Text","text":"","title":"Text"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Caption","text":"","title":"Caption"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Animation","text":"","title":"Animation"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Audio","text":"","title":"Audio"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Document","text":"","title":"Document"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Photo","text":"","title":"Photo"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Sticker","text":"","title":"Sticker"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Video","text":"","title":"Video"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Voice","text":"","title":"Voice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Contact","text":"","title":"Contact"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Location","text":"","title":"Location"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Venue","text":"","title":"Venue"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MediaGroup","text":"","title":"MediaGroup"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatMembers","text":"","title":"NewChatMembers"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::LeftChatMember","text":"","title":"LeftChatMember"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatTitle","text":"","title":"NewChatTitle"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::NewChatPhoto","text":"","title":"NewChatPhoto"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::DeleteChatPhoto","text":"","title":"DeleteChatPhoto"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::GroupChatCreated","text":"","title":"GroupChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MessageAutoDeleteTimerChanged","text":"","title":"MessageAutoDeleteTimerChanged"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MigrateToChatId","text":"","title":"MigrateToChatId"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SupergroupChatCreated","text":"","title":"SupergroupChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelChatCreated","text":"","title":"ChannelChatCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MigrateFromChatId","text":"","title":"MigrateFromChatId"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PinnedMessage","text":"","title":"PinnedMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Game","text":"","title":"Game"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Poll","text":"","title":"Poll"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoNote","text":"","title":"VideoNote"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Invoice","text":"","title":"Invoice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SuccessfulPayment","text":"","title":"SuccessfulPayment"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UserShared","text":"","title":"UserShared"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChatShared","text":"","title":"ChatShared"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ConnectedWebsite","text":"","title":"ConnectedWebsite"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PassportData","text":"","title":"PassportData"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PollAnswer","text":"","title":"PollAnswer"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ProximityAlertTriggered","text":"","title":"ProximityAlertTriggered"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForumTopicCreated","text":"","title":"ForumTopicCreated"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForumTopicEdited","text":"","title":"ForumTopicEdited"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForumTopicClosed","text":"","title":"ForumTopicClosed"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ForumTopicReopened","text":"","title":"ForumTopicReopened"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::GeneralForumTopicHidden","text":"","title":"GeneralForumTopicHidden"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::GeneralForumTopicUnhidden","text":"","title":"GeneralForumTopicUnhidden"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatScheduled","text":"","title":"VideoChatScheduled"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatStarted","text":"","title":"VideoChatStarted"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatEnded","text":"","title":"VideoChatEnded"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::VideoChatParticipantsInvited","text":"","title":"VideoChatParticipantsInvited"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::WebAppData","text":"","title":"WebAppData"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ReplyMarkup","text":"","title":"ReplyMarkup"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Dice","text":"","title":"Dice"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Dart","text":"\ud83c\udfb2","title":"Dart"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Basketball","text":"\ud83c\udfaf","title":"Basketball"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Football","text":"\ud83c\udfc0","title":"Football"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Soccerball","text":"\u26bd\ufe0f","title":"Soccerball"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SlotMachine","text":"\u26bd\ufe0f but American","title":"SlotMachine"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::Bowling","text":"\ud83c\udfb0","title":"Bowling"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BotMessage","text":"","title":"BotMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UserMessage","text":"","title":"UserMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelMessage","text":"","title":"ChannelMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ChannelForwardMessage","text":"","title":"ChannelForwardMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::AnonymousAdminMessage","text":"","title":"AnonymousAdminMessage"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::MentionEntity","text":"","title":"MentionEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::TextMentionEntity","text":"","title":"TextMentionEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::HashtagEntity","text":"","title":"HashtagEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CashtagEntity","text":"","title":"CashtagEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BotCommandEntity","text":"","title":"BotCommandEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UrlEntity","text":"","title":"UrlEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::EmailEntity","text":"","title":"EmailEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PhoneNumberEntity","text":"","title":"PhoneNumberEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::BoldEntity","text":"","title":"BoldEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::ItalicEntity","text":"","title":"ItalicEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::CodeEntity","text":"","title":"CodeEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::PreEntity","text":"","title":"PreEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::TextLinkEntity","text":"","title":"TextLinkEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::UnderlineEntity","text":"","title":"UnderlineEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::StrikethroughEntity","text":"","title":"StrikethroughEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction::SpoilerEntity","text":"","title":"SpoilerEntity"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-class-methods","text":"","title":"Class methods"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction.from_update(update)","text":"Takes an Update and returns an array of update actions. View source","title":".from_update"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction.to_a","text":"View source","title":".to_a"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#animation?","text":"View source","title":"#animation?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#anonymous_admin_message?","text":"View source","title":"#anonymous_admin_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#audio?","text":"View source","title":"#audio?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#basketball?","text":"View source","title":"#basketball?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bold_entity?","text":"View source","title":"#bold_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bot_command_entity?","text":"View source","title":"#bot_command_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bot_message?","text":"View source","title":"#bot_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#bowling?","text":"View source","title":"#bowling?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#callback_query?","text":"View source","title":"#callback_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#caption?","text":"View source","title":"#caption?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#cashtag_entity?","text":"View source","title":"#cashtag_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_chat_created?","text":"View source","title":"#channel_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_forward_message?","text":"View source","title":"#channel_forward_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_message?","text":"View source","title":"#channel_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#channel_post?","text":"View source","title":"#channel_post?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#chat_member?","text":"View source","title":"#chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#chat_shared?","text":"View source","title":"#chat_shared?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#chosen_inline_result?","text":"View source","title":"#chosen_inline_result?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#code_entity?","text":"View source","title":"#code_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#connected_website?","text":"View source","title":"#connected_website?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#contact?","text":"View source","title":"#contact?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#dart?","text":"View source","title":"#dart?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#delete_chat_photo?","text":"View source","title":"#delete_chat_photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#dice?","text":"View source","title":"#dice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#document?","text":"View source","title":"#document?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#edited_channel_post?","text":"View source","title":"#edited_channel_post?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#edited_message?","text":"View source","title":"#edited_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#email_entity?","text":"View source","title":"#email_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#football?","text":"View source","title":"#football?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forum_topic_closed?","text":"View source","title":"#forum_topic_closed?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forum_topic_created?","text":"View source","title":"#forum_topic_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forum_topic_edited?","text":"View source","title":"#forum_topic_edited?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forum_topic_reopened?","text":"View source","title":"#forum_topic_reopened?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#forwarded_message?","text":"View source","title":"#forwarded_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#game?","text":"View source","title":"#game?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#general_forum_topic_hidden?","text":"View source","title":"#general_forum_topic_hidden?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#general_forum_topic_unhidden?","text":"View source","title":"#general_forum_topic_unhidden?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#group_chat_created?","text":"View source","title":"#group_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#hashtag_entity?","text":"View source","title":"#hashtag_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#inline_query?","text":"View source","title":"#inline_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#invoice?","text":"View source","title":"#invoice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#italic_entity?","text":"View source","title":"#italic_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#left_chat_member?","text":"View source","title":"#left_chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#location?","text":"View source","title":"#location?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#media_group?","text":"View source","title":"#media_group?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#mention_entity?","text":"View source","title":"#mention_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#message?","text":"View source","title":"#message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#message_auto_delete_timer_changed?","text":"View source","title":"#message_auto_delete_timer_changed?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#migrate_from_chat_id?","text":"View source","title":"#migrate_from_chat_id?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#migrate_to_chat_id?","text":"View source","title":"#migrate_to_chat_id?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#my_chat_member?","text":"View source","title":"#my_chat_member?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_members?","text":"View source","title":"#new_chat_members?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_photo?","text":"View source","title":"#new_chat_photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#new_chat_title?","text":"View source","title":"#new_chat_title?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#passport_data?","text":"View source","title":"#passport_data?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#phone_number_entity?","text":"View source","title":"#phone_number_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#photo?","text":"View source","title":"#photo?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pinned_message?","text":"View source","title":"#pinned_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#poll?","text":"View source","title":"#poll?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#poll_answer?","text":"View source","title":"#poll_answer?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pre_checkout_query?","text":"View source","title":"#pre_checkout_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#pre_entity?","text":"View source","title":"#pre_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#proximity_alert_triggered?","text":"View source","title":"#proximity_alert_triggered?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#reply_markup?","text":"View source","title":"#reply_markup?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#reply_message?","text":"View source","title":"#reply_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#shipping_query?","text":"View source","title":"#shipping_query?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#slot_machine?","text":"View source","title":"#slot_machine?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#soccerball?","text":"View source","title":"#soccerball?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#spoiler_entity?","text":"View source","title":"#spoiler_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#sticker?","text":"View source","title":"#sticker?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#strikethrough_entity?","text":"View source","title":"#strikethrough_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#successful_payment?","text":"View source","title":"#successful_payment?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#supergroup_chat_created?","text":"View source","title":"#supergroup_chat_created?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text?","text":"View source","title":"#text?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text_link_entity?","text":"View source","title":"#text_link_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#text_mention_entity?","text":"View source","title":"#text_mention_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#thread_message?","text":"View source","title":"#thread_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#to_s","text":"Returns a String representation of this enum member. In the case of regular enums, this is just the name of the member. In the case of flag enums, it's the names joined by vertical bars, or \"None\", if the value is zero. If an enum's value doesn't match a member's value, the raw value is returned as a string. Color :: Red . to_s # => \"Red\" IOMode :: None . to_s # => \"None\" ( IOMode :: Read | IOMode :: Write ) . to_s # => \"Read | Write\" Color . new ( 10 ) . to_s # => \"10\" View source","title":"#to_s"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#underline_entity?","text":"View source","title":"#underline_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#update?","text":"View source","title":"#update?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#url_entity?","text":"View source","title":"#url_entity?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#user_message?","text":"View source","title":"#user_message?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#user_shared?","text":"View source","title":"#user_shared?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#venue?","text":"View source","title":"#venue?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#via_bot?","text":"View source","title":"#via_bot?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video?","text":"View source","title":"#video?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_ended?","text":"View source","title":"#video_chat_ended?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_participants_invited?","text":"View source","title":"#video_chat_participants_invited?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_scheduled?","text":"View source","title":"#video_chat_scheduled?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_chat_started?","text":"View source","title":"#video_chat_started?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#video_note?","text":"View source","title":"#video_note?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#voice?","text":"View source","title":"#voice?"},{"location":"api_reference/Tourmaline/UpdateAction/#Tourmaline::UpdateAction#web_app_data?","text":"View source","title":"#web_app_data?"},{"location":"api_reference/Tourmaline/User/","text":"class Tourmaline::User inherits Reference # This object represents a Telegram user or bot. Included modules JSON::Serializable Constructors # .new ( id , is_bot , first_name , last_name : String? = nil , username : String? = nil , language_code : String? = nil , is_premium : Bool? = nil , added_to_attachment_menu : Bool? = nil , can_join_groups : Bool? = nil , can_read_all_group_messages : Bool? = nil , supports_inline_queries : Bool? = nil , can_connect_to_business : Bool? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #added_to_attachment_menu= ( added_to_attachment_menu : Bool? ) # Optional. True, if this user added the bot to the attachment menu View source #added_to_attachment_menu? : Bool? # Optional. True, if this user added the bot to the attachment menu View source #can_connect_to_business= ( can_connect_to_business : Bool? ) # Optional. True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe. View source #can_connect_to_business? : Bool? # Optional. True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe. View source #can_join_groups= ( can_join_groups : Bool? ) # Optional. True, if the bot can be invited to groups. Returned only in getMe. View source #can_join_groups? : Bool? # Optional. True, if the bot can be invited to groups. Returned only in getMe. View source #can_read_all_group_messages= ( can_read_all_group_messages : Bool? ) # Optional. True, if privacy mode is disabled for the bot. Returned only in getMe. View source #can_read_all_group_messages? : Bool? # Optional. True, if privacy mode is disabled for the bot. Returned only in getMe. View source #first_name : String # User's or bot's first name View source #first_name= ( first_name : String ) # User's or bot's first name View source #full_name # View source #id : Int32 | Int64 # Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source #id= ( id : Int32 | Int64 ) # Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source #inline_mention ( name ) # View source #is_bot= ( is_bot : Bool ) # True, if this user is a bot View source #is_bot? : Bool # True, if this user is a bot View source #is_premium= ( is_premium : Bool? ) # Optional. True, if this user is a Telegram Premium user View source #is_premium? : Bool? # Optional. True, if this user is a Telegram Premium user View source #language_code : String? # Optional. IETF language tag of the user's language View source #language_code= ( language_code : String? ) # Optional. IETF language tag of the user's language View source #last_name : String? # Optional. User's or bot's last name View source #last_name= ( last_name : String? ) # Optional. User's or bot's last name View source #supports_inline_queries= ( supports_inline_queries : Bool? ) # Optional. True, if the bot supports inline queries. Returned only in getMe. View source #supports_inline_queries? : Bool? # Optional. True, if the bot supports inline queries. Returned only in getMe. View source #username : String? # Optional. User's or bot's username View source #username= ( username : String? ) # Optional. User's or bot's username View source","title":"User"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User","text":"This object represents a Telegram user or bot.","title":"User"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User.new(id,is_bot,first_name,last_name,username,language_code,is_premium,added_to_attachment_menu,can_join_groups,can_read_all_group_messages,supports_inline_queries,can_connect_to_business)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#added_to_attachment_menu=(added_to_attachment_menu)","text":"Optional. True, if this user added the bot to the attachment menu View source","title":"#added_to_attachment_menu="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#added_to_attachment_menu?","text":"Optional. True, if this user added the bot to the attachment menu View source","title":"#added_to_attachment_menu?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_connect_to_business=(can_connect_to_business)","text":"Optional. True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe. View source","title":"#can_connect_to_business="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_connect_to_business?","text":"Optional. True, if the bot can be connected to a Telegram Business account to receive its messages. Returned only in getMe. View source","title":"#can_connect_to_business?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_join_groups=(can_join_groups)","text":"Optional. True, if the bot can be invited to groups. Returned only in getMe. View source","title":"#can_join_groups="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_join_groups?","text":"Optional. True, if the bot can be invited to groups. Returned only in getMe. View source","title":"#can_join_groups?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_read_all_group_messages=(can_read_all_group_messages)","text":"Optional. True, if privacy mode is disabled for the bot. Returned only in getMe. View source","title":"#can_read_all_group_messages="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#can_read_all_group_messages?","text":"Optional. True, if privacy mode is disabled for the bot. Returned only in getMe. View source","title":"#can_read_all_group_messages?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#first_name","text":"User's or bot's first name View source","title":"#first_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#first_name=(first_name)","text":"User's or bot's first name View source","title":"#first_name="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#full_name","text":"View source","title":"#full_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#id","text":"Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#id"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#id=(id)","text":"Unique identifier for this user or bot. This number may have more than 32 significant bits and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a 64-bit integer or double-precision float type are safe for storing this identifier. View source","title":"#id="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#inline_mention(name)","text":"View source","title":"#inline_mention"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#is_bot=(is_bot)","text":"True, if this user is a bot View source","title":"#is_bot="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#is_bot?","text":"True, if this user is a bot View source","title":"#is_bot?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#is_premium=(is_premium)","text":"Optional. True, if this user is a Telegram Premium user View source","title":"#is_premium="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#is_premium?","text":"Optional. True, if this user is a Telegram Premium user View source","title":"#is_premium?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#language_code","text":"Optional. IETF language tag of the user's language View source","title":"#language_code"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#language_code=(language_code)","text":"Optional. IETF language tag of the user's language View source","title":"#language_code="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#last_name","text":"Optional. User's or bot's last name View source","title":"#last_name"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#last_name=(last_name)","text":"Optional. User's or bot's last name View source","title":"#last_name="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#supports_inline_queries=(supports_inline_queries)","text":"Optional. True, if the bot supports inline queries. Returned only in getMe. View source","title":"#supports_inline_queries="},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#supports_inline_queries?","text":"Optional. True, if the bot supports inline queries. Returned only in getMe. View source","title":"#supports_inline_queries?"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#username","text":"Optional. User's or bot's username View source","title":"#username"},{"location":"api_reference/Tourmaline/User/#Tourmaline::User#username=(username)","text":"Optional. User's or bot's username View source","title":"#username="},{"location":"api_reference/Tourmaline/UserChatBoosts/","text":"class Tourmaline::UserChatBoosts inherits Reference # This object represents a list of boosts added to a chat by a user. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( boosts : Array ( Tourmaline::ChatBoost ) = [] of Tourmaline :: ChatBoost ) # View source Methods # #boosts : Array ( Tourmaline::ChatBoost ) # The list of boosts added to the chat by the user View source #boosts= ( boosts : Array ( Tourmaline::ChatBoost )) # The list of boosts added to the chat by the user View source","title":"UserChatBoosts"},{"location":"api_reference/Tourmaline/UserChatBoosts/#Tourmaline::UserChatBoosts","text":"This object represents a list of boosts added to a chat by a user.","title":"UserChatBoosts"},{"location":"api_reference/Tourmaline/UserChatBoosts/#Tourmaline::UserChatBoosts-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/UserChatBoosts/#Tourmaline::UserChatBoosts.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/UserChatBoosts/#Tourmaline::UserChatBoosts-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UserChatBoosts/#Tourmaline::UserChatBoosts#boosts","text":"The list of boosts added to the chat by the user View source","title":"#boosts"},{"location":"api_reference/Tourmaline/UserChatBoosts/#Tourmaline::UserChatBoosts#boosts=(boosts)","text":"The list of boosts added to the chat by the user View source","title":"#boosts="},{"location":"api_reference/Tourmaline/UserProfilePhotos/","text":"class Tourmaline::UserProfilePhotos inherits Reference # This object represent a user's profile pictures. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( total_count , photos : Array ( Array ( Tourmaline::PhotoSize )) = [] of Array ( Tourmaline :: PhotoSize )) # View source Methods # #photos : Array ( Array ( Tourmaline::PhotoSize )) # Requested profile pictures (in up to 4 sizes each) View source #photos= ( photos : Array ( Array ( Tourmaline::PhotoSize ))) # Requested profile pictures (in up to 4 sizes each) View source #total_count : Int32 | Int64 # Total number of profile pictures the target user has View source #total_count= ( total_count : Int32 | Int64 ) # Total number of profile pictures the target user has View source","title":"UserProfilePhotos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos","text":"This object represent a user's profile pictures.","title":"UserProfilePhotos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#photos","text":"Requested profile pictures (in up to 4 sizes each) View source","title":"#photos"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#photos=(photos)","text":"Requested profile pictures (in up to 4 sizes each) View source","title":"#photos="},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#total_count","text":"Total number of profile pictures the target user has View source","title":"#total_count"},{"location":"api_reference/Tourmaline/UserProfilePhotos/#Tourmaline::UserProfilePhotos#total_count=(total_count)","text":"Total number of profile pictures the target user has View source","title":"#total_count="},{"location":"api_reference/Tourmaline/UsersShared/","text":"class Tourmaline::UsersShared inherits Reference # This object contains information about the users whose identifiers were shared with the bot using a KeyboardButtonRequestUsers button. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( request_id , users : Array ( Tourmaline::SharedUser ) = [] of Tourmaline :: SharedUser ) # View source Methods # #request_id : Int32 | Int64 # Identifier of the request View source #request_id= ( request_id : Int32 | Int64 ) # Identifier of the request View source #users : Array ( Tourmaline::SharedUser ) # Information about users shared with the bot. View source #users= ( users : Array ( Tourmaline::SharedUser )) # Information about users shared with the bot. View source","title":"UsersShared"},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared","text":"This object contains information about the users whose identifiers were shared with the bot using a KeyboardButtonRequestUsers button.","title":"UsersShared"},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared#request_id","text":"Identifier of the request View source","title":"#request_id"},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared#request_id=(request_id)","text":"Identifier of the request View source","title":"#request_id="},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared#users","text":"Information about users shared with the bot. View source","title":"#users"},{"location":"api_reference/Tourmaline/UsersShared/#Tourmaline::UsersShared#users=(users)","text":"Information about users shared with the bot. View source","title":"#users="},{"location":"api_reference/Tourmaline/Venue/","text":"class Tourmaline::Venue inherits Reference # This object represents a venue. Included modules JSON::Serializable Constructors # .new ( location , title , address , foursquare_id : String? = nil , foursquare_type : String? = nil , google_place_id : String? = nil , google_place_type : String? = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #address : String # Address of the venue View source #address= ( address : String ) # Address of the venue View source #foursquare_id : String? # Optional. Foursquare identifier of the venue View source #foursquare_id= ( foursquare_id : String? ) # Optional. Foursquare identifier of the venue View source #foursquare_type : String? # Optional. Foursquare type of the venue. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source #foursquare_type= ( foursquare_type : String? ) # Optional. Foursquare type of the venue. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source #google_place_id : String? # Optional. Google Places identifier of the venue View source #google_place_id= ( google_place_id : String? ) # Optional. Google Places identifier of the venue View source #google_place_type : String? # Optional. Google Places type of the venue. (See supported types.) View source #google_place_type= ( google_place_type : String? ) # Optional. Google Places type of the venue. (See supported types.) View source #location : Tourmaline::Location # Venue location. Can't be a live location View source #location= ( location : Tourmaline::Location ) # Venue location. Can't be a live location View source #title : String # Name of the venue View source #title= ( title : String ) # Name of the venue View source","title":"Venue"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue","text":"This object represents a venue.","title":"Venue"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue.new(location,title,address,foursquare_id,foursquare_type,google_place_id,google_place_type)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#address","text":"Address of the venue View source","title":"#address"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#address=(address)","text":"Address of the venue View source","title":"#address="},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_id","text":"Optional. Foursquare identifier of the venue View source","title":"#foursquare_id"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_id=(foursquare_id)","text":"Optional. Foursquare identifier of the venue View source","title":"#foursquare_id="},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_type","text":"Optional. Foursquare type of the venue. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source","title":"#foursquare_type"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#foursquare_type=(foursquare_type)","text":"Optional. Foursquare type of the venue. (For example, \"arts_entertainment/default\", \"arts_entertainment/aquarium\" or \"food/icecream\".) View source","title":"#foursquare_type="},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_id","text":"Optional. Google Places identifier of the venue View source","title":"#google_place_id"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_id=(google_place_id)","text":"Optional. Google Places identifier of the venue View source","title":"#google_place_id="},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_type","text":"Optional. Google Places type of the venue. (See supported types.) View source","title":"#google_place_type"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#google_place_type=(google_place_type)","text":"Optional. Google Places type of the venue. (See supported types.) View source","title":"#google_place_type="},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#location","text":"Venue location. Can't be a live location View source","title":"#location"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#location=(location)","text":"Venue location. Can't be a live location View source","title":"#location="},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#title","text":"Name of the venue View source","title":"#title"},{"location":"api_reference/Tourmaline/Venue/#Tourmaline::Venue#title=(title)","text":"Name of the venue View source","title":"#title="},{"location":"api_reference/Tourmaline/Video/","text":"class Tourmaline::Video inherits Reference # This object represents a video file. Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , width , height , duration , thumbnail : Tourmaline::PhotoSize? = nil , file_name : String? = nil , mime_type : String? = nil , file_size : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 | Int64 # Duration of the video in seconds as defined by sender View source #duration= ( duration : Int32 | Int64 ) # Duration of the video in seconds as defined by sender View source #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_name : String? # Optional. Original filename as defined by sender View source #file_name= ( file_name : String? ) # Optional. Original filename as defined by sender View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #height : Int32 | Int64 # Video height as defined by sender View source #height= ( height : Int32 | Int64 ) # Video height as defined by sender View source #mime_type : String? # Optional. MIME type of the file as defined by sender View source #mime_type= ( mime_type : String? ) # Optional. MIME type of the file as defined by sender View source #thumbnail : Tourmaline::PhotoSize? # Optional. Video thumbnail View source #thumbnail= ( thumbnail : Tourmaline::PhotoSize? ) # Optional. Video thumbnail View source #width : Int32 | Int64 # Video width as defined by sender View source #width= ( width : Int32 | Int64 ) # Video width as defined by sender View source","title":"Video"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video","text":"This object represents a video file.","title":"Video"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video.new(file_id,file_unique_id,width,height,duration,thumbnail,file_name,mime_type,file_size)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#duration","text":"Duration of the video in seconds as defined by sender View source","title":"#duration"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#duration=(duration)","text":"Duration of the video in seconds as defined by sender View source","title":"#duration="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_name","text":"Optional. Original filename as defined by sender View source","title":"#file_name"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_name=(file_name)","text":"Optional. Original filename as defined by sender View source","title":"#file_name="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_size","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_size=(file_size)","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#height","text":"Video height as defined by sender View source","title":"#height"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#height=(height)","text":"Video height as defined by sender View source","title":"#height="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#mime_type","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#mime_type=(mime_type)","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#thumbnail","text":"Optional. Video thumbnail View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#thumbnail=(thumbnail)","text":"Optional. Video thumbnail View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#width","text":"Video width as defined by sender View source","title":"#width"},{"location":"api_reference/Tourmaline/Video/#Tourmaline::Video#width=(width)","text":"Video width as defined by sender View source","title":"#width="},{"location":"api_reference/Tourmaline/VideoChatEnded/","text":"class Tourmaline::VideoChatEnded inherits Reference # This object represents a service message about a video chat ended in the chat. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( duration ) # View source Methods # #duration : Int32 | Int64 # Video chat duration in seconds View source #duration= ( duration : Int32 | Int64 ) # Video chat duration in seconds View source","title":"VideoChatEnded"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded","text":"This object represents a service message about a video chat ended in the chat.","title":"VideoChatEnded"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded#duration","text":"Video chat duration in seconds View source","title":"#duration"},{"location":"api_reference/Tourmaline/VideoChatEnded/#Tourmaline::VideoChatEnded#duration=(duration)","text":"Video chat duration in seconds View source","title":"#duration="},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/","text":"class Tourmaline::VideoChatParticipantsInvited inherits Reference # This object represents a service message about new members invited to a video chat. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( users : Array ( Tourmaline::User ) = [] of Tourmaline :: User ) # View source Methods # #users : Array ( Tourmaline::User ) # New members that were invited to the video chat View source #users= ( users : Array ( Tourmaline::User )) # New members that were invited to the video chat View source","title":"VideoChatParticipantsInvited"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited","text":"This object represents a service message about new members invited to a video chat.","title":"VideoChatParticipantsInvited"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited#users","text":"New members that were invited to the video chat View source","title":"#users"},{"location":"api_reference/Tourmaline/VideoChatParticipantsInvited/#Tourmaline::VideoChatParticipantsInvited#users=(users)","text":"New members that were invited to the video chat View source","title":"#users="},{"location":"api_reference/Tourmaline/VideoChatScheduled/","text":"class Tourmaline::VideoChatScheduled inherits Reference # This object represents a service message about a video chat scheduled in the chat. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( start_date ) # View source Methods # #start_date : Time # View source #start_date= ( start_date : Time ) # View source","title":"VideoChatScheduled"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled","text":"This object represents a service message about a video chat scheduled in the chat.","title":"VideoChatScheduled"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled#start_date","text":"View source","title":"#start_date"},{"location":"api_reference/Tourmaline/VideoChatScheduled/#Tourmaline::VideoChatScheduled#start_date=(start_date)","text":"View source","title":"#start_date="},{"location":"api_reference/Tourmaline/VideoChatStarted/","text":"class Tourmaline::VideoChatStarted inherits Reference # This object represents a service message about a video chat started in the chat. Currently holds no information. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source","title":"VideoChatStarted"},{"location":"api_reference/Tourmaline/VideoChatStarted/#Tourmaline::VideoChatStarted","text":"This object represents a service message about a video chat started in the chat. Currently holds no information.","title":"VideoChatStarted"},{"location":"api_reference/Tourmaline/VideoChatStarted/#Tourmaline::VideoChatStarted-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoChatStarted/#Tourmaline::VideoChatStarted.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoNote/","text":"class Tourmaline::VideoNote inherits Reference # This object represents a video message (available in Telegram apps as of v.4.0). Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , length , duration , thumbnail : Tourmaline::PhotoSize? = nil , file_size : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 | Int64 # Duration of the video in seconds as defined by sender View source #duration= ( duration : Int32 | Int64 ) # Duration of the video in seconds as defined by sender View source #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #length : Int32 | Int64 # Video width and height (diameter of the video message) as defined by sender View source #length= ( length : Int32 | Int64 ) # Video width and height (diameter of the video message) as defined by sender View source #thumbnail : Tourmaline::PhotoSize? # Optional. Video thumbnail View source #thumbnail= ( thumbnail : Tourmaline::PhotoSize? ) # Optional. Video thumbnail View source","title":"VideoNote"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote","text":"This object represents a video message (available in Telegram apps as of v.4.0).","title":"VideoNote"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote.new(file_id,file_unique_id,length,duration,thumbnail,file_size)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#duration","text":"Duration of the video in seconds as defined by sender View source","title":"#duration"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#duration=(duration)","text":"Duration of the video in seconds as defined by sender View source","title":"#duration="},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_size","text":"Optional. File size in bytes View source","title":"#file_size"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_size=(file_size)","text":"Optional. File size in bytes View source","title":"#file_size="},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#length","text":"Video width and height (diameter of the video message) as defined by sender View source","title":"#length"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#length=(length)","text":"Video width and height (diameter of the video message) as defined by sender View source","title":"#length="},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#thumbnail","text":"Optional. Video thumbnail View source","title":"#thumbnail"},{"location":"api_reference/Tourmaline/VideoNote/#Tourmaline::VideoNote#thumbnail=(thumbnail)","text":"Optional. Video thumbnail View source","title":"#thumbnail="},{"location":"api_reference/Tourmaline/Voice/","text":"class Tourmaline::Voice inherits Reference # This object represents a voice note. Included modules JSON::Serializable Constructors # .new ( file_id , file_unique_id , duration , mime_type : String? = nil , file_size : Int32 | Int64 | Nil = nil ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #duration : Int32 | Int64 # Duration of the audio in seconds as defined by sender View source #duration= ( duration : Int32 | Int64 ) # Duration of the audio in seconds as defined by sender View source #file_id : String # Identifier for this file, which can be used to download or reuse the file View source #file_id= ( file_id : String ) # Identifier for this file, which can be used to download or reuse the file View source #file_size : Int32 | Int64 | Nil # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_size= ( file_size : Int32 | Int64 | Nil ) # Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source #file_unique_id : String # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #file_unique_id= ( file_unique_id : String ) # Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source #mime_type : String? # Optional. MIME type of the file as defined by sender View source #mime_type= ( mime_type : String? ) # Optional. MIME type of the file as defined by sender View source","title":"Voice"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice","text":"This object represents a voice note.","title":"Voice"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice.new(file_id,file_unique_id,duration,mime_type,file_size)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#duration","text":"Duration of the audio in seconds as defined by sender View source","title":"#duration"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#duration=(duration)","text":"Duration of the audio in seconds as defined by sender View source","title":"#duration="},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_id","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_id=(file_id)","text":"Identifier for this file, which can be used to download or reuse the file View source","title":"#file_id="},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_size","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_size=(file_size)","text":"Optional. File size in bytes. It can be bigger than 2^31 and some programming languages may have difficulty/silent defects in interpreting it. But it has at most 52 significant bits, so a signed 64-bit integer or double-precision float type are safe for storing this value. View source","title":"#file_size="},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_unique_id","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#file_unique_id=(file_unique_id)","text":"Unique identifier for this file, which is supposed to be the same over time and for different bots. Can't be used to download or reuse the file. View source","title":"#file_unique_id="},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#mime_type","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type"},{"location":"api_reference/Tourmaline/Voice/#Tourmaline::Voice#mime_type=(mime_type)","text":"Optional. MIME type of the file as defined by sender View source","title":"#mime_type="},{"location":"api_reference/Tourmaline/WebAppData/","text":"class Tourmaline::WebAppData inherits Reference # Describes data sent from a Web App to the bot. Included modules JSON::Serializable Constructors # .new ( data , button_text ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #button_text : String # Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field. View source #button_text= ( button_text : String ) # Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field. View source #data : String # The data. Be aware that a bad client can send arbitrary data in this field. View source #data= ( data : String ) # The data. Be aware that a bad client can send arbitrary data in this field. View source","title":"WebAppData"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData","text":"Describes data sent from a Web App to the bot.","title":"WebAppData"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData.new(data,button_text)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData#button_text","text":"Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field. View source","title":"#button_text"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData#button_text=(button_text)","text":"Text of the web_app keyboard button from which the Web App was opened. Be aware that a bad client can send arbitrary data in this field. View source","title":"#button_text="},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData#data","text":"The data. Be aware that a bad client can send arbitrary data in this field. View source","title":"#data"},{"location":"api_reference/Tourmaline/WebAppData/#Tourmaline::WebAppData#data=(data)","text":"The data. Be aware that a bad client can send arbitrary data in this field. View source","title":"#data="},{"location":"api_reference/Tourmaline/WebAppInfo/","text":"class Tourmaline::WebAppInfo inherits Reference # Describes a Web App. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( url ) # View source Methods # #url : String # An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps View source #url= ( url : String ) # An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps View source","title":"WebAppInfo"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo","text":"Describes a Web App.","title":"WebAppInfo"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo#url","text":"An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps View source","title":"#url"},{"location":"api_reference/Tourmaline/WebAppInfo/#Tourmaline::WebAppInfo#url=(url)","text":"An HTTPS URL of a Web App to be opened with additional data as specified in Initializing Web Apps View source","title":"#url="},{"location":"api_reference/Tourmaline/WebhookInfo/","text":"class Tourmaline::WebhookInfo inherits Reference # Describes the current status of a webhook. Included modules JSON::Serializable Constructors # .new ( url , has_custom_certificate , pending_update_count , ip_address : String? = nil , last_error_date : Int32 | Int64 | Nil = nil , last_error_message : String? = nil , last_synchronization_error_date : Int32 | Int64 | Nil = nil , max_connections : Int32 | Int64 | Nil = nil , allowed_updates : Array ( String ) = [] of String ) # View source .new ( pull : JSON :: PullParser ) # View source Methods # #allowed_updates : Array ( String ) # Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member View source #allowed_updates= ( allowed_updates : Array ( String )) # Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member View source #has_custom_certificate= ( has_custom_certificate : Bool ) # True, if a custom certificate was provided for webhook certificate checks View source #has_custom_certificate? : Bool # True, if a custom certificate was provided for webhook certificate checks View source #ip_address : String? # Optional. Currently used webhook IP address View source #ip_address= ( ip_address : String? ) # Optional. Currently used webhook IP address View source #last_error_date : Time? # View source #last_error_date= ( last_error_date : Time? ) # View source #last_error_message : String? # Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook View source #last_error_message= ( last_error_message : String? ) # Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook View source #last_synchronization_error_date : Time? # View source #last_synchronization_error_date= ( last_synchronization_error_date : Time? ) # View source #max_connections : Int32 | Int64 | Nil # Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery View source #max_connections= ( max_connections : Int32 | Int64 | Nil ) # Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery View source #pending_update_count : Int32 | Int64 # Number of updates awaiting delivery View source #pending_update_count= ( pending_update_count : Int32 | Int64 ) # Number of updates awaiting delivery View source #url : String # Webhook URL, may be empty if webhook is not set up View source #url= ( url : String ) # Webhook URL, may be empty if webhook is not set up View source","title":"WebhookInfo"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo","text":"Describes the current status of a webhook.","title":"WebhookInfo"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo.new(url,has_custom_certificate,pending_update_count,ip_address,last_error_date,last_error_message,last_synchronization_error_date,max_connections,allowed_updates)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#allowed_updates","text":"Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member View source","title":"#allowed_updates"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#allowed_updates=(allowed_updates)","text":"Optional. A list of update types the bot is subscribed to. Defaults to all update types except chat_member View source","title":"#allowed_updates="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#has_custom_certificate=(has_custom_certificate)","text":"True, if a custom certificate was provided for webhook certificate checks View source","title":"#has_custom_certificate="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#has_custom_certificate?","text":"True, if a custom certificate was provided for webhook certificate checks View source","title":"#has_custom_certificate?"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#ip_address","text":"Optional. Currently used webhook IP address View source","title":"#ip_address"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#ip_address=(ip_address)","text":"Optional. Currently used webhook IP address View source","title":"#ip_address="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_date","text":"View source","title":"#last_error_date"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_date=(last_error_date)","text":"View source","title":"#last_error_date="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_message","text":"Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook View source","title":"#last_error_message"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_error_message=(last_error_message)","text":"Optional. Error message in human-readable format for the most recent error that happened when trying to deliver an update via webhook View source","title":"#last_error_message="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_synchronization_error_date","text":"View source","title":"#last_synchronization_error_date"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#last_synchronization_error_date=(last_synchronization_error_date)","text":"View source","title":"#last_synchronization_error_date="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#max_connections","text":"Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery View source","title":"#max_connections"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#max_connections=(max_connections)","text":"Optional. The maximum allowed number of simultaneous HTTPS connections to the webhook for update delivery View source","title":"#max_connections="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#pending_update_count","text":"Number of updates awaiting delivery View source","title":"#pending_update_count"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#pending_update_count=(pending_update_count)","text":"Number of updates awaiting delivery View source","title":"#pending_update_count="},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#url","text":"Webhook URL, may be empty if webhook is not set up View source","title":"#url"},{"location":"api_reference/Tourmaline/WebhookInfo/#Tourmaline::WebhookInfo#url=(url)","text":"Webhook URL, may be empty if webhook is not set up View source","title":"#url="},{"location":"api_reference/Tourmaline/WriteAccessAllowed/","text":"class Tourmaline::WriteAccessAllowed inherits Reference # This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess. Included modules JSON::Serializable Constructors # .new ( pull : JSON :: PullParser ) # View source .new ( from_request : Bool? = nil , web_app_name : String? = nil , from_attachment_menu : Bool? = nil ) # View source Methods # #from_attachment_menu= ( from_attachment_menu : Bool? ) # Optional. True, if the access was granted when the bot was added to the attachment or side menu View source #from_attachment_menu? : Bool? # Optional. True, if the access was granted when the bot was added to the attachment or side menu View source #from_request= ( from_request : Bool? ) # Optional. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess View source #from_request? : Bool? # Optional. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess View source #web_app_name : String? # Optional. Name of the Web App, if the access was granted when the Web App was launched from a link View source #web_app_name= ( web_app_name : String? ) # Optional. Name of the Web App, if the access was granted when the Web App was launched from a link View source","title":"WriteAccessAllowed"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed","text":"This object represents a service message about a user allowing a bot to write messages after adding it to the attachment menu, launching a Web App from a link, or accepting an explicit request from a Web App sent by the method requestWriteAccess.","title":"WriteAccessAllowed"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed-constructors","text":"","title":"Constructors"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed.new(pull)","text":"View source","title":".new"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed-methods","text":"","title":"Methods"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed#from_attachment_menu=(from_attachment_menu)","text":"Optional. True, if the access was granted when the bot was added to the attachment or side menu View source","title":"#from_attachment_menu="},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed#from_attachment_menu?","text":"Optional. True, if the access was granted when the bot was added to the attachment or side menu View source","title":"#from_attachment_menu?"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed#from_request=(from_request)","text":"Optional. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess View source","title":"#from_request="},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed#from_request?","text":"Optional. True, if the access was granted after the user accepted an explicit request from a Web App sent by the method requestWriteAccess View source","title":"#from_request?"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed#web_app_name","text":"Optional. Name of the Web App, if the access was granted when the Web App was launched from a link View source","title":"#web_app_name"},{"location":"api_reference/Tourmaline/WriteAccessAllowed/#Tourmaline::WriteAccessAllowed#web_app_name=(web_app_name)","text":"Optional. Name of the Web App, if the access was granted when the Web App was launched from a link View source","title":"#web_app_name="},{"location":"resources/faq/","text":"Frequently Asked Questions # This is an FAQ for Tourmaline, but the answers should be generalized enough to use as a general FAQ for Telegram bots. Why isn't my bot responding? # Well first of all, have you programmed it? I know it might sound crazy, but 99% of the people that ask this question didn't actually program their bot. Rather they just created a bot with BotFather and expected things to magically work. If the answer to that question is \"yes\", as I hope it is, then there are a few things to try. First of all, make sure you are using the correct API token for the bot you're trying to access. If you have multiple bots it can become pretty easy to accidentally grab the wrong token. Assuming you have the right token, be sure to check that your bot is actually running and that you have a working internet connection. Try running your bot with the LOG_LEVEL environement variable set to DEBUG and check the logs. When running in polling mode you should see a whole bunch of calls to getUpdates . If that didn't work, you may need to check if group privacy mode is turned on. Go to BotFather, send the command /mybots , select your bot, go to Bot Settings > Group Privacy > Turn off . This should only be necessary if your bot is running in groups and you're using non-standard command prefixes, or other handlers like the HearsHandler . Lastly be sure to check the commands you're trying to send. The standard CommandHandler will only respond to commands with the / prefix. Also be sure to remember that command names should be unprefixed. For example: - @[Command(\"/echo\")] + @[Command(\"echo\")] What messages can my bot see? # Depends partially on whether group privacy mode is turned on or not. As a general rule your bot will not see messages sent by other bots. There is no way around this. If your bot is an admin in the group it will see all messages, except those sent by other bots. With group privacy mode turned on (the default) you bot will receive: Commands explicitly meant for them (e.g., /command@this_bot ). General commands from users (e.g. /start ) if the bot was the last bot to send a message to the group. Messages sent via this bot. Replies to any messages implicitly or explicitly meant for this bot. Additionally all bots, regardless of the group privacy mode will receive: All service messages. All messages from private chats with users. All messages from channels where they are a member. Note Eeach particular message can only be available to one privacy-enabled bot at a time, i.e., a reply to bot A containing an explicit command for bot B or sent via bot C will only be available to bot A. Replies have the highest priority. Can bots delete messages? # Yes, under 2 conditions: The bot must have the Delete Messages permission The message must be less than 48 hours old How can I add my bot to a group? # Same way you add any other user. On the desktop client this can be done by clicking the ellipses in the top right corner while viewing your group, clicking Info , and then clicking the Add button. If your bot is meant to be added to groups you can make this a bit easier by giving users a link to do so. The URL for the link should be http://telegram.me/BOT_NAME?startgroup=botstart where BOTNAME is the username of your bot. How can I get a user's information? # Bots are not capable of accessing a user's information soley based off of their user id or username, however there are some ways around this. The simplest is to keep a record of each user your bot comes in contact with by watching incoming messages for the user that sent them. An example of this could be as follows: @[ On ( :message ) ] def persist_users ( update ) if message = update . message # Convenience method to get all users from a message users = message . users # ... add them to a database end end The one exception to this rule is chat members . If you know the user's id or username and a group that they belong to which your bot also belongs to, you can use #get_chat_member to get their ChatMember record. I have a question not listed here, where can I ask? # Feel free to join the official Tourmaline/Proton Chat on Telegram and ask away.","title":"FAQ"},{"location":"resources/faq/#frequently-asked-questions","text":"This is an FAQ for Tourmaline, but the answers should be generalized enough to use as a general FAQ for Telegram bots.","title":"Frequently Asked Questions"},{"location":"resources/faq/#why-isnt-my-bot-responding","text":"Well first of all, have you programmed it? I know it might sound crazy, but 99% of the people that ask this question didn't actually program their bot. Rather they just created a bot with BotFather and expected things to magically work. If the answer to that question is \"yes\", as I hope it is, then there are a few things to try. First of all, make sure you are using the correct API token for the bot you're trying to access. If you have multiple bots it can become pretty easy to accidentally grab the wrong token. Assuming you have the right token, be sure to check that your bot is actually running and that you have a working internet connection. Try running your bot with the LOG_LEVEL environement variable set to DEBUG and check the logs. When running in polling mode you should see a whole bunch of calls to getUpdates . If that didn't work, you may need to check if group privacy mode is turned on. Go to BotFather, send the command /mybots , select your bot, go to Bot Settings > Group Privacy > Turn off . This should only be necessary if your bot is running in groups and you're using non-standard command prefixes, or other handlers like the HearsHandler . Lastly be sure to check the commands you're trying to send. The standard CommandHandler will only respond to commands with the / prefix. Also be sure to remember that command names should be unprefixed. For example: - @[Command(\"/echo\")] + @[Command(\"echo\")]","title":"Why isn't my bot responding?"},{"location":"resources/faq/#what-messages-can-my-bot-see","text":"Depends partially on whether group privacy mode is turned on or not. As a general rule your bot will not see messages sent by other bots. There is no way around this. If your bot is an admin in the group it will see all messages, except those sent by other bots. With group privacy mode turned on (the default) you bot will receive: Commands explicitly meant for them (e.g., /command@this_bot ). General commands from users (e.g. /start ) if the bot was the last bot to send a message to the group. Messages sent via this bot. Replies to any messages implicitly or explicitly meant for this bot. Additionally all bots, regardless of the group privacy mode will receive: All service messages. All messages from private chats with users. All messages from channels where they are a member. Note Eeach particular message can only be available to one privacy-enabled bot at a time, i.e., a reply to bot A containing an explicit command for bot B or sent via bot C will only be available to bot A. Replies have the highest priority.","title":"What messages can my bot see?"},{"location":"resources/faq/#can-bots-delete-messages","text":"Yes, under 2 conditions: The bot must have the Delete Messages permission The message must be less than 48 hours old","title":"Can bots delete messages?"},{"location":"resources/faq/#how-can-i-add-my-bot-to-a-group","text":"Same way you add any other user. On the desktop client this can be done by clicking the ellipses in the top right corner while viewing your group, clicking Info , and then clicking the Add button. If your bot is meant to be added to groups you can make this a bit easier by giving users a link to do so. The URL for the link should be http://telegram.me/BOT_NAME?startgroup=botstart where BOTNAME is the username of your bot.","title":"How can I add my bot to a group?"},{"location":"resources/faq/#how-can-i-get-a-users-information","text":"Bots are not capable of accessing a user's information soley based off of their user id or username, however there are some ways around this. The simplest is to keep a record of each user your bot comes in contact with by watching incoming messages for the user that sent them. An example of this could be as follows: @[ On ( :message ) ] def persist_users ( update ) if message = update . message # Convenience method to get all users from a message users = message . users # ... add them to a database end end The one exception to this rule is chat members . If you know the user's id or username and a group that they belong to which your bot also belongs to, you can use #get_chat_member to get their ChatMember record.","title":"How can I get a user's information?"},{"location":"resources/faq/#i-have-a-question-not-listed-here-where-can-i-ask","text":"Feel free to join the official Tourmaline/Proton Chat on Telegram and ask away.","title":"I have a question not listed here, where can I ask?"},{"location":"usage/","text":"Introduction # Bots are the figurative workhorses of Telegram's platform, allowing for everything from group management to file conversion and more; but how does one make a bot? Well that is the question I aim to answer in this brief introduction. If you already know how to make a bot, and would like to focus more on how to make a bot with Tourmaline, feel free to skip to the Getting Started . The BotFather # Every journey has to start somewhere, and for the would-be Telegram bot developer that is BotFather . BotFather itself is a Telegram bot which allows you to create and manage your own bots. As is convention, you can start BotFather by starting a conversation and pressing the \"Start\" button or sending the /start command. To create a new bot, just send the /newbot command. BotFather will then ask a couple questions which sometimes confuse people. Alright, a new bot. How are we going to call it? Please choose a name for your bot.\" The first question is asking for the screen name of your bot. This is the name that will appear when it sends messages and not its username. Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Now this is your bot's username. As it states, your bot's username must end with the word \"bot\". Capitalization doesn't matter, but ending with the word \"bot\" is pertinant. I won't go into more detail as to how to setup a bot here as you can just run /help to see all of the available commands, but once you finish the bot creation you will be presented with an API Token. KEEP THIS SAFE . Your token is for your eyes and your eyes only, as anyone with half a brain can take your token and use it to control your bot maliciously. We will also need this token later, so keep it handy. Running Your Bot # A bot is nothing more than code running on a computer somewhere. In most cases during development and testing that computer will probably be your own, but what happens when you're ready to share your bot with the world? At that point, running your bot on your own local machine isn't the best idea. Personal computers need to sleep, be restarted every now and then, and have more important jobs than hosting a bot 24/7. Enter the VPS. If you already have a server on which to run your bot, or are at least familiar with how to deploy your bot elsewhere you can probably skip this section. For anyone left remaining, you need a server. Far and away the most affordable method of getting your own server is by using a VPS, or virtual private server. Providers like AWS, DigitalOcean, Vultr, and Hetzner (my personal favorite) provide these for as little as $2-5/mo. To use a VPS you will need some knowledge of Linux, including how to use ssh to remotely access a server. If Linux is foreign to you I highly recommend getting aquainted, as it's going to be very important going forward. We will go into more detail about how to actually run your bot on your VPS later in this guide. Avoiding Limits # Telegram bots are heavily limited in what they can, and cannot do. The good news is that these limits are mostly documented when it comes to bots, so avoiding them is completely in your control. For more information on the current limits I recommend reading \"My bot is hitting limits, how do I avoid this?\" from the Telegram FAQ.","title":"Usage"},{"location":"usage/#introduction","text":"Bots are the figurative workhorses of Telegram's platform, allowing for everything from group management to file conversion and more; but how does one make a bot? Well that is the question I aim to answer in this brief introduction. If you already know how to make a bot, and would like to focus more on how to make a bot with Tourmaline, feel free to skip to the Getting Started .","title":"Introduction"},{"location":"usage/#the-botfather","text":"Every journey has to start somewhere, and for the would-be Telegram bot developer that is BotFather . BotFather itself is a Telegram bot which allows you to create and manage your own bots. As is convention, you can start BotFather by starting a conversation and pressing the \"Start\" button or sending the /start command. To create a new bot, just send the /newbot command. BotFather will then ask a couple questions which sometimes confuse people. Alright, a new bot. How are we going to call it? Please choose a name for your bot.\" The first question is asking for the screen name of your bot. This is the name that will appear when it sends messages and not its username. Good. Now let's choose a username for your bot. It must end in bot . Like this, for example: TetrisBot or tetris_bot. Now this is your bot's username. As it states, your bot's username must end with the word \"bot\". Capitalization doesn't matter, but ending with the word \"bot\" is pertinant. I won't go into more detail as to how to setup a bot here as you can just run /help to see all of the available commands, but once you finish the bot creation you will be presented with an API Token. KEEP THIS SAFE . Your token is for your eyes and your eyes only, as anyone with half a brain can take your token and use it to control your bot maliciously. We will also need this token later, so keep it handy.","title":"The BotFather"},{"location":"usage/#running-your-bot","text":"A bot is nothing more than code running on a computer somewhere. In most cases during development and testing that computer will probably be your own, but what happens when you're ready to share your bot with the world? At that point, running your bot on your own local machine isn't the best idea. Personal computers need to sleep, be restarted every now and then, and have more important jobs than hosting a bot 24/7. Enter the VPS. If you already have a server on which to run your bot, or are at least familiar with how to deploy your bot elsewhere you can probably skip this section. For anyone left remaining, you need a server. Far and away the most affordable method of getting your own server is by using a VPS, or virtual private server. Providers like AWS, DigitalOcean, Vultr, and Hetzner (my personal favorite) provide these for as little as $2-5/mo. To use a VPS you will need some knowledge of Linux, including how to use ssh to remotely access a server. If Linux is foreign to you I highly recommend getting aquainted, as it's going to be very important going forward. We will go into more detail about how to actually run your bot on your VPS later in this guide.","title":"Running Your Bot"},{"location":"usage/#avoiding-limits","text":"Telegram bots are heavily limited in what they can, and cannot do. The good news is that these limits are mostly documented when it comes to bots, so avoiding them is completely in your control. For more information on the current limits I recommend reading \"My bot is hitting limits, how do I avoid this?\" from the Telegram FAQ.","title":"Avoiding Limits"},{"location":"usage/getting_started/","text":"Getting Started with Tourmaline # Time to create your first bot with Tourmaline! Installing Tourmaline # This guide assumes that you have Crystal installed and are at least semi-familiar with the syntax. The first thing we are going to need is a fresh Crystal project, so go ahead and run crystal init app your_bot_name , making sure to replace \"your_bot_name\" with whatever you want to call your bot. I'm going to use the famous echo_bot example. Once it's finished, cd into the project directory. Now, open shard.yml and add the following lines anywhere in the file (probably at the end): 1 2 3 dependencies : tourmaline : github : protoncr/tourmaline Save the file, and run shards install . That's it! Tourmaline is now installed. Creating Your Bot # Now it's time to write some code. Open src/echo_bot.cr or whatever file was generated for you, and paste in the following code. The code is annotated so you can understand what's going on every step of the way. 1 2 3 4 5 6 7 8 9 10 11 12 require \"tourmaline\" # (1) client = Tourmaline :: Client . new ( ENV [ \"BOT_TOKEN\" ] ) # (2) echo_handler = Tourmaline :: CommandHandler . new ( \"echo\" ) do | ctx | # (3) text = ctx . text . to_s ctx . reply ( text ) unless text . empty? # (4) end client . register ( echo_handler ) # (5) client . poll # (6) First we have to import Tourmaline into our code. In Crystal this is done with the require statement. Next we create a new Client object. This is the main object that we will be using to interact with the Telegram Bot API. Into the Client we pass our bot's API token, which we will be getting from the BotFather. We will be storing this in an environment variable, so we use ENV[\"BOT_TOKEN\"] to get the value of the BOT_TOKEN environment variable. If you are not familiar with environment variables, you can read more about them here . Tourmaline uses a system of handlers to handle different types of events. In this case we are creating a CommandHandler which will handle the /echo command. The first argument to the CommandHandler is the name of the command, and the second argument is a block of code that will be executed when the command is received. The block of code is passed a Context object, which contains information about the command and the message that triggered it. The Context object has a text property which contains the text of the message that triggered the command. We can use this to get the text of the message and reply with it. We use the reply method to send a message back to the chat that the command was sent in. We also check to make sure that the message isn't empty, because if the user just sends /echo without any text, the message will be empty. Now that we have created our handler, we need to register it with the Client so that it can be used. This is done with the register method. Finally, we call the poll method on the Client to start the bot. This method will block the current thread, so it is important that you call it at the end of your code. And that's really all their is to it. Now we can run our code! export LOG_LEVEL = info # by default you won't see any logs, so we set the log level to info export BOT_TOKEN = YOUR_BOT_API_TOKEN crystal run ./src/echo_bot.cr If all goes well, you should see something like this: 2023 -03-23T00:17:53.778090Z INFO - tourmaline.poller: Polling for updates...","title":"Getting Started"},{"location":"usage/getting_started/#getting-started-with-tourmaline","text":"Time to create your first bot with Tourmaline!","title":"Getting Started with Tourmaline"},{"location":"usage/getting_started/#installing-tourmaline","text":"This guide assumes that you have Crystal installed and are at least semi-familiar with the syntax. The first thing we are going to need is a fresh Crystal project, so go ahead and run crystal init app your_bot_name , making sure to replace \"your_bot_name\" with whatever you want to call your bot. I'm going to use the famous echo_bot example. Once it's finished, cd into the project directory. Now, open shard.yml and add the following lines anywhere in the file (probably at the end): 1 2 3 dependencies : tourmaline : github : protoncr/tourmaline Save the file, and run shards install . That's it! Tourmaline is now installed.","title":"Installing Tourmaline"},{"location":"usage/getting_started/#creating-your-bot","text":"Now it's time to write some code. Open src/echo_bot.cr or whatever file was generated for you, and paste in the following code. The code is annotated so you can understand what's going on every step of the way. 1 2 3 4 5 6 7 8 9 10 11 12 require \"tourmaline\" # (1) client = Tourmaline :: Client . new ( ENV [ \"BOT_TOKEN\" ] ) # (2) echo_handler = Tourmaline :: CommandHandler . new ( \"echo\" ) do | ctx | # (3) text = ctx . text . to_s ctx . reply ( text ) unless text . empty? # (4) end client . register ( echo_handler ) # (5) client . poll # (6) First we have to import Tourmaline into our code. In Crystal this is done with the require statement. Next we create a new Client object. This is the main object that we will be using to interact with the Telegram Bot API. Into the Client we pass our bot's API token, which we will be getting from the BotFather. We will be storing this in an environment variable, so we use ENV[\"BOT_TOKEN\"] to get the value of the BOT_TOKEN environment variable. If you are not familiar with environment variables, you can read more about them here . Tourmaline uses a system of handlers to handle different types of events. In this case we are creating a CommandHandler which will handle the /echo command. The first argument to the CommandHandler is the name of the command, and the second argument is a block of code that will be executed when the command is received. The block of code is passed a Context object, which contains information about the command and the message that triggered it. The Context object has a text property which contains the text of the message that triggered the command. We can use this to get the text of the message and reply with it. We use the reply method to send a message back to the chat that the command was sent in. We also check to make sure that the message isn't empty, because if the user just sends /echo without any text, the message will be empty. Now that we have created our handler, we need to register it with the Client so that it can be used. This is done with the register method. Finally, we call the poll method on the Client to start the bot. This method will block the current thread, so it is important that you call it at the end of your code. And that's really all their is to it. Now we can run our code! export LOG_LEVEL = info # by default you won't see any logs, so we set the log level to info export BOT_TOKEN = YOUR_BOT_API_TOKEN crystal run ./src/echo_bot.cr If all goes well, you should see something like this: 2023 -03-23T00:17:53.778090Z INFO - tourmaline.poller: Polling for updates...","title":"Creating Your Bot"}]}